<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[iOS梦工厂]]></title>
  <link href="http://al1020119.github.io/atom.xml" rel="self"/>
  <link href="http://al1020119.github.io/"/>
  <updated>2015-11-28T00:21:17+08:00</updated>
  <id>http://al1020119.github.io/</id>
  <author>
    <name><![CDATA[iCocos]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[UITableView性能优化与卡顿问题]]></title>
    <link href="http://al1020119.github.io/blog/2015/11/28/tableviewqia-dun-na-du-bu-shi-shi/"/>
    <updated>2015-11-28T00:05:00+08:00</updated>
    <id>http://al1020119.github.io/blog/2015/11/28/tableviewqia-dun-na-du-bu-shi-shi</id>
    <content type="html"><![CDATA[<p>引言：</p>

<p>在iOS开发中关于TableView算是已经用烂了的控件，但是又有几个人认真去考路过他的性能优化问题（卡顿）</p>

<p>最近项目中也遇到了不少卡顿的问题，为了更好的饿提高项目的性能，也为了提高自己的技术，专门花了一段时间研究了一下关于TableView的性能问题，在这里就总结了一下，希望可以帮你解决实际问题。</p>

<p>1.最常用的就是cell的重用， 注册重用标识符</p>

<pre><code>如果不重用cell时，每当一个cell显示到屏幕上时，就会重新创建一个新的cell
如果有很多数据的时候，就会堆积很多cell。如果重用cell，为cell创建一个ID
每当需要显示cell 的时候，都会先去缓冲池中寻找可循环利用的cell，如果没有再重新创建cell
设置正确的reuseIdentifer以重用cell
</code></pre>

<p>2.避免cell的重新布局</p>

<pre><code>cell的布局填充等操作 比较耗时，一般创建时就布局好
如可以将cell单独放到一个自定义类，初始化时就布局好
</code></pre>

<p>3.提前计算并缓存cell的属性及内容</p>

<pre><code>在cellForRowAtIndexPath:中尽量做更少的操作。如果需要做一些处理，那么最好做过一次之后，就将结果缓存起来。
当我们创建cell的数据源方法时，编译器并不是先创建cell 再定cell的高度
而是先根据内容一次确定每一个cell的高度，高度确定后，再创建要显示的cell，滚动时，每当cell进入凭虚都会计算高度，提前估算高度告诉编译器，编译器知道高度后，紧接着就会创建cell，这时再调用高度的具体计算方法，这样可以方式浪费时间去计算显示以外的cell
</code></pre>

<p>4.减少cell中控件的数量</p>

<pre><code>尽量使cell得布局大致相同，不同风格的cell可以使用不用的重用标识符，初始化时添加控件，
不适用的可以先隐藏
</code></pre>

<p>5.不要使用ClearColor，无背景色，透明度也不要设置为0</p>

<pre><code>渲染耗时比较长
尽量将view设置为不透明，包括cell本身。
</code></pre>

<p>6.使用局部更新</p>

<pre><code>如果只是更新某组的话，使用reloadSection进行局部更新
</code></pre>

<p>7.加载网络数据，下载图片，使用异步加载，并缓存</p>

<pre><code>如果cell显示的内容来此网络，那么确保这些内容是通过异步来获取的
</code></pre>

<p>8.少使用addView 给cell动态添加view</p>

<p>9.按需加载cell，cell滚动很快时，只加载范围内的cell</p>

<pre><code>注意正确使用懒加载
</code></pre>

<p>10.不要实现无用的代理方法，tableView只遵守两个协议</p>

<pre><code>非必要的代理或者数据源方法可以省略，比如numberofsention
</code></pre>

<p>11.缓存行高：</p>

<pre><code>如果row的高度不相同，那么将其缓存下来
estimatedHeightForRow不能和HeightForRow里面的layoutIfNeed同时存在，这两者同时存在才会出现“窜动”的bug。所以我的建议是：只要是固定行高就写预估行高来减少行高调用次数提升性能。如果是动态行高就不要写预估方法了，用一个行高的缓存字典来减少代码的调用次数即可
</code></pre>

<p>12.避免渐变，图像缩放以及离屏绘制</p>

<p>13.使用shadowPath来设置阴影。</p>

<p>14.使用适当的数据结构来保存需要的信息。不同的结构会带来不同的操作代价。</p>

<p>15.使用rowHeight, sectionFooterHeight 和 sectionHeaderHeight 来设置一个恒定 高度，而不要从delegate中获取。</p>

<hr />

<p>参考：相关性能优化问题</p>

<p><a href="http://www.cocoachina.com/ios/20150408/11501.html">iOS应用性能调优的25个建议和技巧</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[底层开发之越狱开发]]></title>
    <link href="http://al1020119.github.io/blog/2015/11/27/yue-yu-kai-fa-xiang-jie/"/>
    <updated>2015-11-27T22:32:50+08:00</updated>
    <id>http://al1020119.github.io/blog/2015/11/27/yue-yu-kai-fa-xiang-jie</id>
    <content type="html"><![CDATA[<p>做越狱开发也有一些时间了，有很多东西想总结一下，希望给他人一些借鉴，也是自己对过去开发经历的一些总结。个人不推荐使用盗版，这里主要以技术介绍为主。</p>

<p>这个系列里面主要介绍怎样进行越狱开发，涉及到以下几个方面:</p>

<ul>
<li>(1)主要涉及到越狱市场的建立，在App内部实现ipa的安装和卸载以及更新。参照的对象就是91助手，25pp，同步推那样的应用。建立一个盗版的App Store.当然了，如果通过299刀的企业证书的话，是不需要通过Cydia的，直接通过网页链接就可以实现app的推广，有一定的风险。这里面涉及到一些协议，后面会进行介绍。</li>
<li>(2)在App内部实现壁纸和铃声的替换。这个过程涉及到的东西很多，特别是铃声的替换，iPhone里面非常麻烦；</li>
<li>(3)一些越狱插件的开发，通过里面有些插件非常好用，合理，而且非常美观漂亮。
这里先从App内部安装ipa包开始讲，后面逐步把上面提到的3点全部讲完。</li>
</ul>


<p>一般情况下安装91助手，同步推这样的应用需要手机越狱，同时安装AppSync，这样才能使用，所以进行开发的必备条件也是如此。</p>

<p>上传的demo工程的地址，我的github链接：<a href="https://github.com/easonoutlook/IPAInstaller">https://github.com/easonoutlook/IPAInstaller</a></p>

<p>之前一直在fork别人的东西，也没做什么贡献，从现在开始，为开发为开源，做一点自己的贡献。</p>

<p>进入正题：</p>

<p>需要的工具和环境：</p>

<ol type="a">
<li>iPhone or iPad越狱，安装AppSync</li>
<li>Xcode安装 Command Line Tools</li>
<li>下载最新版本的ldid <a href="https://github.com/downloads/rpetrich/ldid/ldid.zip">https://github.com/downloads/rpetrich/ldid/ldid.zip</a></li>
</ol>


<p>1、修改SDKSettings.plist文件</p>

<p>我用的是Xcode4.6.3版本，iPhone的版本是6.1.2, 路径为：</p>

<pre><code>/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS6.1.sdk/
</code></pre>

<p>将这个目录下的 SDKSettings.plist里面的CODE_SIGNING_REQUIRED置为NO</p>

<p>执行命令为：</p>

<p>转到目录下</p>

<pre><code>cd /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS6.1.sdk
</code></pre>

<p>将原有文件备份</p>

<pre><code>sudo cp SDKSettings.plist SDKSettings.plist.orig
</code></pre>

<p>对SDKSettings.plist文件进行编辑</p>

<pre><code>sudo vim SDKSettings.plist
</code></pre>

<p>将下面对应的字段改为NO</p>

<pre><code>&lt;key&gt;CODE_SIGNING_REQUIRED&lt;/key&gt;
&lt;string&gt;YES&lt;/string&gt;  // 默认为YES, 需要改为NO
</code></pre>

<p>此操作参考的路径如下：</p>

<pre><code>http://kqwd.blog.163.com/blog/static/4122344820117191351263/
</code></pre>

<p>2、给工程添加相应的权限，iOS6里面需要赋予权限才可以，iOS5之前不需要此操作</p>

<p>新建一个plist文件，命名为entitlements.</p>

<pre><code>![Alt text](/iamges/yueyu001.jpg)
</code></pre>

<p><img src="http://al1020119.github.io/images/yueyu001.png" title="Caption" ></p>

<p>创建一个plist</p>

<pre><code>![Alt text](/iamges/yueyu002.jpg)
</code></pre>

<p><img src="http://al1020119.github.io/images/yueyu002.png" title="Caption" ></p>

<p>将plist文件改为：</p>

<pre><code>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"&gt;
&lt;plist version="1.0"&gt;
&lt;dict&gt;
    &lt;key&gt;com.apple.private.mobileinstall.allowedSPI&lt;/key&gt;
    &lt;array&gt;
        &lt;string&gt;Install&lt;/string&gt;
        &lt;string&gt;Browse&lt;/string&gt;
        &lt;string&gt;Uninstall&lt;/string&gt;
        &lt;string&gt;Archive&lt;/string&gt;
        &lt;string&gt;RemoveArchive&lt;/string&gt;
    &lt;/array&gt;
&lt;/dict&gt;
&lt;/plist&gt;
</code></pre>

<p>将Code Signing 的Code Signing Entilements设置为刚刚创建的entitlements.plist文件</p>

<pre><code>![Alt text](/iamges/yueyu003.jpg)
</code></pre>

<p><img src="http://al1020119.github.io/images/yueyu003.png" title="Caption" ></p>

<p>后面还需要一个手续，将生产的app文件用ldid签名。后面再介绍。</p>

<p>3、实现越狱安装的代码：</p>

<pre><code>typedef NSDictionary *(*PMobileInstallationLookup)(NSDictionary *params, id callback_unknown_usage);
NSDictionary *IPAInstalledApps()
{
void *lib = dlopen("/System/Library/PrivateFrameworks/MobileInstallation.framework/MobileInstallation", RTLD_LAZY);
if (lib)
{
    PMobileInstallationLookup pMobileInstallationLookup = (PMobileInstallationLookup)dlsym(lib, "MobileInstallationLookup");
    if (pMobileInstallationLookup)
    {
        NSArray *wanted = nil;//[NSArray arrayWithObjects:@"com.celeware.IPADeploy",@"com.celeware.celedial",nil]; Lookup specified only
        NSDictionary *params = [NSDictionary dictionaryWithObjectsAndKeys:@"User", @"ApplicationType", wanted, @"BundleIDs",nil];
        NSDictionary *dict = pMobileInstallationLookup(params, NULL);
#ifdef DEBUG
        NSLog(@"%@", dict);
#endif
        return dict;
    }
}
return nil;
}
</code></pre>

<p>所有代码均在之前的github目录中，可以自行查看。</p>

<p>4、编译生成App文件</p>

<p>因为需要给APP签名加权限，所以不要生成IPA文件，而是生成APP文件。等把签名与权限加好后，再手动用APP制作IPA文件。</p>

<p> 在Xcode中选择设备（IOS Device）（图3），编译（Build）（图4）。编译完成后，在工程的Products文件夹中可以看到刚刚编译好的APP文件，右键Show in Finder（图5），就可以在文件夹中显示。将APP复制到一个别的文件夹中，什么地方都可以，后面需要用到。</p>

<pre><code>![Alt text](/iamges/yueyu004.jpg)
</code></pre>

<p><img src="http://al1020119.github.io/images/yueyu004.png" title="Caption" ></p>

<p>5、制作ipa文件</p>

<p>将之前提到的ldid下载好后，将ldid文件放到/usr/bin中。</p>

<p>比如在 Download 目录下， sudo -i</p>

<p>然后 cp ldid /usr/bin/即可将文件拷贝到/usr/bin中。</p>

<p>然后对之前生成的文件，进行ldid签名</p>

<pre><code>![Alt text](/iamges/yueyu005.jpg)
</code></pre>

<p><img src="http://al1020119.github.io/images/yueyu005.png" title="Caption" ></p>

<ul>
<li><p>这个命令中“ldid -S” ，“ldid”与“-S”之间有一个空格。“-S”与“entitlements.xml”之间没有空格。“entitlements.xml”就是上面说到的XML文件，如果你的XML不是这个名，请将命令修改为你的XML文件名即可。</p></li>
<li><p>“-Sentitlements.xm”与“ipainstall.app”之间有一个空格。“ipainstall”是刚刚生成的APP文件，如果你的名字不一样，请修改为你的名字。“/“后面和APP的名字是一样的。  如果没有输出错误信息或是卡住（就是敲回车后没反应）就是添加权限成功了。</p></li>
</ul>


<p>6、生成ipa文件，安装</p>

<p>新建一个文件夹，命名为“Payload”。将刚刚添加好权限的APP文件放到这个文件夹中。右键“压缩Payload”，得到一个“.zip”文件，将这个ZIP文件的后缀名改为“.ipa”。好了，IPA文件就制作完成了。</p>

<p>然后通过itools安装，测试刚刚生成的文件</p>

<pre><code>![Alt text](/iamges/yueyu006.jpg)
</code></pre>

<p><img src="http://al1020119.github.io/images/yueyu006.png" title="Caption" ></p>

<p>整合了很多资源，有些地方弄的比较凌乱，后面加以完善</p>

<h1>检查iphone时候越狱</h1>

<p>今天项目中要用到检查iPhone是否越狱的方法。</p>

<p>Umeng统计的Mobclick.h里面已经包含了越狱检测的代码，可以直接使用</p>

<p>复制代码
复制代码</p>

<pre><code>/*方法名:
 *        isJailbroken
*介绍:
*        类方法，判断设备是否越狱，判断方法根据 apt和Cydia.app的path来判断
*参数说明:
*        无
*        
*
*/

#pragma mark utils api
// 类方法，判断当前设备是否已经越狱
+ (BOOL)isJailbroken;
// 类方法，判断你的App是否被破解
+ (BOOL)isPirated;
</code></pre>

<p>apt和Cydia的方式来进行判断的，没看见源码</p>

<p>然后再介绍两种方法来查看是否已经越狱，知其然知其所以然、、、</p>

<h3>apt</h3>

<pre><code>- (BOOL) asAP
{
return [[NSFileManager defaultManager] fileExistsAtPath:@"/private/var/lib/at/"];
4 }`
</code></pre>

<h3>system</h3>

<pre><code>`1 - (BOOL) successCallSystem
2 {
3 return (system("ls") == 0) ? YES : NO;
4 }`
</code></pre>

<h3>示例代码</h3>

<pre><code>static const char* jailbreak_apps[] =

  {
      "/Applications/Cydia.app",
      "/Applications/limera1n.app",
      "/Applications/greenpois0n.app",
      "/Applications/blackra1n.app",
      "/Applications/blacksn0w.app",
      "/Applications/redsn0w.app",
     "/Applications/Absinthe.app",
     NULL,
 };

 - (BOOL) isJailBroken
 {
     // Now check for known jailbreak apps. If we encounter one, the device is jailbroken.
     for (int i = 0; jailbreak_apps[i] != NULL; ++i)
     {
         if ([[NSFileManager defaultManager] fileExistsAtPath:[NSString stringWithUTF8String:jailbreak_apps[i]]])
         {
             //NSLog(@"isjailbroken: %s", jailbreak_apps[i]);
             return YES;
         }
     }

               // TODO: Add more checks? This is an arms-race we're bound to lose.

     return NO;
 }
</code></pre>

<hr />

<pre><code>@interface UIDevice (Helper)  
 - (BOOL)isJailbroken;  
 @end
</code></pre>

<hr />

<pre><code>@implementation UIDevice (Helper)  
- (BOOL)isJailbroken {  
BOOL jailbroken = NO;  
NSString *cydiaPath = @"/Applications/Cydia.app";  
NSString *aptPath = @"/private/var/lib/apt/";  
if ([[NSFileManager defaultManager] fileExistsAtPath:cydiaPath]) {  
 jailbroken = YES;  
}  
if ([[NSFileManager defaultManager] fileExistsAtPath:aptPath]) {  
 jailbroken = YES;  
}  
return jailbroken;  
}  
@end
</code></pre>

<hr />

<p>参考资源链接：</p>

<p><a href="http://since2006.com/blog/240/ios6-mobileinstallationinstall">http://since2006.com/blog/240/ios6-mobileinstallationinstall</a>
<a href="http://blog.sina.com.cn/s/blog_9cd1705d0101l4bo.html">http://blog.sina.com.cn/s/blog_9cd1705d0101l4bo.html</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[带你玩虐Ocotpress＋Github博客]]></title>
    <link href="http://al1020119.github.io/blog/2015/11/27/kuai-icocosdai-ni-kuai-su-jian-ocotpress+githubbo-ke/"/>
    <updated>2015-11-27T13:53:19+08:00</updated>
    <id>http://al1020119.github.io/blog/2015/11/27/kuai-icocosdai-ni-kuai-su-jian-ocotpress+githubbo-ke</id>
    <content type="html"><![CDATA[<h5>简介</h5>

<p>Octopress是利用Jekyll博客引擎开发的一个博客系统，生成的静态页面能够很好的在github page上展现。号称是hacker专属的一个博客系统(A blogging framework for hackers.)</p>

<p>根据大家的反应，本文我就来介绍一下如何在苹果电脑(OS X 10.8.3)利用Octopress搭建一个Github博客。本文需要读者熟悉一些shell命令，并掌握基本的git操作。</p>

<p>目录</p>

<h2>一： 快速搭建</h2>

<ol>
<li>安装Ruby</li>
<li>安装Octopress</li>
<li>配置Octopress</li>
<li>将博客部署到GitHub上</li>
<li>开始写博客</li>
</ol>


<h2>二： 个性化配置（个性化初级篇）</h2>

<ol>
<li>Header（标题栏）</li>
<li>Navigation（导航栏）</li>
<li>footer（尾栏）</li>
<li>添加背景图片</li>
<li>LOGO图片</li>
<li>导航栏倒圆角</li>
<li>滑动返回顶部按钮</li>
<li>二维码展示</li>
</ol>


<h2>三： 个性化配置（个性化中级篇）</h2>

<ol>
<li>提高博客访问速度</li>
<li>设置链接在新窗口打开</li>
<li>首页文章以摘要形式展示</li>
<li>代码着色</li>
<li>修改代码生成css</li>
<li>添加侧边栏文章分类（category）</li>
<li>添加多说评论</li>
<li>自动为图片添加url前缀</li>
<li>添加访客统计</li>
</ol>


<h2>四： 个性化配置（个性化高级篇）</h2>

<ol>
<li>侧边栏</li>
<li>最新文章</li>
<li>GitHub Repos</li>
<li>微博秀</li>
<li>豆瓣展示</li>
<li>访客地图</li>
<li>酷站博客</li>
<li>最热文章</li>
<li>3D标签云与标签列表</li>
<li>相关文章功能</li>
<li>社会化评论与分享</li>
<li>为博文添加原文链接及声明</li>
<li>公益404</li>
</ol>


<h2>五： 其他</h2>

<ol>
<li>mackdown语法<br></li>
</ol>


<hr />

<h1>一： 快速搭建</h1>

<h3>安装Ruby</h3>

<p>Octopress需要Ruby环境，RVM(Ruby Version Manager)负责安装和管理Ruby的环境。所以我们先在终端输入如下命令，来安装RVM：</p>

<pre><code>curl -L https://get.rvm.io | bash -s stable --ruby  
</code></pre>

<p>接着是安装Ruby 1.9.3，在终端依次运行如下命令：</p>

<pre><code>rvm install 1.9.3  
rvm use 1.9.3  
rvm rubygems latest  
</code></pre>

<p>完成上面的操作之后，运行ruby &ndash;version应该可以看到ruby 1.9.3环境已经安装好了。
参考：Installing Ruby With RVM</p>

<h3>安装Octopress</h3>

<p>在安装Octopress之前，请确保你的电脑上已经安装有git了，在终端输入git &ndash;version，应该可以看到电脑中的git版本(我电脑上输出:git version 1.7.12.4 (Apple Git-37))，如果没有显示相关内容，请先安装git。
git安装之后，利用git命令将octopress从github上clone到本机，如下命令：</p>

<pre><code>git clone git://github.com/imathis/octopress.git octopress  
cd octopress    # If you use RVM, You'll be asked if you trust  the .rvmrc file (say yes).  
ruby --version  # Should report Ruby 1.9.3  
</code></pre>

<p>接着安装相关依赖项：</p>

<pre><code>gem install bundler  
rbenv rehash    # If you use rbenv, rehash to be able to run the    bundle command  
bundle install  
</code></pre>

<p>最后安装默认的Octopress 主题。</p>

<pre><code>rake install  
</code></pre>

<h3>配置Octopress</h3>

<p>Octopress的作者已经尽量让配置简化了。大多数情况下只需要配置_config.yml和Rakefile文件即可。其中Rakefile是跟博客部署相关，一般情况下并不需要修改这个文件，除非使用了rsync。</p>

<p>config.yml是博客重要的一个配置文件，在config.yml文件中有三大配置项：Main Configs、Jekyll &amp; Plugins和3rd Party Settings。</p>

<p>一般，该文件中其中url是必须要填写的，这里的url是在github上创建的一个仓库地址，具体请看第四步中创建的地址。另外再修改一下title、subtitle和author，根据需求，在开启一些第三方组件服务。</p>

<p>关于_config.yml文件中的更多内容，请看这里的内容：Configuring Octopress</p>

<p>建议：最好把里面的twitter相关的信息全部删掉，否则由于GFW的原因，将会造成页面load很慢。同理，修改定制文件/source/_includes/custom/head.html 把google的自定义字体去掉。from唐巧的博文中—配置。</p>

<h3>将博客部署到GitHub上</h3>

<p>Github的Page service可以免费托管博客，并且还可以自定义域名。
首先需要在GitHub上创建一个仓库，并将仓库名称按照这样的方式进行命名：username.github.com或organization.github.com。等后面配置完毕之后，我们就可以在浏览器中使用页面地址</p>

<pre><code>http://username.github.com
</code></pre>

<p>来访问我们的博客。一般来说，我们希望在将博客的源码放到source分支下，并把生成的内容提交到master分支。</p>

<p>创建好仓库之后，我们需要利用octopress的一个配置rake任务来自动配置上面创建的仓库：可以让我们方便的部署GitHub page。在终端输入如下命令：
C代码  收藏代码</p>

<pre><code>$ rake setup_github_pages  
</code></pre>

<p>上面的命令会做一些事情(详细介绍看下面给出的参考链接)。其中最主要的就是创建一个_deploy目录，目录用来存放部署到master分支的内容。期间会要求你输入仓库的url，根据提示，进行输入即可。</p>

<p>完成上面的命令之后，我们就可以生成博客并真正的部署到仓库中了。执行如下命令：</p>

<pre><code>rake generate  
rake deploy  
</code></pre>

<p>上面的命令首先生成博客文件，并将生成的博客文件拷贝到_deploy/目录下，然后将这些内容添加到git中，并commit和push到仓库的master分支。</p>

<p>现在可以访问</p>

<pre><code>http://username.github.com
</code></pre>

<p>注意：有时候可能会有延时，要等几分钟才能打开。
至此，我们的博客已经完成基本的部署，不过博客的source需要单独提交，执行如下命令就可以将source提交到仓库的source分支下。</p>

<pre><code>$ git add .  
$ git commit -m 'Initial source commit'  
$ git push origin source  
</code></pre>

<p>如果在部署到仓库之前，需要先预览一下博客，可以在终端输入rake preview命令，然后就能在浏览器中进行本地预览访问了：</p>

<pre><code>http://127.0.0.1:4000/
</code></pre>

<p>或</p>

<pre><code>http://localhost:4000/
</code></pre>

<p>效果跟仓库中的一样。</p>

<h3>开始写博客</h3>

<p>Octopress为我们提供了一些task来创建博文和页面。博文必须存储在source/_posts目录下，并且需要按照Jekyll的命名规范对文章进行命名：YYYY-MM-DD-post-title.markdown。文章的名字会被当做url的一部分，而其中的日期用于对博文的区分和排序。</p>

<p>通过Octopress提供的task可以正确的按照命名规范创建一个博文，并且在博文中会附带常用的一些yaml元数据。只需要在终端输入如下命令：</p>

<pre><code>rake new_post["title"]  
</code></pre>

<p>其中title为博文的文件名，创建出来的文件默认是markdown格式。上面的命令会创建出这样一个文件：source/_posts/2013-08-03-title.markdown。打开这个文件，可以看到里面有如下一些内容了(告诉Jekyll博客引擎如何处理博文和页面)：</p>

<pre><code>layout: post  
title: "title"  
date: 2013-08-03 16:36  
comments: true  
categories:   
</code></pre>

<p>接着我们就可以在这个文件中写我们的博文啦。完成之后，我们可以预览和部署博文。下面是创建并部署博文的一个完整过程：</p>

<pre><code>$ rake new_post["New Post"]  
$ rake generate  
$ git add .  
$ git commit -am "Some comment here."   
$ git push origin source  
$ rake deploy  
</code></pre>

<h6>本节介绍了如何利用Octopress搭建一个Github博客，下面讲介绍桌面去个性化你的博客。</h6>

<hr />

<h1>个性化配置（初级篇）</h1>

<p>这几个部分是经常需要个性化定制的，在 source/<em>includes 中存在其对应的HTML文件，这是主题默认的文件，更换主题，更新octopress会被覆盖，所以应该编辑 source/</em>includes/custom 下的文件来实现修改。</p>

<h2>Header，Navigation，footer</h2>

<h3>Header（标题栏）</h3>

<p>标题栏显示的内容为 /source/<em>includes/custom/header.html 所实现的，其中title和subtitle在 </em>config.yml 中定义，你可以进行适量的修改：</p>

<pre><code>    &lt;hgroup&gt;
 &lt;h1&gt;&lt;a href="http://al1020119.github.io/"&gt;iOS梦工厂&lt;/a&gt;&lt;/h1&gt;

&lt;h2&gt;不战胜自己，何以改变未来！&lt;/h2&gt;

&lt;/hgroup&gt;
</code></pre>

<h3>Navigation（导航栏）</h3>

<p>可以自行为导航栏添加项目，链接至不同的页面，在 /source/_includes/custom/navigation.html 中编辑即可。</p>

<pre><code>&lt;ul class="main-navigation"&gt;
&lt;li&gt;&lt;a href="http://al1020119.github.io/"&gt;博客主页&lt;/a&gt;&lt;/li&gt;
 &lt;li&gt;&lt;a href="/blog/archives"&gt;文章列表&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://al1020119.github.io/category-cloud"&gt;分类云&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://al1020119.github.io/about"&gt;关于&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</code></pre>

<p>当想添加一些页面，如“关于”页面，可以试验 rake new_page[&lsquo;name&rsquo;] 命令来创建，如 rake new_page[&lsquo;about&rsquo;] 后，会建立 source/about/index.html 文件，在此文件编辑，添加自己想要展示的内容，然后再 navigation.html 里添加正确的路径即可，如</p>

<pre><code>&lt;li&gt;&lt;a href="http://al1020119.github.io/about"&gt;关于&lt;/a&gt;&lt;/li&gt; 
</code></pre>

<h3>footer（尾栏）</h3>

<p>在 source/_includes/custom/footer.html 中编辑尾栏：</p>

<pre><code>&lt;p&gt;
    Copyright © 2015 - iCocos -
&lt;span class="credit"&gt;
      Powered by
      &lt;a href="http://octopress.org"&gt;Octopress&lt;/a&gt;
&lt;/span&gt;
&lt;/p&gt;
</code></pre>

<p>默认显示 Copyright@2013 - author - Powered by Octopress ，你可以添加自己想显示在尾栏的东西，第三方统计流量统计工具也可以添加到这，如CNZZ、Google analytics和百度统计等，使用这些工具可以更详细的分析网站流量，改善引流措施，完善网站，具体添加方法见统计工具与SEO。</p>

<h3>添加背景图片</h3>

<p>在 sass/custom/_styles.scss 中添加：</p>

<pre><code>html {
    background: #555555 url("/images/bg3.jpg");
    //background: #555555;
}

body &gt; div {
    background-image: none;
    //background: #F5F5D5
} //侧边栏

body &gt; div &gt; div { //文章内容
    background-image: none;
    //background: #F5F5D5; 
    //background: url("/images/bg.jpg");
}
</code></pre>

<p>将背景图片放入 source/images/ 中，修改上述代码中的路径指向想要的图片，即可 更改博客、侧边栏或文章的背景图片。博客使用背景图片后，与Header区不太和谐， 所以我在 /sass/base/_theme.scss 中将 header-bg 设置成透明色了。</p>

<h3>LOGO图片</h3>

<p>我所说的logo图片有两种，一个是打开一个网页时，标签栏上显示的小图片。还有一个是标题栏主标题旁的图片。</p>

<p>首先针对于第一种可以选择你喜欢的图片（大小适中），替换 source 目录下的 favicon.png 即可。</p>

<p>或者将logo图片放入 source/images 中，然后修改 source/_includes/head.html ，找到 favicon.png ，修改其路径指向你的图片即可。</p>

<p>对于主标题旁的图片需要在 sass/custom/_styles.scss 中填入如下语句：</p>

<pre><code>//Blog logo pic
@media only screen and (min-width: 550px) {

    body &gt; header h1{
            background: url("/images/logo1.png") no-repeat 0 1px;
            padding-left: 65px;
    }

    body &gt; header h2 { padding-left: 65px; }
}
</code></pre>

<p>根据自己情况进行修改即可。</p>

<h3>导航栏倒圆角</h3>

<p>我设置的header区背景色透明，所以导航栏的直角有些尖锐，在 sass/custom/_styles.scss 中添加如下语句，将其修改为圆角：</p>

<pre><code>//倒圆角
@media only screen and (min-width: 1040px) {
    body &gt; nav {
            @include border-top-radius(.4em);
    }

    body &gt; footer {
            @include border-bottom-radius(.4em);
    }
}
</code></pre>

<h3>滑动返回顶部按钮</h3>

<p>当文章较长，通常希望有一个返回顶部的按钮，如下方法实现了在页面右下方添加一个返回顶部的图片按钮，点击后可以滑动的返回顶部。</p>

<p>首先创建 source/javascripts/top.js ，实现滑动返回顶部效果，添加如下代码：</p>

<pre><code>function goTop(acceleration, time)
{
    acceleration = acceleration || 0.1;
    time = time || 16;

    var x1 = 0;
    var y1 = 0;
    var x2 = 0;
    var y2 = 0;
    var x3 = 0;
    var y3 = 0;

    if (document.documentElement)
    {
            x1 = document.documentElement.scrollLeft || 0;
            y1 = document.documentElement.scrollTop || 0;
    }
    if (document.body)
    {
            x2 = document.body.scrollLeft || 0;
            y2 = document.body.scrollTop || 0;
    }
    var x3 = window.scrollX || 0;
    var y3 = window.scrollY || 0;

    var x = Math.max(x1, Math.max(x2, x3));
    var y = Math.max(y1, Math.max(y2, y3));

    var speed = 1 + acceleration;
    window.scrollTo(Math.floor(x / speed), Math.floor(y / speed));

    if(x &gt; 0 || y &gt; 0)
    {
            var invokeFunction = "goTop(" + acceleration + ", " + time + ")";
            window.setTimeout(invokeFunction, time);
    }
}
</code></pre>

<p>然后创建 source/_includes/custom/totop.html ，设置返回顶部按钮样式和位置，代码如下：</p>

<pre><code>&lt;!--返回顶部开始--&gt;
&lt;div id="full" style="width:0px; height:0px; position:fixed; right:180px; bottom:150px; z-index:100; text-align:center; background-color:transparent; cursor:pointer;"&gt;
    &lt;a href="#" onclick="goTop();return false;"&gt;&lt;img src="http://al1020119.github.io/images/top.png" border=0 alt="返回顶部"&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;script src="http://al1020119.github.io/javascripts/top.js" type="text/javascript"&gt;&lt;/script&gt;
&lt;!--返回顶部结束--&gt;
</code></pre>

<p>最后，还需要将返回顶部的图片放入 source/images ，命名为 top.png （或修改totop.html中图片的路径）。</p>

<h3>二维码展示</h3>

<p>在关于页面或边栏可以展示你的个人博客的二维码，方便移动终端扫描访问你的博客，插件主页 点击这里 。</p>

<p>在侧边栏显示，则将 qrcode.html 放入 source/<em>includes/custom/asides/ 中，在 </em>config.yml 中 default_asides 添加 custom/asides/qrcode.html 即可显示。</p>

<p>或者将 qrcode.html 代码添加到你想展示的页面的HTML文件中亦可。</p>

<hr />

<h1>个性化配置（中级篇）</h1>

<h3>提高博客访问速度</h3>

<p>因为“墙”的关系，所以Octopress建立以后会发现访问速度奇慢无比，竟然超过了40s。</p>

<p>仔细分析后我们发现其中都是一些被墙的请求报了404Error，所以导致访问博客巨慢无比，下面我们就一次阉割掉这些被墙的请求。T_T</p>

<h4>替换Google JS公共库</h4>

<p>Octopress默认使用的是Google的JS公共库地址，加载的过程无比的缓慢。因此我们要把它改为 百度的JS公共库 ，需要把 /source/_includes/head.html 文件中的Google公共库地址改为：</p>

<script src="//libs.baidu.com/jquery/1.7.2/jquery.min.js"></script>


<h4>去掉Twitter</h4>

<p>从上图可以看出加载失败的还有twitter，这个也得给去掉。</p>

<p>把在根目录下的 _config.yml 文件中Twitter内容给注释掉。</p>

<pre><code># Twitter
#twitter_user:
#twitter_tweet_button: true
</code></pre>

<p>把 \source_includes\after_footer.html 文件中的twitter内容给注释掉：</p>

<pre><code>include twitter_sharing.html
</code></pre>

<h4>删除Google font</h4>

<p>把在 \source_includes\custom\head.html 中的Google font样式给删除：</p>

<pre><code>&lt;link href="//fonts.googleapis.com/css?family=PT+Serif:regular,italic,bold,bolditalic" rel="stylesheet" type="text/css"&gt;
&lt;link href="//fonts.googleapis.com/css?family=PT+Sans:regular,italic,bold,bolditalic" rel="stylesheet" type="text/css"&gt;
</code></pre>

<h3>设置链接在新窗口打开</h3>

<p>在博文中，如果点击链接直接在本窗口打开了，那么用户体验就不是很好。而markdown的标准语法是不支持链接在新窗口打开的，虽然可以通过在markdown中直接写html标签来解决这个问题，但是这与markdown的简洁书写特性不符。但是我们可以通过设置Octopress来达到这种效果，即在 \source_includes\custom\head.html 文件中添加如下一段代码：</p>

<pre><code>&lt;script&gt;
function addBlankTargetForLinks () {
$('a[href^="http"]').each(function(){
  $(this).attr('target', '_blank');
});
}
$(document).bind('DOMNodeInserted', function(event) {
addBlankTargetForLinks();
});
&lt;/script&gt;
</code></pre>

<h3>首页文章以摘要形式展示</h3>

<p>2.在文章对应的markdown文件中，在需要显示在首页的文字后面添加 <!--more--> ，执行rake generate后在首页上会看到只显示&lt;!—more—>前面的文字，文字后面会显示 Read on 链接，点击后进入文字的详细页面;</p>

<p>1.如果想将Read on修改为中文，可以修改_config.yml文件</p>

<pre><code>excerpt_link: "Read on →"  #  "Continue reading" link text at the     bottom of excerpted articles
excerpt_link: "阅读全文→"  # "Continue reading" link text at the  bottom of excerpted articles
</code></pre>

<h3>代码着色</h3>

<p>Octopress使用的是Pygments来进行代码着色的，使用方式也比较简单如下所示：</p>

<figure class='code'><figcaption><span>xxx.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">//java code</span>
</span></code></pre></td></tr></table></div></figure>


<p>Pygments支持的语言列表</p>

<h3>修改代码生成css</h3>

<p>当然你也可以修改Pygments生成的代码css样式。</p>

<p>Pygments默认提供了很多css样式，你可以在python shell中用下面命令列出当前pygments所支持的样式：</p>

<pre><code>&gt;&gt;&gt; from pygments.styles import STYLE_MAP
&gt;&gt;&gt; STYLE_MAP.keys()
['manni', 'igor', 'xcode', 'vim', 'autumn', 'vs', 'rrt', 'native', 'perldoc', 'borland', 'tango', 'emacs', 'friendly', 'monokai', 'paraiso-dark', 'colorful', 'murphy', 'bw', 'pastie', 'paraiso-light', 'trac', 'default', 'fruity']
&gt;&gt;&gt;
</code></pre>

<p>通过-S来选择，需要生成default的样式：</p>

<pre><code>pygmentize -S default -f html &gt; your/path/pygments.css
</code></pre>

<p>有时候Octopress会把我们想要展示的Ruby代码解析成HTML，如果只是想展示代码，而不让Octopress来解析，那么可以在代码前后加入和代码。</p>

<h3>添加侧边栏文章分类（category）</h3>

<p>1.在 plugins 目录下创建 category_list_tag.rb 文件，内容如下：</p>

<pre><code>module Jekyll 
class CategoryListTag &lt; Liquid::Tag 
def render(context) 
  html = "" 
  categories = context.registers[:site].categories.keys 
  categories.sort.each do |category| 
    posts_in_category = context.registers[:site].categories[category].size 
    category_dir = context.registers[:site].config['category_dir'] 
    category_url = File.join(category_dir, category.gsub(/_|\P{Word}/, '-').gsub(/-{2,}/, '-').downcase) 
    html &lt;&lt; "&lt;li class='category'&gt;&lt;a href='http://al1020119.github.io/#{category_url}/'&gt;#{category} (#{posts_in_category})&lt;/a&gt;&lt;/li&gt;\n" 
  end 
  html 
end 
end 
end

Liquid::Template.register_tag('category_list', Jekyll::CategoryListTag)
</code></pre>

<p>2.添加 source/_includes/asides/category_list.html 文件，内容如下：</p>

<pre><code>&lt;section&gt;
&lt;h1&gt;文章分类&lt;/h1&gt;
&lt;ul id="categories"&gt;
&lt;li class='category'&gt;&lt;a href='http://al1020119.github.io/blog/categories/欢迎来到ios梦工厂/'&gt;欢迎来到ios梦工厂 (1)&lt;/a&gt;&lt;/li&gt;
</code></pre>

<p><li class='category'><a href='http://al1020119.github.io/blog/categories/程序员必备/'>程序员必备 (1)</a></li></p>

<pre><code>&lt;/ul&gt;
&lt;/section&gt;
</code></pre>

<p>3.修改 _config.yml 文件，在 default_asides 项中添加 asides/category_list.html ，值之间以逗号隔开，值的先后顺序代表了侧边栏展现的先后顺序。</p>

<pre><code>default_asides: [asides/category_list.html, asides/recent_posts.html, asides/github.html, asides/delicious.html, asides/pinboard.html, asides/googleplus.html]
</code></pre>

<p>在侧边栏还可以添加其他组件，如微博、标签云等，添加方式和上面类似。</p>

<h3>添加多说评论</h3>

<p>Octopress默认自带了DISQUS，但是对于国内不是很好用。所以在经过考虑之后选择了国内比较流行的多说评论系统。 首先要去 多说网站注册 ，获取站点的 short_name 。</p>

<p>在 _config.yml 中添加</p>

<pre><code># duoshuo comments
duoshuo_comments: true
duoshuo_short_name: yourname 
</code></pre>

<p>在 ./source/_layouts/post.html 中的 disqus 代码</p>

<p>下方添加多说评论模块：</p>

<p>如果你希望一些单独的页面下方也放置评论功能，那么在 ./source/<em>layouts/page.html 中也做如上修改。 然后创建一个 ./source/</em>includes/post/duoshuo.html 文件，内容如下：</p>

<blockquote></blockquote>

<pre><code>&lt;div class="ds-thread" data-title="Octopress博客的个性化配置"&gt;&lt;/div&gt;
&lt;script type="text/javascript"&gt;
var duoshuoQuery = {short_name:"tianweili"};
(function() {
    var ds = document.createElement('script');
    ds.type = 'text/javascript';ds.async = true;
    ds.src = 'http://static.duoshuo.com/embed.js';
    ds.charset = 'UTF-8';
    (document.getElementsByTagName('head')[0] 
    || document.getElementsByTagName('body')[0]).appendChild(ds);
})();
&lt;/script&gt;
</code></pre>

<p>最后再修改 _includes/article.html 文件，在</p>

<p>下方添加下面代码：</p>

<blockquote><p>注意：
以上所有F代表false，T代表true，更改对应的就可以
（不要问为撒）</p></blockquote>

<h3>自动为图片添加url前缀</h3>

<p>我把图片资源都 放在了七牛云存储 上，写博客时候就是用七牛的外链。但是这样有几个问题：</p>

<p>每次写博客插入图片外链地址时候都很麻烦，需要给每张图片都添加七牛外链地址url前缀；
如果以后更换了存储，那就麻烦了，需要依次编辑替换每个图片的url前缀
现在我们就使用一种灵活的方式来配置并自动生成图片的URL前缀：</p>

<p>首先修改 /plugins/image_tag.rb 文件，在 @img[&lsquo;class&rsquo;].gsub!(/&ldquo;/, &lsquo;&rsquo;) if @img[&lsquo;class&rsquo;] 后添加下面一行代码：</p>

<pre><code>./plugins/image_tag.rb
@img['src'] = Jekyll.configuration({})['static_file_prefix'] + @img['src'] if @img['src'][0] == '/'
</code></pre>

<p>然后再修改根目录下的 _config.yml 文件，添加如下配置：</p>

<pre><code># Add url prefix for image automatically
static_file_prefix: http://7u2i08.com1.z0.glb.clouddn.com
</code></pre>

<p>最后我们在插入图片的时候要记住不能再使用Markdown语法来写了，要 使用Ocotpress自定义的IMG标签来插入图片 。</p>

<p>本地预览先generate后preview，这样一来插入图片就灵活方便多了。</p>

<h3>添加访客统计</h3>

<p>本博客的访客统计系统使用的是Flag Counter，所以要 先去Flag Counter获取代码 。</p>

<p>拿到代码后添加 .\source_includes\custom\asides\flag_counter.html 文件：</p>

<pre><code>flag_counter.html
&lt;section&gt;
&lt;h1&gt;访客统计&lt;/h1&gt;
&lt;br/&gt;
&lt;a href="http://s07.flagcounter.com/more/2SH"&gt;&lt;img src="http://s07.flagcounter.com/count/2SH/bg_FFFFFF/txt_000000/border_CCCCCC/columns_2/maxflags_12/viewers_0/labels_0/pageviews_1/flags_0/" alt="Flag Counter" border="0"&gt;&lt;/a&gt;
&lt;/section&gt;
</code></pre>

<p>将页面添加到侧边栏，在 ./_config.yml 配置文件中添加下面一行配置：</p>

<pre><code>default_asides: [……, custom/asides/flag_counter.html]
</code></pre>

<p>最后添加控制开关，在 ./_config.yml 配置文件中添加下面一行配置：</p>

<pre><code># Flag Counter
flag_counter: true
</code></pre>

<hr />

<h1>个性化配置（高级篇）</h1>

<p>在节章 中，已经搭建起了octopress博客。使用的是默认的主题，样式千篇一律，而且自带的一些功能和侧边栏并不适合国内的国情，得不到网络的支持，如facebook、twitter、google plus和disqus等。所以还是有必要进行一下改造，打造中国特色octopress博客的。</p>

<h3>第三方主题</h3>

<p>首先，你先要选定的是博客使用的第三方主题，因为如果你已经进行了很多的网页设置，添加了很多的插件，再来改主题，你就要面临悲剧了，你会发现你已经配置好的东西被替换掉了，这无疑会对你的热情带来打击。所以我们先来看看第三方主题。</p>

<p>你需要先找到自己喜欢的主题，之后可以在此主题上进行修改。 点击这里 是一个主题网站，给出了不同主题的预览图，使用该主题的博客和该主题的GitHub链接。选中你想要的，获得GitHub仓库地址，如下安装</p>

<pre><code>$ cd blog
$ git clone https://github.com/shashankmehta/greyshade.git ./themes/    greyshade
$ rake install['greyshade']
$ rake generate
</code></pre>

<p>这里我的博客在blog文件夹中，以安装greyshade主题为例。你按照自己的情况进行更改。 rake generate 后可以通过 rake preview 访问 <a href="http://localhost:4000">http://localhost:4000</a> 预览新的主题样式，不满意可以更换其他主题。</p>

<h3>侧边栏</h3>

<p>侧边栏可以添加的插件很多，新浪微博、豆瓣等很多网站都有相应的插件，也可以到 octopress的wiki页面 寻找。</p>

<p>侧边栏在 <em>config.yml 中设置，添加进 default_asides 中，先后顺序代表显示的先后顺序，各个侧边栏插件代码放入相应的位置即可，自己添加的一般放入 source/</em>includes/custom/asides ， default_asides 中默认从 _includes 之后路径开始写。</p>

<h3>最新文章</h3>

<p>首先说一下主题中可用的插件。</p>

<p>asides/recent_posts.html 是最近写的文章的一个展示，添加到 default_asides 中即可显示，在 _config.yml 中可以设置显示最近多少篇文章， recent_posts: 5 ，注意冒号后有空格。</p>

<h3>GitHub Repos</h3>

<p>asides/github.html 则是GitHub repos的一个展示，可以直接到达你的GitHub页面，在 _config.yml 中设置你的Github账号，并设置为 true 即可，如下：</p>

<pre><code>Github repositories
github_user: 812lcl   #我的github
github_repo_count: 0
github_show_profile_link: true
github_skip_forks: true
</code></pre>

<h3>微博秀</h3>

<p>新浪微博是一个信息传播非常迅速的媒介，如果你热衷于微博，可以在侧边栏添加自己的微博秀。首先需要获得自己的微博秀代码，链接为 <a href="http://app.weibo.com/tool/weiboshow">http://app.weibo.com/tool/weiboshow</a> ，进行相应的设置即可获得微博秀代码。</p>

<p>然后在 source/_includes/custom/asides 创建weibo.html，添加如下代码，刚刚获得的微博秀代码也要添加到相应位置：</p>

<pre><code>&lt;section&gt;
&lt;h1&gt;新浪微博&lt;/h1&gt;
&lt;ul id="weibo"&gt;
&lt;li&gt;

&lt;!-- 在此插入获得的微博秀代码 --&gt;

  &lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
</code></pre>

<p>最后在 default_asides 中加入 custom/asides/weibo.html 即可显示你的微博秀了。</p>

<h3>豆瓣展示</h3>

<p>你可以通过豆瓣读书、豆瓣电影、豆瓣音乐等多方面展示你自己，豆瓣也提供了类似微博秀的展示方式，添加方法也类似。获得豆瓣收藏秀的链接 <a href="http://www.douban.com/service/badgemakerjs">http://www.douban.com/service/badgemakerjs</a> ，根据自己的喜欢进行设置</p>

<p>然后在 source/_includes/custom/asides 创建douban.html，添加如下代码，刚刚获得的代码添加到 <div> 之间：</p>

<pre><code>&lt;section&gt;
&lt;h1&gt;My Douban&lt;/h1&gt;
&lt;div&gt;
&lt;!--添加到这--&gt;
&lt;/div&gt;
&lt;/section&gt;
</code></pre>

<p>最后在 default_asides 中加入 custom/asides/douban.html 显示你的豆瓣展示。</p>

<h3>访客地图</h3>

<p>效果如我的博客右侧那个精美的3D旋转地球所示，它可以显示访客数量，访客来自的地域，既有装饰作用，又有统计作用。它也有2D效果版，可以根据自己喜欢进行设置，地址在 这里 ，然后获得代码。</p>

<p>依然在 source/_includes/custom/asides 创建earth.html，代码如下：</p>

<pre><code>&lt;section&gt;
&lt;h1&gt;访客地图&lt;/h1&gt;
&lt;!--获得代码添加到这--&gt;
&lt;/section&gt;
</code></pre>

<p>在 default_asides 中加入 custom/asides/earth.html 显示你定制的访客地图。</p>

<h3>酷站博客</h3>

<p>你有一些经常去的网站、博客，想推荐给大家，则可以在侧边栏加上一个“酷站博客”，当然名字你自己取即可。</p>

<p>在 source/_includes/custom/asides 创建blog_link.html，代码如下：</p>

<pre><code>&lt;section&gt;
&lt;h1&gt;酷站博客&lt;/h1&gt;
&lt;ul&gt;
    &lt;li&gt;
    &lt;a href="http://blog.jobbole.com/"&gt;伯乐在线&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
    &lt;a href="http://www.csdn.net/"&gt;CSDN&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
    &lt;a href="http://www.cnblogs.com/"&gt;博客园&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
    &lt;a href="http://coolshell.cn/"&gt;酷壳CoolShell&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
    &lt;a href="http://www.cnblogs.com/Solstice/"&gt;陈硕&lt;/a&gt;
    &lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
</code></pre>

<p>可以自行添加喜爱网站，然后在 default_asides 中加入 custom/asides/blog_link.html 。</p>

<p>看到这，你应该很熟悉添加侧边栏的流程了吧。</p>

<h3>最热文章</h3>

<p>Octopress Popular Posts Plugin是根据Google page rank计算，展示出权值最高的文章，插件的项目主页为 点击这里 。</p>

<p>这个插件的安装与之前的方法不同，首先在 Gemfile 中添加</p>

<pre><code>gem 'octopress-popular-posts'
</code></pre>

<p>Gemfile 中的是bundle安装时安装的所有依赖的软件，然后用bundle安装</p>

<pre><code>bundle install
</code></pre>

<p>执行命令，将插件拷贝到你的source目录，如下：</p>

<pre><code>bundle exec octopress-popular-posts install
</code></pre>

<p>到这就安装完了，可以设置显示了，在 _config.yml 中设置，增加下面一行：</p>

<pre><code>popular_posts_count: 5      # Posts in the sidebar Popular Posts section
</code></pre>

<p>设置边栏显示文章数，最后在 default_asides 中添加 custom/asides/popular_posts.html ，即可显示出来。</p>

<p>这样就设置好了，同时建议将缓存的page rank文件添加进你的 .gitignore 中</p>

<pre><code>.page_rank
</code></pre>

<h3>3D标签云与标签列表</h3>

<p>octopress默认的只支持category的分类，而并没有tag。category和tag分别代表有序/无序的知识点归纳。一篇文章只能属于一个category，但可以有多个tag。原来的plugin下只有category_generator.rb插件，实现category功能，在github上有两个插件帮助实现了tag生成和tag cloud功能 插件1 ， 插件2 。但似乎并不支持中文，而category_generator.rb是支持中文的，所以我有样学样，改成了支持中文的，并且实现了3D标签云的，插件已经上传到 github 。clone到你博客的目录即可。</p>

<p>包含文件如下：</p>

<pre><code> ├─ plugins/
│  ├─ category_generator.rb
│  ├─ category_list.rb
│  ├─ category_tag_cloud.rb
│  ├─ tag_generator.rb
│  └─ tag_list.rb
└─ source/
   └─ _includes/
      └─ custom/
         └─ asides/
            ├─ category_cloud.html
            ├─ category_list.html
            ├─ tag_cloud.html
            └─ tag_list.html
</code></pre>

<p>其中 category_generator.rb 和 tag_generator.rb 定义了根据文章的category和tag标签分类存储文章的方法， category_tag_cloud.rb 则可以定义了根据category或tag生成3D标签云的方法。 category_list.rb 和 tag_list.rb 实现了将所有文章的category和tag列出来的方法，其中category可以显示文章个数，tag根据此标签文章多少，大小随着改变。</p>

<p>四个HTML文件则是category和tag的列表和3D标签云的侧边栏实现。需要哪个，在 default_asides 中添加即可。</p>

<p>还有一点需要注意，在_config.yml中默认设置了category的目录，需自己加入tag目录</p>

<pre><code>category_dir: blog/categories
tag_dir: blog/tags
</code></pre>

<p>这样可以观看效果了，不过3D效果的标签云，对于不支持flash的浏览器无效，如 safari 。</p>

<p>标签功能的实现，我参考了一下几篇文章：</p>

<p><a href="http://codemacro.com/2012/07/18/add-category-list-to-octopress/">为octopress添加分类(category)列表</a></p>

<p><a href="http://blog.log4d.com/2012/05/tag-cloud/">给 Octopress 加上标签功能</a></p>

<h3>相关文章功能</h3>

<p>此功能即根据当前阅读的文章，分析博客中其他与此相近的文章，进行推荐的一个功能，在octopress wiki中推荐的第三方插件中有一个插件实现此功能，项目主页 点击这里 。该插件，利用octopress自带的LSI实现对文章分析分类，然后进行推荐，但当文章较多时分类过慢，它推荐安装GSL来进行分类。我安装过这个功能，但不知道它是根据什么规则分类，而且之后不知道安装了什么，之后每次分类都会出错。你可以自己尝试一下，项目主页都有详细的步骤。</p>

<p>就在我想放弃这个功能的时候，我发现了它―― related_posts-jekyll_plugin 。这个插件很简单，只需下载_plugins/related_posts.rb放在自己的plugins文件夹中，然后在想添加相关文章推荐的地方添加如下语句：</p>

<pre><code>&lt;section&gt;
&lt;h2&gt;相关文章：&lt;/h2&gt;
  &lt;ul class="posts"&gt;

      &lt;li class="related"&gt;
      &lt;a href="http://al1020119.github.io/blog/2015/11/28/tableviewqia-dun-na-du-bu-shi-shi/"&gt;UITableView性能优化与卡顿问题&lt;/a&gt;
      &lt;/li&gt;

      &lt;li class="related"&gt;
      &lt;a href="http://al1020119.github.io/blog/2015/11/27/yue-yu-kai-fa-xiang-jie/"&gt;底层开发之越狱开发&lt;/a&gt;
      &lt;/li&gt;

      &lt;li class="related"&gt;
      &lt;a href="http://al1020119.github.io/blog/2015/11/27/icocosbo-ke-zhong-zheng-di-%5B%3F%5D-tian/"&gt;iCocos博客重整第一天&lt;/a&gt;
      &lt;/li&gt;

&lt;/ul&gt;
&lt;/section&gt;
</code></pre>

<p>我是在source/_layouts/post.html中加入的这些语句，这个html文件是打开博文时的布局，我将相关文章添加在博文的结束处。</p>

<p>这个插件是根据文章的tag进行分类的，根据所有博文与本篇文章共同tag的多少依次排序进行推荐，还是很简单有效的。</p>

<h3>社会化评论与分享</h3>

<h4>友言和加网</h4>

<p>octopress内置了disqus评论系统，不适合我国基本国情，所以需要用一些国内的第三方评论系统，如友言、多说，可以以微博、人人、QQ等账号登陆发表评论，网站通过验证后可以对评论进行分析，管理。</p>

<p>多说评论系统可参见 为 Octopress 添加多说评论系统 ，不多做介绍。</p>

<p>我主要使用的是友言的一套评论系统及插件，分享使用的是加网JiaThis。首先注册 友言 账号，否则无法进行后台管理。注册之后获得代码，添加到 source/_includes/post/share_comment.html 。加网 点击这里 ，定制自己喜欢的样式，获得代码也添加到上述文件中。</p>

<p>share_comment.html文件中代码如下（每个人不同）：</p>

<pre><code>&lt;!-- JiaThis BEGIN --&gt;
&lt;div class="jiathis_style_32x32"&gt;
    &lt;a class="jiathis_button_qzone"&gt;&lt;/a&gt;
    &lt;a class="jiathis_button_tsina"&gt;&lt;/a&gt;
    &lt;a class="jiathis_button_tqq"&gt;&lt;/a&gt;
    &lt;a class="jiathis_button_weixin"&gt;&lt;/a&gt;
    &lt;a class="jiathis_button_renren"&gt;&lt;/a&gt;
    &lt;a href="http://www.jiathis.com/share?uid=*******" class="jiathis jiathis_txt jtico jtico_jiathis" target="_blank"&gt;&lt;/a&gt;
    &lt;a class="jiathis_counter_style"&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;script type="text/javascript" src="http://v3.jiathis.com/code/jia.js?uid=1361705530382241" charset="utf-8"&gt;&lt;/script&gt;
&lt;!-- JiaThis END --&gt;

&lt;!-- Baidu Button BEGIN 
&lt;div id="bdshare" class="bdshare_t bds_tools_32 get-codes-bdshare"&gt;
    &lt;a class="bds_tsina"&gt;&lt;/a&gt;
    &lt;a class="bds_qzone"&gt;&lt;/a&gt;
    &lt;a class="bds_tqq"&gt;&lt;/a&gt;
    &lt;a class="bds_renren"&gt;&lt;/a&gt;
    &lt;a class="bds_t163"&gt;&lt;/a&gt;
    &lt;a class="bds_hi"&gt;&lt;/a&gt;
    &lt;span class="bds_more"&gt;&lt;/span&gt;
    &lt;a class="shareCount"&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;script type="text/javascript" id="bdshare_js" data="type=tools&amp;uid=6839808" &gt;&lt;/script&gt;
&lt;script type="text/javascript" id="bdshell_js"&gt;&lt;/script&gt;
&lt;script type="text/javascript"&gt;
    document.getElementById("bdshell_js").src = "http://bdimg.share.baidu.com/static/js/shell_v2.js?cdnversion=" + Math.ceil(new Date()/3600000)
&lt;/script&gt;
 Baidu Button END --&gt;

&lt;!-- UY BEGIN --&gt;
&lt;div id="uyan_frame"&gt;&lt;/div&gt;
&lt;script type="text/javascript" src="http://v2.uyan.cc/code/uyan.js?uid=*******"&gt;&lt;/script&gt;
&lt;!-- UY END --&gt;
</code></pre>

<p>其中有一段代码注释掉了，那是我曾经添加的百度分享的代码，如果使用其他分享或评论，代码也可以添加到这。</p>

<p>现在功能代码在share_comment.html中了，下面需要使其显示到博文的底部。</p>

<p>首先在_config.yml中添加开关：</p>

<pre><code># comment and share
comment_share: true
</code></pre>

<p>然后在 source/_includes/post/sharing.html 中添加如下代码：</p>

<p>最后需要使你的网站通过友言的验证，才可以进行后台管理，后台可以进行评论管理、社交影响力分析、和评论栏的风格功能设置。</p>

<h4>评论热榜和最新评论侧边栏</h4>

<p>友言提供了多个嵌入式组件，如评论热榜、最新评论、评论计数等。我们可以将他们做成侧边栏进行展示，或在首页文章列表中，显示每篇文章的评论数目。</p>

<p>首先在你的友言后台管理中找到 安装设置->嵌入式组件 获得评论热榜和最新评论的代码，分别创建 source/<em>includes/custom/asides/uyan_hotcmt.html 和 source/</em>includes/custom/asides/uyan_newcmt.html ，代码如下：</p>

<pre><code>&lt;section&gt;
&lt;h1&gt;评论热榜&lt;/h1&gt;
&lt;div id="uyan_hotcmt_unit"&gt;&lt;/div&gt;
    &lt;script type="text/javascript" src="http://v2.uyan.cc/code/uyan.js?uid=*******"&gt;&lt;/script&gt;
&lt;/section&gt;
&lt;section&gt;
&lt;h1&gt;最新评论&lt;/h1&gt;
&lt;div id="uyan_newcmt_unit"&gt;&lt;/div&gt;
    &lt;script type="text/javascript" src="http://v2.uyan.cc/code/uyan.js?uid=*******"&gt;&lt;/script&gt;
&lt;/section&gt;
</code></pre>

<p>然后再 _config.yml 的 default_asides 中添加其路径即可显示在侧边栏中。</p>

<p>友言评论框、评论热榜、最新评论可以在后台进行设置，改变设置并不需要更改代码。</p>

<h4>评论计数显示</h4>

<p>友言提供评论计数功能，可以将每篇文章的评论数显示在博客首页相应文章题目旁。实现方法为：在 source/_includes/article.html 中</p>

<p>`</p>

<p> <time if="if" updated="updated" data-updated="true" endif="endif" itemprop="datePublished dateCreated"> ordinal </time> `</p>

<p>的后边填入嵌入组件中获得的评论计数的代码，需要修改其中一些内容</p>

<pre><code>| &lt;a href="#comments" id="uyan_count_unit" du="" su=""&gt;0条评论&lt;/a&gt;
 &lt;script type="text/javascript" src="http://v2.uyan.cc/code/uyan.js?uid=*******"&gt;&lt;/script&gt;
</code></pre>

<h3>为博文添加原文链接及声明</h3>

<p>可以为你的每篇博文末尾加上原文链接，方法很简单，只需创建 plugins/post_footer_filter.rb ，代码如下：</p>

<pre><code># post_footer_filter.rb
# Append every post some footer infomation like original url 
# Kevin Lynx
# 7.26.2012
#
require './plugins/post_filters'

module AppendFooterFilter
    def append(post)
            author = post.site.config['author']
            url = post.site.config['url']
            pre = post.site.config['original_url_pre']
            post.content + %Q[&lt;p class='post-footer'&gt;
                    #{pre or "original link:"}&lt;a    href='#{post.full_url}'&gt;#{post.full_url}&lt;/a&gt;&lt;br/&gt; written by &lt;a     href='#{url}'&gt;#{author}&lt;/a&gt; posted at &lt;a href='#{url}'&gt;#{url}&lt;/a&gt;&lt;/p&gt;]
    end
end

module Jekyll
    class AppendFooter &lt; PostFilter
            include AppendFooterFilter
            def pre_render(post)
                    post.content = append(post) if post.is_post?
            end
    end
end

Liquid::Template.register_filter AppendFooterFilter
</code></pre>

<p>并可以针对这一区域的样式进行美化，在 sass/custom/_style.scss 末尾增加下列内容：</p>

<pre><code>.post-footer{margin-top:10px;padding:5px;background:none repeat scroll 0pt 0pt #eee;font-size:90%;color:gray}
</code></pre>

<p>尊重原创，此功能来源 为octopress每篇文章添加一个文章信息 。</p>

<h3>公益404</h3>

<p>在 source 目录下创建404.markdown，添加如下代码，即可实现公益404的功能，当你的网页出错找不到时，可以为公益尽一份力。</p>

<pre><code>layout: page
title: "404 Error"
date: 2013-10-10 19:17
comments: false
sharing: false
footer: false
---
&lt;script type="text/javascript" src="http://www.qq.com/404/  search_children,js" charset="utf-8&gt;&lt;/script&gt;
</code></pre>

<hr />

<h2>mackdown语法简介</h2>

<h3>下面简单介绍一下mackdown常用语法（mackdown语法程序员必备）</h3>

<ol>
<li><p>标题设置（让字体变大，和word的标题意思一样）
在Markdown当中设置标题，有两种方式：
第一种：通过在文字下方添加“=”和“-”，他们分别表示一级标题和二级标题。
第二种：在文字开头加上 “#”，通过“#”数量表示几级标题。（一共只有1~6级标题，1级标题字体最大）</p></li>
<li><p>块注释（blockquote）
通过在文字开头添加“>”表示块注释。（当>和文字之间添加五个blank时，块注释的文字会有变化。）</p></li>
<li><p>斜体
将需要设置为斜体的文字两端使用1个“*”或者“_”夹起来</p></li>
<li><p>粗体
将需要设置为斜体的文字两端使用2个“*”或者“_”夹起来</p></li>
<li><p>无序列表
在文字开头添加(<em>, +, and -)实现无序列表。但是要注意在(</em>, +, and -)和文字之间需要添加空格。（建议：一个文档中只是用一种无序列表的表示方式）</p></li>
<li><p>有序列表
使用数字后面跟上句号。（还要有空格）</p></li>
<li><p>链接（Links）
Markdown中有两种方式，实现链接，分别为内联方式和引用方式。
内联方式：This is an <a href="http://example.com/">example link</a>.
引用方式：
I get 10 times more traffic from <a href="http://google.com/" title="Google">Google</a> than from <a href="http://search.yahoo.com/" title="Yahoo Search">Yahoo</a> or <a href="http://search.msn.com/" title="MSN Search">MSN</a>.</p></li>
<li><p>图片（Images）
图片的处理方式和链接的处理方式，非常的类似。
内联方式：</p>

<p>  <code>![alt text](/path/to/img.jpg "Title")</code></p>

<p>  引用方式：</p>

<p>  <code>![alt text][id]</code></p>

<p>  <code>[id]: /path/to/img.jpg "Title"</code></p></li>
<li><p>代码（HTML中所谓的Code）
实现方式有两种：
第一种：简单文字出现一个代码框。使用<code>&lt;blockquote&gt;</code>。（<code>不是单引号而是左上角的ESC下面~中的</code>）
第二种：大片文字需要实现代码框。使用Tab和四个空格。</p></li>
<li><p>脚注（footnote）
实现方式如下：</p>

<p>  <code>hello[^hello]</code></p>

<p>  <code>[^hello]: hi</code></p></li>
<li><p>下划线
在空白行下方添加三条“-”横线。（前面讲过在文字下方添加“-”，实现的2级标题）</p></li>
</ol>


<p>相关参考</p>

<p><a href="http://www.cnblogs.com/itech/p/3800982.html">mackdoen语法简介</a></p>

<hr />

<p>版权声明：欢迎转载，请贴上源地址</p>

<p> <a href="https://al1020119.github.io">https://al1020119.github.io</a></p>

<p> <a href="http://www.cnblogs.com/iCocos/%EF%BC%88iOS%E6%A2%A6%E5%B7%A5%E5%8E%82%EF%BC%89">http://www.cnblogs.com/iCocos/（iOS梦工厂）</a></p>

<p>更多精彩请关注</p>

<p><a href="github%EF%BC%9Ahttps://github.com/al1020119?tab=repositories">github：https://github.com/al1020119?tab=repositories</a></p>

<!--more-->

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iCocos博客重整第一天]]></title>
    <link href="http://al1020119.github.io/blog/2015/11/27/icocosbo-ke-zhong-zheng-di-%5B%3F%5D-tian/"/>
    <updated>2015-11-27T11:11:30+08:00</updated>
    <id>http://al1020119.github.io/blog/2015/11/27/icocosbo-ke-zhong-zheng-di-[?]-tian</id>
    <content type="html"><![CDATA[<p>由于工作的需要，由于技术的需要，笔者在此重新调整博客，之前在<a href="http://www.cnblogs.com/iCocos/">博客园</a>的所有经典文章将会转移到这里。</p>

<p>后续也会陆续更新个人的技术干货，希望能与同行相互学习与交流相关技术。</p>

<hr />

<p>版权声明：欢迎转载，请贴上源地址</p>

<p> <a href="https://al1020119.github.io">https://al1020119.github.io</a></p>

<p> <a href="http://www.cnblogs.com/iCocos/%EF%BC%88iOS%E6%A2%A6%E5%B7%A5%E5%8E%82%EF%BC%89">http://www.cnblogs.com/iCocos/（iOS梦工厂）</a></p>

<p>更多精彩请关注</p>

<p><a href="github%EF%BC%9Ahttps://github.com/al1020119?tab=repositories">github：https://github.com/al1020119?tab=repositories</a></p>

<!--more-->

]]></content>
  </entry>
  
</feed>
