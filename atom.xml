<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[iOS梦工厂]]></title>
  <link href="http://al1020119.github.io/atom.xml" rel="self"/>
  <link href="http://al1020119.github.io/"/>
  <updated>2016-09-21T19:15:46+08:00</updated>
  <id>http://al1020119.github.io/</id>
  <author>
    <name><![CDATA[iCocos]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[直播-采集篇]]></title>
    <link href="http://al1020119.github.io/blog/2016/09/25/zhi-bo-cai-ji-pian/"/>
    <updated>2016-09-25T16:46:26+08:00</updated>
    <id>http://al1020119.github.io/blog/2016/09/25/zhi-bo-cai-ji-pian</id>
    <content type="html"><![CDATA[<p>前言</p>

<p>在看这篇之前，如果您还不了解直播原理，请查看这篇文章如何快速的开发一个完整的iOS直播app(原理篇)</p>

<p>开发一款直播app，首先需要采集主播的视频和音频，然后传入流媒体服务器，本篇主要讲解如何采集主播的视频和音频，当前可以切换前置后置摄像头和焦点光标,但是美颜功能还没做，可以看见素颜的你，后续还会有直播的其他功能文章陆续发布。</p>

<p>基本知识介绍</p>

<pre><code>AVFoundation: 音视频数据采集需要用AVFoundation框架.

AVCaptureDevice：硬件设备，包括麦克风、摄像头，通过该对象可以设置物理设备的一些属性（例如相机聚焦、白平衡等）
AVCaptureDeviceInput：硬件输入对象，可以根据AVCaptureDevice创建对应的AVCaptureDeviceInput对象，用于管理硬件输入数据。
AVCaptureOutput：硬件输出对象，用于接收各类输出数据，通常使用对应的子类AVCaptureAudioDataOutput（声音数据输出对象）、AVCaptureVideoDataOutput（视频数据输出对象）
AVCaptionConnection:当把一个输入和输出添加到AVCaptureSession之后，AVCaptureSession就会在输入、输出设备之间建立连接,而且通过AVCaptureOutput可以获取这个连接对象。
AVCaptureVideoPreviewLayer:相机拍摄预览图层，能实时查看拍照或视频录制效果，创建该对象需要指定对应的AVCaptureSession对象，因为AVCaptureSession包含视频输入数据，有视频数据才能展示。
AVCaptureSession: 协调输入与输出之间传输数据
    系统作用：可以操作硬件设备
    工作原理：让App与系统之间产生一个捕获会话，相当于App与硬件设备有联系了， 我们只需要把硬件输入对象和输出对象添加到会话中，会话就会自动把硬件输入对象和输出产生连接，这样硬件输入与输出设备就能传输音视频数据。
    现实生活场景：租客（输入钱），中介（会话），房东（输出房），租客和房东都在中介登记，中介就会让租客与房东之间产生联系，以后租客就能直接和房东联系了。
</code></pre>

<p>捕获音视频步骤:官方文档</p>

<pre><code>1.创建AVCaptureSession对象
2.获取AVCaptureDevicel录像设备（摄像头），录音设备（麦克风），注意不具备输入数据功能,只是用来调节硬件设备的配置。
3.根据音频/视频硬件设备(AVCaptureDevice)创建音频/视频硬件输入数据对象(AVCaptureDeviceInput)，专门管理数据输入。
4.创建视频输出数据管理对象（AVCaptureVideoDataOutput），并且设置样品缓存代理(setSampleBufferDelegate)就可以通过它拿到采集到的视频数据
5.创建音频输出数据管理对象（AVCaptureAudioDataOutput），并且设置样品缓存代理(setSampleBufferDelegate)就可以通过它拿到采集到的音频数据
6.将数据输入对象AVCaptureDeviceInput、数据输出对象AVCaptureOutput添加到媒体会话管理对象AVCaptureSession中,就会自动让音频输入与输出和视频输入与输出产生连接.
7.创建视频预览图层AVCaptureVideoPreviewLayer并指定媒体会话，添加图层到显示容器layer中
8.启动AVCaptureSession，只有开启，才会开始输入到输出数据流传输。
</code></pre>

<p>// 捕获音视频</p>

<pre><code>- (void)setupCaputureVideo
{
    // 1.创建捕获会话,必须要强引用，否则会被释放
    AVCaptureSession *captureSession = [[AVCaptureSession alloc] init];
    _captureSession = captureSession;

    // 2.获取摄像头设备，默认是后置摄像头
    AVCaptureDevice *videoDevice = [self getVideoDevice:AVCaptureDevicePositionFront];

    // 3.获取声音设备
    AVCaptureDevice *audioDevice = [AVCaptureDevice defaultDeviceWithMediaType:AVMediaTypeAudio];

    // 4.创建对应视频设备输入对象
    AVCaptureDeviceInput *videoDeviceInput = [AVCaptureDeviceInput deviceInputWithDevice:videoDevice error:nil];
    _currentVideoDeviceInput = videoDeviceInput;

    // 5.创建对应音频设备输入对象
    AVCaptureDeviceInput *audioDeviceInput = [AVCaptureDeviceInput deviceInputWithDevice:audioDevice error:nil];

    // 6.添加到会话中
    // 注意“最好要判断是否能添加输入，会话不能添加空的
    // 6.1 添加视频
    if ([captureSession canAddInput:videoDeviceInput]) {
        [captureSession addInput:videoDeviceInput];
    }
    // 6.2 添加音频
    if ([captureSession canAddInput:audioDeviceInput]) {
        [captureSession addInput:audioDeviceInput];
    }

    // 7.获取视频数据输出设备
    AVCaptureVideoDataOutput *videoOutput = [[AVCaptureVideoDataOutput alloc] init];
    // 7.1 设置代理，捕获视频样品数据
    // 注意：队列必须是串行队列，才能获取到数据，而且不能为空
    dispatch_queue_t videoQueue = dispatch_queue_create("Video Capture Queue", DISPATCH_QUEUE_SERIAL);
    [videoOutput setSampleBufferDelegate:self queue:videoQueue];
    if ([captureSession canAddOutput:videoOutput]) {
        [captureSession addOutput:videoOutput];
    }

    // 8.获取音频数据输出设备
    AVCaptureAudioDataOutput *audioOutput = [[AVCaptureAudioDataOutput alloc] init];
    // 8.2 设置代理，捕获视频样品数据
    // 注意：队列必须是串行队列，才能获取到数据，而且不能为空
    dispatch_queue_t audioQueue = dispatch_queue_create("Audio Capture Queue", DISPATCH_QUEUE_SERIAL);
    [audioOutput setSampleBufferDelegate:self queue:audioQueue];
    if ([captureSession canAddOutput:audioOutput]) {
        [captureSession addOutput:audioOutput];
    }

    // 9.获取视频输入与输出连接，用于分辨音视频数据
    _videoConnection = [videoOutput connectionWithMediaType:AVMediaTypeVideo];

    // 10.添加视频预览图层
    AVCaptureVideoPreviewLayer *previedLayer = [AVCaptureVideoPreviewLayer layerWithSession:captureSession];
    previedLayer.frame = [UIScreen mainScreen].bounds;
    [self.view.layer insertSublayer:previedLayer atIndex:0];
    _previedLayer = previedLayer;

    // 11.启动会话
    [captureSession startRunning];
}
</code></pre>

<p>// 指定摄像头方向获取摄像头</p>

<pre><code>- (AVCaptureDevice *)getVideoDevice:(AVCaptureDevicePosition)position
{
    NSArray *devices = [AVCaptureDevice devicesWithMediaType:AVMediaTypeVideo];
    for (AVCaptureDevice *device in devices) {
        if (device.position == position) {
            return device;
        }
    }
    return nil;
}

#pragma mark - AVCaptureVideoDataOutputSampleBufferDelegate

// 获取输入设备数据，有可能是音频有可能是视频

- (void)captureOutput:(AVCaptureOutput *)captureOutput didOutputSampleBuffer:   (CMSampleBufferRef)sampleBuffer fromConnection:(AVCaptureConnection *)connection
{
    if (_videoConnection == connection) {
        NSLog(@"采集到视频数据");
    } else {
        NSLog(@"采集到音频数据");
    }
}
</code></pre>

<p>视频采集额外功能一（切换摄像头）</p>

<pre><code>切换摄像头步骤
    1.获取当前视频设备输入对象
    2.判断当前视频设备是前置还是后置
    3.确定切换摄像头的方向
    4.根据摄像头方向获取对应的摄像头设备
    5.创建对应的摄像头输入对象
    6.从会话中移除之前的视频输入对象
    7.添加新的视频输入对象到会话中
</code></pre>

<p>// 切换摄像头</p>

<pre><code>- (IBAction)toggleCapture:(id)sender {

    // 获取当前设备方向
    AVCaptureDevicePosition curPosition = _currentVideoDeviceInput.device.position;

    // 获取需要改变的方向
    AVCaptureDevicePosition togglePosition = curPosition == AVCaptureDevicePositionFront?AVCaptureDevicePositionBack:AVCaptureDevicePositionFront;

    // 获取改变的摄像头设备
    AVCaptureDevice *toggleDevice = [self getVideoDevice:togglePosition];

    // 获取改变的摄像头输入设备
    AVCaptureDeviceInput *toggleDeviceInput = [AVCaptureDeviceInput deviceInputWithDevice:toggleDevice error:nil];

    // 移除之前摄像头输入设备
    [_captureSession removeInput:_currentVideoDeviceInput];

    // 添加新的摄像头输入设备
    [_captureSession addInput:toggleDeviceInput];

    // 记录当前摄像头输入设备
    _currentVideoDeviceInput = toggleDeviceInput;

}
</code></pre>

<p>视频采集额外功能二（聚焦光标）</p>

<pre><code>聚焦光标步骤
    1.监听屏幕的点击
    2.获取点击的点位置，转换为摄像头上的点，必须通过视频预览图层（AVCaptureVideoPreviewLayer）转
    3.设置聚焦光标图片的位置，并做动画
    4.设置摄像头设备聚焦模式和曝光模式(注意：这里设置一定要锁定配置lockForConfiguration,否则报错)
</code></pre>

<p>// 点击屏幕，出现聚焦视图</p>

<pre><code>- (void)touchesBegan:(NSSet&lt;UITouch *&gt; *)touches withEvent:(UIEvent *)event
{
   // 获取点击位置
   UITouch *touch = [touches anyObject];
   CGPoint point = [touch locationInView:self.view];

   // 把当前位置转换为摄像头点上的位置
   CGPoint cameraPoint = [_previedLayer captureDevicePointOfInterestForPoint:point];

   // 设置聚焦点光标位置
   [self setFocusCursorWithPoint:point];

   // 设置聚焦
   [self focusWithMode:AVCaptureFocusModeAutoFocus exposureMode:AVCaptureExposureModeAutoExpose atPoint:cameraPoint];
}
</code></pre>

<p>/<em>*
 *  设置聚焦光标位置
 *
 *  @param point 光标位置
 </em>/</p>

<pre><code>-(void)setFocusCursorWithPoint:(CGPoint)point{
    self.focusCursorImageView.center=point;
    self.focusCursorImageView.transform=CGAffineTransformMakeScale(1.5, 1.5);
    self.focusCursorImageView.alpha=1.0;
    [UIView animateWithDuration:1.0 animations:^{
        self.focusCursorImageView.transform=CGAffineTransformIdentity;
    } completion:^(BOOL finished) {
        self.focusCursorImageView.alpha=0;

    }];
}
</code></pre>

<p>/<em>*
 *  设置聚焦
 </em>/</p>

<pre><code>-(void)focusWithMode:(AVCaptureFocusMode)focusMode exposureMode:(AVCaptureExposureMode)exposureMode atPoint:(CGPoint)point{

    AVCaptureDevice *captureDevice = _currentVideoDeviceInput.device;
    // 锁定配置
    [captureDevice lockForConfiguration:nil];

    // 设置聚焦
    if ([captureDevice isFocusModeSupported:AVCaptureFocusModeAutoFocus]) {
        [captureDevice setFocusMode:AVCaptureFocusModeAutoFocus];
    }
    if ([captureDevice isFocusPointOfInterestSupported]) {
        [captureDevice setFocusPointOfInterest:point];
    }

    // 设置曝光
    if ([captureDevice isExposureModeSupported:AVCaptureExposureModeAutoExpose]) {
        [captureDevice setExposureMode:AVCaptureExposureModeAutoExpose];
    }
    if ([captureDevice isExposurePointOfInterestSupported]) {
        [captureDevice setExposurePointOfInterest:point];
    }

    // 解锁配置
    [captureDevice unlockForConfiguration];
}
</code></pre>

<h4>结束语</h4>

<p>后续还会更新更多有关直播的资料，希望做到教会每一个朋友从零开始做一款直播app，并且Demo也会慢慢完善.
Demo点击下载</p>

<pre><code>由于FFMPEG库比较大，大概100M。
本来想自己上传所有代码了，上传了1个小时，还没成功，就放弃了。
提供另外一种方案，需要你们自己导入IJKPlayer库
具体步骤：
下载Demo后，打开YZLiveApp.xcworkspace问题
</code></pre>

<p><img src="http://al1020119.github.io/images/zhibocaiji001.png" title="Caption" ></p>

<p>打开YZLiveApp.xcworkspace问题</p>

<pre><code>pod install就能解决
</code></pre>

<p><img src="http://al1020119.github.io/images/zhibocaiji002.png" title="Caption" ></p>

<pre><code>下载jkplayer库，点击下载
把jkplayer直接拖入到与Classes同一级目录下，直接运行程序，就能成功了
</code></pre>

<p><img src="http://al1020119.github.io/images/zhibocaiji003.png" title="Caption" ></p>

<pre><code>注意不需要打开工程，把jkplayer拖入到工程中，而是直接把jkplayer库拷贝到与Classes同一级目录下就可以了。
错误示范:不要向下面这样操作
</code></pre>

<p><img src="http://al1020119.github.io/images/zhibocaiji004.png" title="Caption" ></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[直播-实战篇]]></title>
    <link href="http://al1020119.github.io/blog/2016/09/20/zhi-bo-shi-zhan-pian/"/>
    <updated>2016-09-20T14:42:57+08:00</updated>
    <id>http://al1020119.github.io/blog/2016/09/20/zhi-bo-shi-zhan-pian</id>
    <content type="html"><![CDATA[<p>前言</p>

<p>在看这篇之前，如果您还不了解直播原理，请查看上篇文章如何快速的开发一个完整的iOS直播app(原理篇)</p>

<p>开发一款直播app，集成ijkplayer成功后，就算完成直播功能一半的工程了，只要有拉流url，就能播放直播啦</p>

<p>本篇主要讲解的是直播app中，需要用到的一个很重要的开源框架ijkplayer，然后集成这个框架可能对大多数初学者还是比较有难度的，所以本篇主要教你解决集成【ijkplayer】遇见的各种坑。</p>

<p>很多文章，可能讲解的是如何做，我比较注重讲解为什么这样做,大家有什么不明白，还可以多多提出来。</p>

<p>如果喜欢我的文章，可以关注我微博:吖了个峥,也可以来小码哥，了解下我们的iOS培训课程。后续还会更新更多内容,有任何问题，欢迎简书留言峥吖。。。
效果</p>

<p><img src="http://al1020119.github.io/images/zhiboshizhan001.gif" title="Caption" ></p>

<h3>一、基本知识</h3>

<p>README.md文件：框架的描述文件，描述这个框架怎么使用</p>

<p>编译语言:程序在被执行之前，需要一个专门的编译过程，把程序编译成为机器语言的文件，运行时不需要翻译，所以编译型语言的程序执行效率高，比如OC,C,C++</p>

<p>解释性语言:解释性语言的程序不需要编译，在运行程序的时候才翻译，每个语句都是执行的时候才翻译。这样解释性语言每执行一次就需要逐行翻译一次，效率比较低</p>

<p>解释性语言执行和编译语言执行的区别：</p>

<pre><code>解释性语言一行一行的解析，如果有错误，就不会执行，直接执行下一行。
编译语言，只要有错，就不能编译，一行都不能执行。
</code></pre>

<p>脚本语言:属于解析语言，必须通过解释器解析，将其一条条的翻译成机器可识别的指令，并按程序顺序执行。</p>

<pre><code>python：脚本语言，适合网络应用程序的开发，有利于开发效率，现在显得越来越强大
PHP：服务器端脚本语言，适合做动态网站
JS：作为客户端的脚本语言，在浏览中解释执行，
shell：操作系统脚本语言，一般指Unix/Linux中使用的命令行
编译语言，执行文件是二进制。脚本语言是解释执行的，执行文件是文本
</code></pre>

<p>shell解释器:shell是一个命令行解释器，相当于windows的cmd,处于内核和用户之间，负责把用户的指令传递给内核并且把执行结果回显给用户.</p>

<pre><code>默认Unix都有shell,OS基于Unix,因此OS自带shell。
</code></pre>

<p>bash: bash是一种shell解释器版本，shell有很多种版本，就像人，也分不同国家的人。</p>

<pre><code>牛程序员看到不爽的Shell解释器，就会自己重新写一套，慢慢形成了一些标准，常用的Shell解释器有这么几种，sh、bash、csh等
</code></pre>

<p>shell:通常我们说的shell,指的是shell脚本语言，而不是shell解释器。</p>

<pre><code>在编写shell时，第一行一定要指明系统需要哪种shell解释器解释你的shell脚本，如：#! /bin/bash，使用bash解析脚本语言
什么时候使用shell命令，比如有些系统命令经常需要用到，可以把命令封装到一个脚本文件，以后就不用再敲一遍了，直接执行脚本语言。
比如ijkplayer,就用脚本文件下载ffmpeg,因为下载ffmpeg需要执行很多命令，全部封装到脚本文件中。
在导入一些第三方框架的时候，经常需要用到一些命令，所以一般都会封装到一个脚本文件中，以后只要执行脚本，就会自动执行集成第三方框架的命令。
</code></pre>

<p>sh:sheel脚本文件后缀名</p>

<h3>二、下载ijkPlayer</h3>

<pre><code>去到B站得github主页，找到ijkplayer项目，下载源码 ijkplayer下载地址
打开Demo，查看用法，一般学习第三方库，都是先查看Demo
</code></pre>

<p><img src="http://al1020119.github.io/images/zhiboshizhan002.png" title="Caption" ></p>

<h3>三、编译ijkPlayer的步骤</h3>

<p>1、找到ijkPlayerMediaDemo并运行</p>

<pre><code>提示'libavformat/avformat.h' file not found
</code></pre>

<p><img src="http://al1020119.github.io/images/zhiboshizhan003.png" title="Caption" ></p>

<p>原因：因为libavformat是ffmpeg中的库，而ijkplayer是基于ffmpeg这个库的，因此需要导入ffmpeg</p>

<p>解决：查看ijkplayer的README.md，一般都会有说明。</p>

<p><img src="http://al1020119.github.io/images/zhiboshizhan004.png" title="Caption" ></p>

<p>init-ios.sh脚本的作用：下载ffmpeg源码</p>

<pre><code>想了解脚本具体怎么做的，可以查看之前写的文章带你走进脚本世界，ijkplayer之【init-ios.sh】脚本分析，全面剖析了init-ios.sh这个脚本做了哪些事情。
</code></pre>

<p>如何执行init-ios.sh脚本文件</p>

<pre><code>步骤一：找到init-ios.sh脚本文件
</code></pre>

<p><img src="http://al1020119.github.io/images/zhiboshizhan005.png" title="Caption" ></p>

<pre><code>步骤二：打开终端，cd进入到ijkplayer-master的目录中
</code></pre>

<p><img src="http://al1020119.github.io/images/zhiboshizhan006.png" title="Caption" ></p>

<pre><code>注意是 cd 这个文件夹
</code></pre>

<p><img src="http://al1020119.github.io/images/zhiboshizhan007.png" title="Caption" ></p>

<pre><code>步骤三：输入./init-ios.sh，就会执行当前脚本了。
</code></pre>

<p><img src="http://al1020119.github.io/images/zhiboshizhan008.png" title="Caption" ></p>

<pre><code>执行完脚本后，就会发现ijkplayer中有ffmpeg了
</code></pre>

<p><img src="http://al1020119.github.io/images/zhiboshizhan009.png" title="Caption" >
2、下载好ffmpeg源码后，再次运行Demo</p>

<pre><code>发现还是报'libavformat/avformat.h' file not found错误
原因:执行init-ios.sh，仅仅是下载源码，但是源码并没有参与编译，需要把源码编译成.a文件
    Demo依赖于IJKMediaPlayer库
</code></pre>

<p><img src="http://al1020119.github.io/images/zhiboshizhan010.png" title="Caption" ></p>

<pre><code>打开 IJKMediaPlayer库，查看下源码
</code></pre>

<p><img src="http://al1020119.github.io/images/zhiboshizhan011.png" title="Caption" ></p>

<pre><code>打开 IJKMediaPlayer库
</code></pre>

<p><img src="http://al1020119.github.io/images/zhiboshizhan012.png" title="Caption" ></p>

<pre><code>右击，发现FFMPEG中的库都是红的，表示不存在
</code></pre>

<p><img src="http://al1020119.github.io/images/zhiboshizhan013.png" title="Caption" ></p>

<pre><code>解决:查看ijkplayer的README.md
</code></pre>

<p><img src="http://al1020119.github.io/images/zhiboshizhan014.png" title="Caption" >
编译ffmpeg库</p>

<pre><code>步骤一：进入到脚本文件的目录下
</code></pre>

<p><img src="http://al1020119.github.io/images/zhiboshizhan015.png" title="Caption" ></p>

<pre><code>步骤二：执行./compile-ffmpeg.sh clean
    步骤二功能：删除一些文件和文件夹，为编译ffmpeg.sh做准备，在编译ffmpeg.sh的时候，会自动创建刚刚删除的那些文件，为避免文件名冲突，因此在编译ffmpeg.sh之前先删除等会会自动创建的文件夹或者文件
</code></pre>

<p><img src="http://al1020119.github.io/images/zhiboshizhan016.png" title="Caption" ></p>

<pre><code>步骤三：执行./compile-ffmpeg.sh all,真正的编译各个平台的ffmpeg库，并生成所以平台的通用库.
</code></pre>

<p><img src="http://al1020119.github.io/images/zhiboshizhan017.png" title="Caption" ></p>

<p>执行./compile-ffmpeg.sh all
执行compile-ffmpeg.sh all前</p>

<p><img src="http://al1020119.github.io/images/zhiboshizhan018.png" title="Caption" >
执行compile-ffmpeg.sh all后</p>

<p><img src="http://al1020119.github.io/images/zhiboshizhan019.png" title="Caption" >
3.再次运行Demo,就能成功了,因为IJKMediaPlayer库获取到ffmpeg库了</p>

<pre><code>编译完ffmpeg后，IJKMediaPlayer库中显示
</code></pre>

<p><img src="http://al1020119.github.io/images/zhiboshizhan020.png" title="Caption" ></p>

<pre><code>cmd+r,Demo运行成功
</code></pre>

<p><img src="http://al1020119.github.io/images/zhiboshizhan021.png" title="Caption" ></p>

<h3>四、如何集成到ijkplayer到自己的项目中</h3>

<pre><code>注意：ijkplayer的README中的方法比较麻烦，不方便携带，不推荐。
</code></pre>

<p><img src="http://al1020119.github.io/images/zhiboshizhan022.png" title="Caption" >
1.推荐自己把IJKMediaPlayer打包成静态库,在导入到自己的项目中。</p>

<pre><code>如何打包，请参考，iOS中集成ijkplayer视频直播框架，写的非常不错，就不一一详细介绍了,但是只有发布版本的库。
我自己打包了ijkplayer两个版本库，分别用于调试和发布(DEBUG和Release),点击下载
由于文件太大上传不了GitHUb,就上传到百度云了
</code></pre>

<p>2.直接把ijkplayer库拖入到自己的工程中，</p>

<pre><code>调试的话，拖入调试版本的ijkplayer库，发布的话，拖入发布版本的ijkplayer库
</code></pre>

<p><img src="http://al1020119.github.io/images/zhiboshizhan023.png" title="Caption" >
3.导入ijkplayer依赖的库，具体可以查看ijkplayer的README</p>

<p><img src="http://al1020119.github.io/images/zhiboshizhan024.png" title="Caption" >
<img src="http://al1020119.github.io/images/zhiboshizhan025.png" title="Caption" ></p>

<h3>五、使用ijkplayer直播</h3>

<p>1.ijkplayer用法简介</p>

<pre><code>ijkplayer用法比较简单，其实只要有直播地址，就能直播了
注意：最好真机测试，模拟器测试比较卡,不流畅，真机就没有问题了
</code></pre>

<p>2.抓取数据</p>

<pre><code>抓了很多直播app的数据，发现映客主播的质量是最高的。
映客主播url:http://116.211.167.106/api/live/aggregation?uid=133825214&amp;interest=1
    uid=账号ID，这里是我的账号ID
    interest=兴趣 ，1表示只查看女生，哈哈
    上下拉刷新的接口没抓到，就一下加载200条数据，哈哈

- (void)loadData
{
    // 映客数据url
    NSString *urlStr = @"http://116.211.167.106/api/live/aggregation?uid=133825214&amp;interest=1";

    // 请求数据
    AFHTTPSessionManager *mgr = [AFHTTPSessionManager manager];
    mgr.responseSerializer = [AFJSONResponseSerializer serializer];
    mgr.responseSerializer.acceptableContentTypes = [NSSet setWithObjects:@"text/plain", nil];
    [mgr GET:urlStr parameters:nil progress:nil success:^(NSURLSessionDataTask * _Nonnull task, NSDictionary * _Nullable responseObject) {

        _lives = [YZLiveItem mj_objectArrayWithKeyValuesArray:responseObject[@"lives"]];

        [_tableView reloadData];

    } failure:^(NSURLSessionDataTask * _Nullable task, NSError * _Nonnull error) {

        NSLog(@"%@",error);

    }];
}
</code></pre>

<p>3.获取拉流url,直播</p>

<p>IJKFFMoviePlayerController：用来做直播的类</p>

<pre><code>- (void)viewDidLoad {
    [super viewDidLoad];

    self.view.backgroundColor = [UIColor whiteColor];

    // 设置直播占位图片
    NSURL *imageUrl = [NSURL URLWithString:[NSString stringWithFormat:@"http://img.meelive.cn/%@",_live.creator.portrait]];
    [self.imageView sd_setImageWithURL:imageUrl placeholderImage:nil];

    // 拉流地址
    NSURL *url = [NSURL URLWithString:_live.stream_addr];

    // 创建IJKFFMoviePlayerController：专门用来直播，传入拉流地址就好了
    IJKFFMoviePlayerController *playerVc = [[IJKFFMoviePlayerController alloc] initWithContentURL:url withOptions:nil];

    // 准备播放
    [playerVc prepareToPlay];

    // 强引用，反正被销毁
    _player = playerVc;

    playerVc.view.frame = [UIScreen mainScreen].bounds;

    [self.view insertSubview:playerVc.view atIndex:1];

}
</code></pre>

<p>4.结束播放</p>

<pre><code>界面不播放，一定要记得结束播放，否则会报内存溢出
</code></pre>

<p><img src="http://al1020119.github.io/images/zhiboshizhan026.png" title="Caption" ></p>

<pre><code>- (void)viewWillDisappear:(BOOL)animated
{
    [super viewWillDisappear:animated];

    // 界面消失，一定要记得停止播放
    [_player pause];
    [_player stop];
}
</code></pre>

<p>结束语</p>

<p>后续还会更新更多有关直播的资料，希望做到教会每一个朋友从零开始做一款直播app，并且Demo也会慢慢完善.
Demo点击下载</p>

<pre><code>由于FFMPEG库比较大，大概100M。
本来想自己上传所有代码了，上传了1个小时，还没成功，就放弃了。
提供另外一种方案，需要你们自己导入IJKPlayer库
具体步骤：
下载Demo后，打开YZLiveApp.xcworkspace问题
</code></pre>

<p>打开YZLiveApp.xcworkspace问题</p>

<p><img src="http://al1020119.github.io/images/zhiboshizhan027.png" title="Caption" ></p>

<pre><code>pod install就能解决
</code></pre>

<p><img src="http://al1020119.github.io/images/zhiboshizhan028.png" title="Caption" ></p>

<pre><code>下载jkplayer库，点击下载
把jkplayer直接拖入到与Classes同一级目录下，直接运行程序，就能成功了
</code></pre>

<p><img src="http://al1020119.github.io/images/zhiboshizhan029.png" title="Caption" ></p>

<pre><code>注意不需要打开工程，把jkplayer拖入到工程中，而是直接把jkplayer库拷贝到与Classes同一级目录下就可以了。
错误示范:不要向下面这样操作
</code></pre>

<p><img src="http://al1020119.github.io/images/zhiboshizhan030.png" title="Caption" ></p>

<hr />

<pre><code>Q Q：2211523682/790806573

微信：18370997821/13148454507

微博WB:http://weibo.com/u/3288975567?is_hot=1

git博文：http://al1020119.github.io/

github：https://github.com/al1020119
</code></pre>

<p><img src="http://al1020119.github.io/images/iCocosCoder.jpg" title="Caption" ></p>

<p><img src="http://al1020119.github.io/images/iCocosPublic.jpg" title="Caption" ></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[直播-原理篇]]></title>
    <link href="http://al1020119.github.io/blog/2016/09/15/zhi-bo-yuan-li-pian/"/>
    <updated>2016-09-15T14:42:49+08:00</updated>
    <id>http://al1020119.github.io/blog/2016/09/15/zhi-bo-yuan-li-pian</id>
    <content type="html"><![CDATA[<p>前言</p>

<p>本系列文章引自一个朋友（讲师）的精华：<a href="http://www.jianshu.com/users/b09c3959ab3b/latest_articles">袁峥Seemygo</a></p>

<h2>一、个人见解（直播难与易）</h2>

<p>直播难：个人认为要想把直播从零开始做出来，绝对是牛逼中的牛逼，大牛中的大牛，因为直播中运用到的技术难点非常之多，视频/音频处理，图形处理，视频/音频压缩，CDN分发，即时通讯等技术，每一个技术都够你学几年的。</p>

<p>直播易：已经有各个领域的大牛，封装好了许多牛逼的框架，我们只需要用别人写好的框架，就能快速的搭建一个直播app，也就是传说中的站在大牛肩膀上编程。</p>

<h2>二、了解直播</h2>

<p>热门直播产品</p>

<p>映客，斗鱼，熊猫，虎牙，花椒等等
直播效果图</p>

<p><img src="http://al1020119.github.io/images/zhiboyuanli001.png" title="Caption" >
1.一个完整直播app功能(来自落影loyinglin分享)</p>

<pre><code>1、聊天
    私聊、聊天室、点亮、推送、黑名单等;

2、礼物
    普通礼物、豪华礼物、红包、排行榜、第三方充值、内购、礼物动态更新、提现等；

3、直播列表
    关注、热门、最新、分类直播用户列表等；

4、自己直播
    录制、推流、解码、播放、美颜、心跳、后台切换、主播对管理员操作、管理员对用户等；

5、房间逻辑
    创建房间、进入房间、退出房间、关闭房间、切换房间、房间管理员设置、房间用户列表等；

6、用户逻辑
    普通登陆、第三方登陆、注册、搜索、修改个人信息、关注列表、粉丝列表、忘记密码、查看个人信息、收入榜、关注和取关、检索等；

7、观看直播
    聊天信息、滚屏弹幕、礼物显示、加载界面等；

8、统计
    APP业务统计、第三方统计等；

9、超管
    禁播、隐藏、审核等；
</code></pre>

<p>2.一个完整直播app原理</p>

<p>直播原理：把主播录制的视频，推送到服务器，在由服务器分发给观众观看。</p>

<p>直播环节：推流端（采集、美颜处理、编码、推流）、服务端处理（转码、录制、截图、鉴黄）、播放器（拉流、解码、渲染）、互动系统（聊天室、礼物系统、赞）
3.一个完整直播app实现流程</p>

<p>1.采集、2.滤镜处理、3.编码、4.推流、5.CDN分发、6.拉流、7.解码、8.播放、9.聊天互动</p>

<p><img src="http://al1020119.github.io/images/zhiboyuanli002.png" title="Caption" >
4.一个完整直播app架构</p>

<p><img src="http://al1020119.github.io/images/zhiboyuanli003.png" title="Caption" >
5.一个完整直播app技术点</p>

<p><img src="http://al1020119.github.io/images/zhiboyuanli004.png" title="Caption" ></p>

<h2>三、了解流媒体（直播需要用到流媒体）</h2>

<pre><code>流媒体开发:网络层(socket或st)负责传输，协议层(rtmp或hls)负责网络打包，封装层(flv、ts)负责编解码数据的封装，编码层(h.264和aac)负责图像，音频压缩。
帧:每帧代表一幅静止的图像
GOP:（Group of Pictures）画面组，一个GOP就是一组连续的画面，每个画面都是一帧，一个GOP就是很多帧的集合
    直播的数据，其实是一组图片，包括I帧、P帧、B帧，当用户第一次观看的时候，会寻找I帧，而播放器会到服务器寻找到最近的I帧反馈给用户。因此，GOP Cache增加了端到端延迟，因为它必须要拿到最近的I帧
    GOP Cache的长度越长，画面质量越好
码率：图片进行压缩后每秒显示的数据量。
帧率：每秒显示的图片数。影响画面流畅度，与画面流畅度成正比：帧率越大，画面越流畅；帧率越小，画面越有跳动感。
    由于人类眼睛的特殊生理结构，如果所看画面之帧率高于16的时候，就会认为是连贯的，此现象称之为视觉暂留。并且当帧速达到一定数值后，再增长的话，人眼也不容易察觉到有明显的流畅度提升了。
分辨率：(矩形)图片的长度和宽度，即图片的尺寸
压缩前的每秒数据量:帧率X分辨率(单位应该是若干个字节)
压缩比:压缩前的每秒数据量/码率 （对于同一个视频源并采用同一种视频编码算法，则：压缩比越高，画面质量越差。）　

视频文件格式：文件的后缀，比如.wmv,.mov,.mp4,.mp3,.avi,
    主要用处，根据文件格式，系统会自动判断用什么软件打开,
    注意: 随意修改文件格式，对文件的本身不会造成太大的影响，比如把avi改成mp4,文件还是avi.

视频封装格式：一种储存视频信息的容器，流式封装可以有TS、FLV等，索引式的封装有MP4,MOV,AVI等，
    主要作用：一个视频文件往往会包含图像和音频，还有一些配置信息(如图像和音频的关联，如何解码它们等)：这些内容需要按照一定的规则组织、封装起来.
    注意：会发现封装格式跟文件格式一样，因为一般视频文件格式的后缀名即采用相应的视频封装格式的名称,所以视频文件格式就是视频封装格式。
视频封装格式和视频压缩编码标准：就好像项目工程和编程语言，封装格式就是一个项目的工程，视频编码方式就是编程语言，一个项目工程可以用不同语言开发。
</code></pre>

<h2>四、直播基础知识介绍：</h2>

<h4>1.采集视频、音频</h4>

<ul>
<li><p>1.1 采集视频、音频编码框架 *</p>

<p>  AVFoundation:AVFoundation是用来播放和创建实时的视听媒体数据的框架，同时提供Objective-C接口来操作这些视听数据，比如编辑，旋转，重编码</p></li>
<li><p>1.2 视频、音频硬件设备 *</p>

<p>  CCD:图像传感器： 用于图像采集和处理的过程，把图像转换成电信号。
  拾音器:声音传感器： 用于声音采集和处理的过程，把声音转换成电信号。
  音频采样数据:一般都是PCM格式
  视频采样数据: 一般都是YUV,或RGB格式，采集到的原始音视频的体积是非常大的，需要经过压缩技术处理来提高传输效率</p></li>
</ul>


<h4>2.视频处理（美颜，水印）</h4>

<pre><code>视频处理原理:因为视频最终也是通过GPU，一帧一帧渲染到屏幕上的，所以我们可以利用OpenGL ES，对视频帧进行各种加工，从而视频各种不同的效果，就好像一个水龙头流出的水，经过若干节管道，然后流向不同的目标
    现在的各种美颜和视频添加特效的app都是利用GPUImage这个框架实现的,.
</code></pre>

<ul>
<li><p>视频处理框架 *</p>

<p>  GPUImage : GPUImage是一个基于OpenGL ES的一个强大的图像/视频处理框架,封装好了各种滤镜同时也可以编写自定义的滤镜,其本身内置了多达120多种常见的滤镜效果。
  OpenGL:OpenGL（全写Open Graphics Library）是个定义了一个跨编程语言、跨平台的编程接口的规格，它用于三维图象（二维的亦可）。OpenGL是个专业的图形程序接口，是一个功能强大，调用方便的底层图形库。
  OpenGL ES:OpenGL ES (OpenGL for Embedded Systems) 是 OpenGL三维图形 API 的子集，针对手机、PDA和游戏主机等嵌入式设备而设计。</p></li>
</ul>


<h4>3.视频编码解码</h4>

<ul>
<li><p>3.1 视频编码框架 *</p>

<p>  FFmpeg:是一个跨平台的开源视频框架,能实现如视频编码,解码,转码,串流,播放等丰富的功能。其支持的视频格式以及播放协议非常丰富,几乎包含了所有音视频编解码、封装格式以及播放协议。
      -Libswresample:可以对音频进行重采样,rematrixing 以及转换采样格式等操 作。
      -Libavcodec:提供了一个通用的编解码框架,包含了许多视频,音频,字幕流 等编码/解码器。
      -Libavformat:用于对视频进行封装/解封装。
      -Libavutil:包含一些共用的函数,如随机数生成,数据结构,数学运算等。
      -Libpostproc:用于进行视频的一些后期处理。
      -Libswscale:用于视频图像缩放,颜色空间转换等。
      -Libavfilter:提供滤镜功能。
  X264:把视频原数据YUV编码压缩成H.264格式
  VideoToolbox:苹果自带的视频硬解码和硬编码API，但是在iOS8之后才开放。
  AudioToolbox:苹果自带的音频硬解码和硬编码API</p></li>
<li><p>3.2 视频编码技术 *</p>

<p>  视频压缩编码标准：对视频进行压缩(视频编码)或者解压缩（视频解码）的编码技术,比如MPEG，H.264,这些视频编码技术是压缩编码视频的</p>

<pre><code>  主要作用:是将视频像素数据压缩成为视频码流，从而降低视频的数据量。如果视频不经过压缩编码的话，体积通常是非常大的，一部电影可能就要上百G的空间。
  注意:最影响视频质量的是其视频编码数据和音频编码数据，跟封装格式没有多大关系
</code></pre>

<p>  MPEG:一种视频压缩方式，它采用了帧间压缩，仅存储连续帧之间有差别的地方 ，从而达到较大的压缩比</p></li>
</ul>


<p> H.264/AVC:一种视频压缩方式,采用事先预测和与MPEG中的P-B帧一样的帧预测方法压缩，它可以根据需要产生适合网络情况传输的视频流,还有更高的压缩比，有更好的图象质量</p>

<pre><code>    注意1:如果是从单个画面清晰度比较，MPEG4有优势；从动作连贯性上的清晰度，H.264有优势
    注意2:由于264的算法更加复杂，程序实现烦琐，运行它需要更多的处理器和内存资源。因此，运行264对系统要求是比较高的。
    注意3:由于264的实现更加灵活，它把一些实现留给了厂商自己去实现，虽然这样给实现带来了很多好处，但是不同产品之间互通成了很大的问题，造成了通过A公司的编码器编出的数据，必须通过A公司的解码器去解这样尴尬的事情
</code></pre>

<p>H.265/HEVC:一种视频压缩方式,基于H.264，保留原来的某些技术，同时对一些相关的技术加以改进，以改善码流、编码质量、延时和算法复杂度之间的关系，达到最优化设置。</p>

<pre><code>    H.265 是一种更为高效的编码标准，能够在同等画质效果下将内容的体积压缩得更小，传输时更快更省带宽
    I帧:(关键帧)保留一副完整的画面，解码时只需要本帧数据就可以完成（因为包含完整画面）
P帧:(差别帧)保留这一帧跟之前帧的差别，解码时需要用之前缓存的画面叠加上本帧定义的差别，生成最终画面。（P帧没有完整画面数据，只有与前一帧的画面差别的数据）
B帧:(双向差别帧)保留的是本帧与前后帧的差别，解码B帧，不仅要取得之前的缓存画面，还要解码之后的画面，通过前后画面的与本帧数据的叠加取得最终的画面。B帧压缩率高，但是解码时CPU会比较累
帧内（Intraframe）压缩:当压缩一帧图像时，仅考虑本帧的数据而不考虑相邻帧之间的冗余信息,帧内一般采用有损压缩算法
帧间（Interframe）压缩:时间压缩（Temporal compression），它通过比较时间轴上不同帧之间的数据进行压缩。帧间压缩一般是无损的
muxing（合成）：将视频流、音频流甚至是字幕流封装到一个文件中(容器格式（FLV，TS）)，作为一个信号进行传输。
</code></pre>

<ul>
<li><p>3.3 音频编码技术 *</p>

<p>  AAC，mp3：这些属于音频编码技术,压缩音频用</p></li>
<li><p>3.4码率控制 *</p>

<p>  多码率:观众所处的网络情况是非常复杂的，有可能是WiFi，有可能4G、3G、甚至2G，那么怎么满足多方需求呢？多搞几条线路，根据当前网络环境自定义码率。
      列如：常常看见视频播放软件中的1024，720，高清，标清，流畅等，指的就是各种码率。</p></li>
<li><p>3.5 视频封装格式 *</p>

<p>  TS : 一种流媒体封装格式，流媒体封装有一个好处，就是不需要加载索引再播放，大大减少了首次载入的延迟，如果片子比较长，mp4文件的索引相当大，影响用户体验
      为什么要用TS:这是因为两个TS片段可以无缝拼接，播放器能连续播放</p>

<p>  FLV: 一种流媒体封装格式,由于它形成的文件极小、加载速度极快，使得网络观看视频文件成为可能,因此FLV格式成为了当今主流视频格式</p></li>
</ul>


<h4>4.推流</h4>

<ul>
<li>4.1 数据传输框架 *</li>
</ul>


<p>librtmp:用来传输RTMP协议格式的数据</p>

<ul>
<li><p>4.2 流媒体数据传输协议 *</p>

<p>  RTMP:实时消息传输协议,Adobe Systems公司为Flash播放器和服务器之间音频、视频和数据传输开发的开放协议，因为是开放协议所以都可以使用了。
      RTMP协议用于对象、视频、音频的传输。
      这个协议建立在TCP协议或者轮询HTTP协议之上。
      RTMP协议就像一个用来装数据包的容器，这些数据可以是FLV中的视音频数据。一个单一的连接可以通过不同的通道传输多路网络流，这些通道中的包都是按照固定大小的包传输的</p>

<p>  chunk:消息包</p></li>
</ul>


<h4>5.流媒体服务器</h4>

<ul>
<li><p>5.1常用服务器 *</p>

<p>  SRS：一款国人开发的优秀开源流媒体服务器系统
  BMS:也是一款流媒体服务器系统，但不开源，是SRS的商业版，比SRS功能更多
  nginx:免费开源web服务器，常用来配置流媒体服务器。</p></li>
<li><p>5.2数据分发 *</p>

<p>  CDN：(Content Delivery Network)，即内容分发网络,将网站的内容发布到最接近用户的网络”边缘”，使用户可以就近取得所需的内容，解决 Internet网络拥挤的状况，提高用户访问网站的响应速度.
      CDN：代理服务器，相当于一个中介。
      CDN工作原理：比如请求流媒体数据
          1.上传流媒体数据到服务器（源站）
          2.源站存储流媒体数据
          3.客户端播放流媒体，向CDN请求编码后的流媒体数据
          4.CDN的服务器响应请求，若节点上没有该流媒体数据存在，则向源站继续请求流媒体数据；若节点上已经缓存了该视频文件，则跳到第6步。
          5.源站响应CDN的请求，将流媒体分发到相应的CDN节点上
          6.CDN将流媒体数据发送到客户端
  回源：当有用户访问某一个URL的时候，如果被解析到的那个CDN节点没有缓存响应的内容，或者是缓存已经到期，就会回源站去获取搜索。如果没有人访问，那么CDN节点不会主动去源站拿.
  带宽:在固定的时间可传输的数据总量，
      比如64位、800MHz的前端总线，它的数据传输率就等于64bit×800MHz÷8(Byte)=6.4GB/s
  负载均衡: 由多台服务器以对称的方式组成一个服务器集合，每台服务器都具有等价的地位，都可以单独对外提供服务而无须其他服务器的辅助.
      通过某种负载分担技术，将外部发送来的请求均匀分配到对称结构中的某一台服务器上，而接收到请求的服务器独立地回应客户的请求。
      均衡负载能够平均分配客户请求到服务器列阵，籍此提供快速获取重要数据，解决大量并发访问服务问题。
      这种群集技术可以用最少的投资获得接近于大型主机的性能。
  QoS（带宽管理）:限制每一个组群的带宽，让有限的带宽发挥最大的效用</p></li>
</ul>


<h4>6.拉流</h4>

<pre><code>直播协议选择：
    即时性要求较高或有互动需求的可以采用RTMP,RTSP
    对于有回放或跨平台需求的，推荐使用HLS
直播协议对比 :
</code></pre>

<p><img src="http://al1020119.github.io/images/zhiboyuanli005.png" title="Caption" ></p>

<pre><code>HLS:由Apple公司定义的用于实时流传输的协议,HLS基于HTTP协议实现，传输内容包括两部分，一是M3U8描述文件，二是TS媒体文件。可实现流媒体的直播和点播，主要应用在iOS系统
    HLS是以点播的技术方式来实现直播
    HLS是自适应码率流播，客户端会根据网络状况自动选择不同码率的视频流，条件允许的情况下使用高码率，网络繁忙的时候使用低码率，并且自动在二者间随意切
    换。这对移动设备网络状况不稳定的情况下保障流畅播放非常有帮助。
    实现方法是服务器端提供多码率视频流，并且在列表文件中注明，播放器根据播放进度和下载速度自动调整。
HLS与RTMP对比:HLS主要是延时比较大，RTMP主要优势在于延时低
    HLS协议的小切片方式会生成大量的文件，存储或处理这些文件会造成大量资源浪费
    相比使用RTSP协议的好处在于，一旦切分完成，之后的分发过程完全不需要额外使用任何专门软件，普通的网络服务器即可，大大降低了CDN边缘服务器的配置要求，可以使用任何现成的CDN,而一般服务器很少支持RTSP。
HTTP-FLV:基于HTTP协议流式的传输媒体内容。
    相对于RTMP，HTTP更简单和广为人知，内容延迟同样可以做到1~3秒，打开速度更快，因为HTTP本身没有复杂的状态交互。所以从延迟角度来看，HTTP-FLV要优于RTMP。
RTSP:实时流传输协议,定义了一对多应用程序如何有效地通过IP网络传送多媒体数据.
RTP:实时传输协议,RTP是建立在UDP协议上的，常与RTCP一起使用，其本身并没有提供按时发送机制或其它服务质量（QoS）保证，它依赖于低层服务去实现这一过程。
RTCP:RTP的配套协议,主要功能是为RTP所提供的服务质量（QoS）提供反馈，收集相关媒体连接的统计信息，例如传输字节数，传输分组数，丢失分组数，单向和双向网络延迟等等。
</code></pre>

<h4>7.解码</h4>

<ul>
<li><p>7.1 解封装 *</p>

<p>  demuxing（分离）：从视频流、音频流，字幕流合成的文件(容器格式（FLV，TS）)中， 分解出视频、音频或字幕，各自进行解码。</p></li>
<li><p>7.2 音频编码框架 *</p>

<p>  fdk_aac:音频编码解码框架，PCM音频数据和AAC音频数据互转</p></li>
<li><p>7.3 解码介绍 *</p>

<p>  硬解码：用GPU来解码，减少CPU运算
      　优点：播放流畅、低功耗，解码速度快，
      　　 * 缺点：兼容不好
  软解码：用CPU来解码
      优点：兼容好
      　　 * 缺点：加大CPU负担，耗电增加、没有硬解码流畅，解码速度相对慢</p></li>
</ul>


<h4>8.播放</h4>

<pre><code>ijkplayer:一个基于FFmpeg的开源Android/iOS视频播放器
    API易于集成；
    编译配置可裁剪，方便控制安装包大小；
    支持硬件加速解码，更加省电
    简单易用，指定拉流URL，自动解码播放.
</code></pre>

<h4>9.聊天互动</h4>

<pre><code>IM:(InstantMessaging)即时通讯:是一个实时通信系统，允许两人或多人使用网络实时的传递文字消息、文件、语音与视频交流.
    IM在直播系统中的主要作用是实现观众与主播、观众与观众之间的文字互动.
    * 第三方SDK *
腾讯云：腾讯提供的即时通讯SDK，可作为直播的聊天室
融云：一个比较常用的即时通讯SDK，可作为直播的聊天室
</code></pre>

<h2>五、如何快速的开发一个完整的iOS直播app</h2>

<h4>1、利用第三方直播SDK快速的开发</h4>

<p>七牛云:七牛直播云是专为直播平台打造的全球化直播流服务和一站式实现SDK端到端直播场景的企业级直播云服务平台.</p>

<ul>
<li> 熊猫TV,龙珠TV等直播平台都是用的七牛云</li>
</ul>


<p>网易视频云：基于专业的跨平台视频编解码技术和大规模视频内容分发网络，提供稳定流畅、低延时、高并发的实时音视频服务，可将视频直播无缝对接到自身App.</p>

<h4>2、第三方SDK公司为什么要提供SDK给我们？</h4>

<pre><code>希望把我们的产品和它绑在一条船上，更加的依赖它。
技术生钱，帮养一大批牛B的程序员
</code></pre>

<h4>3、直播功能：自研还是使用第三方直播SDK开发？</h4>

<p>第三方SDK开发: 对于一个初创团队来讲，自研直播不管在技术门槛、CDN、带宽上都是有很大的门槛的，而且需要耗费大量的时间才能做出成品，不利于拉投资。</p>

<p>自研：公司直播平台大，从长远看，自研可以节省成本，技术成面比直接用SDK可控多了。</p>

<h6>4.第三方SDK好处</h6>

<pre><code>降低成本
    使用好的第三方企业服务，将不用再花高价请猎头去挖昂贵的大牛，也不用去安抚大牛们个性化的脾气
提升效率
    第三方服务的专注与代码集成所带来的方便，所花费的时间可能仅仅是1-2个小时，节约近99%的时间，足够换取更多的时间去和竞争对手斗智斗勇，增加更大的成功可能性
降低风险
    借助专业的第三方服务，由于它的快速、专业、稳定等特点，能够极大地加强产品的竞争能力（优质服务、研发速度等），缩短试错时间，必将是创业中保命的手段之一
专业的事，找专业的人来做
    第三方服务最少是10-20人的团队专注地解决同一个问题，做同一件事情。第三方服务所带来的支持效果，绝不是通过1-2个人处理所能对比的，难道不是吗
</code></pre>

<p>结束语</p>

<p>后续还会有讲解视频采集，美颜，聊天室，礼物系统等更多功能，敬请关注！！！</p>

<hr />

<pre><code>Q Q：2211523682/790806573

微信：18370997821/13148454507

微博WB:http://weibo.com/u/3288975567?is_hot=1

git博文：http://al1020119.github.io/

github：https://github.com/al1020119
</code></pre>

<p><img src="http://al1020119.github.io/images/iCocosCoder.jpg" title="Caption" ></p>

<p><img src="http://al1020119.github.io/images/iCocosPublic.jpg" title="Caption" ></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[直播-iJKPlayer]]></title>
    <link href="http://al1020119.github.io/blog/2016/09/10/zhi-bo-ijkplayer/"/>
    <updated>2016-09-10T14:42:37+08:00</updated>
    <id>http://al1020119.github.io/blog/2016/09/10/zhi-bo-ijkplayer</id>
    <content type="html"><![CDATA[<p>demo:<a href="https://github.com/al1020119/iCocosIJKPlayer">iCocosIJKPlayer</a></p>

<p>网上讨论比较多并且支持Android/iOS的项目</p>

<pre><code>Vitamio
IJKPlayer
</code></pre>

<p>首先说下Vitamio目前可以拿到的版本是4.20，商业使用需要付费。</p>

<p>这里只介绍IJKPlayer，为什么？用了你就知道了！</p>

<p>ijkplayer 是一款做视频直播的框架, 基于ffmpeg, 支持 Android 和 iOS, 网上也有很多集成说明, 但是个人觉得还是不够详细, 在这里详细的讲一下在 iOS 中如何集成ijkplayer, 即便以前从没有接触过, 按着下面做也可以集成成功!</p>

<p><a href="https://github.com/Bilibili/ijkplayer">ijkPlayer下载地址</a></p>

<p><a href="http://blog.csdn.net/zc639143029/article/details/51191886">ijkPlayer详解</a></p>

<p>必备条件:</p>

<pre><code># install homebrew, git, yasm
ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
brew install git
brew install yasm
</code></pre>

<h3>一. 下载ijkplayer</h3>

<p><a href="https://github.com/Bilibili/ijkplayer">ijkplayer下载地址</a></p>

<p>下载完成后解压, 解压后文件夹内部目录如下图:</p>

<p><img src="http://al1020119.github.io/images/ijkplayer001.png" title="Caption" ></p>

<h3>二. 编译 ijkplayer</h3>

<p>说是编译 ijkplayer, 其实是编译 ffmpeg, 在这里我们已经下载好了ijkplayer, 所以 github 上README.md中的Build iOS那一步中有一些步骤是不需要的.</p>

<p>下面开始一步一步编译:</p>

<ol>
<li>打开终端, cd 到jkplayer-master文件夹中, 也就是下载完解压后的文件夹, 如下图:</li>
</ol>


<p><img src="http://al1020119.github.io/images/ijkplayer002.png" title="Caption" >
2. 执行命令行./init-ios.sh, 这一步是去下载 ffmpeg 的, 时间会久一点, 耐心等一下.如下图:</p>

<p><img src="http://al1020119.github.io/images/ijkplayer003.png" title="Caption" >
3. 在第2步中下载完成后, 执行cd ios, 也就是进入到 ios目录中, 如下图:</p>

<p><img src="http://al1020119.github.io/images/ijkplayer004.png" title="Caption" >
4. 进入 ios 文件夹后, 在终端依次执行./compile-ffmpeg.sh clean和./compile-ffmpeg.sh all命令, 编译 ffmpeg, 也就是README.md中这两步, 如下图:</p>

<p><img src="http://al1020119.github.io/images/ijkplayer005.png" title="Caption" >
编译时间较久, 耐心等待一下.</p>

<pre><code>./init-ios.sh
cd ios
./compile-ffmpeg.sh clean
./compile-ffmpeg.sh all
</code></pre>

<h3>三. 打包IJKMediaFramework.framework框架</h3>

<p>集成 ijkplayer 有两种方法: 一种方法是按照IJKMediaDemo工程中那样, 直接导入工程IJKMediaPlayer.xcodeproj, 在这里不做介绍, 如下图:</p>

<p><img src="http://al1020119.github.io/images/ijkplayer006.png" title="Caption" >
第二种集成方法是把 ijkplayer 打包成framework导入工程中使用. 下面开始介绍如何打包IJKMediaFramework.framework, 按下面步骤开始一步一步做:</p>

<ol>
<li>首先打开工程IJKMediaPlayer.xcodeproj, 位置如下图:</li>
</ol>


<p><img src="http://al1020119.github.io/images/ijkplayer007.png" title="Caption" >
打开后是这样的, 如下图:</p>

<p><img src="http://al1020119.github.io/images/ijkplayer008.png" title="Caption" >
2. 工程打开后设置工程的 scheme, 具体步骤如下图:</p>

<p><img src="http://al1020119.github.io/images/ijkplayer009.png" title="Caption" >
<img src="http://al1020119.github.io/images/ijkplayer010.png" title="Caption" >
3. 设置好 scheme 后, 分别选择真机和模拟器进行编译, 编译完成后, 进入 Finder, 如下图:</p>

<p><img src="http://al1020119.github.io/images/ijkplayer011.png" title="Caption" >
进入 Finder 后, 可以看到有真机和模拟器两个版本的编译结果, 如下图:</p>

<p><img src="http://al1020119.github.io/images/ijkplayer012.png" title="Caption" >
下面开始合并真机和模拟器版本的 framework, 注意不要合并错了, 合并的是这个文件, 如下图:</p>

<p><img src="http://al1020119.github.io/images/ijkplayer013.png" title="Caption" >
打开终端, 进行合并, 命令行具体格式为:</p>

<p>lipo -create &ldquo;真机版本路径&rdquo; &ldquo;模拟器版本路径&rdquo; -output &ldquo;合并后的文件路径&rdquo;</p>

<p>合并后如下图:</p>

<p><img src="http://al1020119.github.io/images/ijkplayer014.png" title="Caption" >
下面很重要, 需要用合并后的IJKMediaFramework把原来的IJKMediaFramework替换掉, 如下图, 希望你能看懂:</p>

<p><img src="http://al1020119.github.io/images/ijkplayer015.png" title="Caption" >
上图中的1、2两步完成后, 绿色框住的那个IJKMediaFramework.framework文件就是我们需要的框架了, 可以复制出来, 稍后我们需要导入工程使用.</p>

<h3>四. iOS工程中集成ijkplayer</h3>

<p>新建工程, 导入合并后的IJKMediaFramework.framework以及相关依赖框架以及相关依赖框架,如下图:</p>

<p><img src="http://al1020119.github.io/images/ijkplayer016.png" title="Caption" >
导入框架后, 在ViewController.m进行测试, 首先导入IJKMediaFramework.h头文件, 编译看有没有错, 如果没有错说明集成成功.</p>

<p>接着开始在ViewController.m文件中使用IJKMediaFramework框架进行测试使用, 写一个简单的直播视频进行测试, 在这里看一下运行后的结果, 后面会放上 Demo 供下载.</p>

<p><img src="http://al1020119.github.io/images/ijkplayer0017.png" title="Caption" ></p>

<p><img src="http://al1020119.github.io/images/ijkplayer018.png" title="Caption" ></p>

<pre><code>为苦于各种奇怪原因而无法玩耍的小伙伴们提供了包装了ijkplayer的pod，仅供测试体验。
1.基于ijkplayer 5737ccc提交制作成的framework，需要注意的是需要iOS8+。
2.如果使用ijkplayer过程中遇到BUG什么的，可以移步去ijkplayer作者的GitHub上提issue或者PR。
哦对了，地址在这里https://coding.net/u/shirokuma/p/IJKMediaLibrary/git，因framework超过100MB无法传到GitHub上，就放到Coding上了。祝各位玩的愉快！
</code></pre>

<p>项目源码：（在集成或者使用之前请细细品读，也许你会发现不一样的乐趣）</p>

<pre><code>//
//  ViewController.m
//  iCocosIjkPlayer
//
//  Created by tqy on 16/8/8.
//  Copyright © 2016年 iCocos. All rights reserved.
//

#import "ViewController.h"

#import &lt;IJKMediaFramework/IJKMediaFramework.h&gt;

@interface ViewController ()

@property (nonatomic, strong) NSURL *url;

@property (nonatomic, retain) id&lt;IJKMediaPlayback&gt; player;

@property (nonatomic, weak) UIView *PlayerView;

@end

@implementation ViewController

- (void)viewDidLoad {
    [super viewDidLoad];



    //网络视频
    //    self.url = [NSURL URLWithString:@"https://clips.vorwaerts-gmbh.de/big_buck_bunny.mp4"];
    //    _player = [[IJKAVMoviePlayerController alloc] initWithContentURL:self.url];

    //直播视频
    self.url = [NSURL URLWithString:@"http://live.hkstv.hk.lxdns.com/live/hks/playlist.m3u8"];
    _player = [[IJKFFMoviePlayerController alloc] initWithContentURL:self.url withOptions:nil];

    UIView *playerView = [self.player view];

    UIView *displayView = [[UIView alloc] initWithFrame:CGRectMake(0, 50, self.view.bounds.size.width, 180)];
    self.PlayerView = displayView;
    self.PlayerView.backgroundColor = [UIColor blackColor];
    [self.view addSubview:self.PlayerView];

    playerView.frame = self.PlayerView.bounds;
    playerView.autoresizingMask = UIViewAutoresizingFlexibleWidth | UIViewAutoresizingFlexibleHeight;

    [self.PlayerView insertSubview:playerView atIndex:1];
    [_player setScalingMode:IJKMPMovieScalingModeAspectFill];
    [self installMovieNotificationObservers];

}

-(void)viewWillAppear:(BOOL)animated{
    if (![self.player isPlaying]) {
        [self.player prepareToPlay];
    }
}

#pragma Selector func

- (void)loadStateDidChange:(NSNotification*)notification {
    IJKMPMovieLoadState loadState = _player.loadState;

    if ((loadState &amp; IJKMPMovieLoadStatePlaythroughOK) != 0) {
        NSLog(@"LoadStateDidChange: IJKMovieLoadStatePlayThroughOK: %d\n",(int)loadState);
    }else if ((loadState &amp; IJKMPMovieLoadStateStalled) != 0) {
        NSLog(@"loadStateDidChange: IJKMPMovieLoadStateStalled: %d\n", (int)loadState);
    } else {
        NSLog(@"loadStateDidChange: ???: %d\n", (int)loadState);
    }
}

- (void)moviePlayBackFinish:(NSNotification*)notification {
    int reason =[[[notification userInfo] valueForKey:IJKMPMoviePlayerPlaybackDidFinishReasonUserInfoKey] intValue];
    switch (reason) {
        case IJKMPMovieFinishReasonPlaybackEnded:
            NSLog(@"playbackStateDidChange: IJKMPMovieFinishReasonPlaybackEnded: %d\n", reason);
            break;

        case IJKMPMovieFinishReasonUserExited:
            NSLog(@"playbackStateDidChange: IJKMPMovieFinishReasonUserExited: %d\n", reason);
            break;

        case IJKMPMovieFinishReasonPlaybackError:
            NSLog(@"playbackStateDidChange: IJKMPMovieFinishReasonPlaybackError: %d\n", reason);
            break;

        default:
            NSLog(@"playbackPlayBackDidFinish: ???: %d\n", reason);
            break;
    }
}

- (void)mediaIsPreparedToPlayDidChange:(NSNotification*)notification {
    NSLog(@"mediaIsPrepareToPlayDidChange\n");
}

- (void)moviePlayBackStateDidChange:(NSNotification*)notification {
    switch (_player.playbackState) {
        case IJKMPMoviePlaybackStateStopped:
            NSLog(@"IJKMPMoviePlayBackStateDidChange %d: stoped", (int)_player.playbackState);
            break;

        case IJKMPMoviePlaybackStatePlaying:
            NSLog(@"IJKMPMoviePlayBackStateDidChange %d: playing", (int)_player.playbackState);
            break;

        case IJKMPMoviePlaybackStatePaused:
            NSLog(@"IJKMPMoviePlayBackStateDidChange %d: paused", (int)_player.playbackState);
            break;

        case IJKMPMoviePlaybackStateInterrupted:
            NSLog(@"IJKMPMoviePlayBackStateDidChange %d: interrupted", (int)_player.playbackState);
            break;

        case IJKMPMoviePlaybackStateSeekingForward:
        case IJKMPMoviePlaybackStateSeekingBackward: {
            NSLog(@"IJKMPMoviePlayBackStateDidChange %d: seeking", (int)_player.playbackState);
            break;
        }

        default: {
            NSLog(@"IJKMPMoviePlayBackStateDidChange %d: unknown", (int)_player.playbackState);
            break;
        }
    }
}

#pragma Install Notifiacation

- (void)installMovieNotificationObservers {
    [[NSNotificationCenter defaultCenter] addObserver:self
                                             selector:@selector(loadStateDidChange:)
                                                 name:IJKMPMoviePlayerLoadStateDidChangeNotification
                                               object:_player];
    [[NSNotificationCenter defaultCenter] addObserver:self
                                             selector:@selector(moviePlayBackFinish:)
                                                 name:IJKMPMoviePlayerPlaybackDidFinishNotification
                                               object:_player];

    [[NSNotificationCenter defaultCenter] addObserver:self
                                             selector:@selector(mediaIsPreparedToPlayDidChange:)
                                                 name:IJKMPMediaPlaybackIsPreparedToPlayDidChangeNotification
                                               object:_player];

    [[NSNotificationCenter defaultCenter] addObserver:self
                                             selector:@selector(moviePlayBackStateDidChange:)
                                                 name:IJKMPMoviePlayerPlaybackStateDidChangeNotification
                                               object:_player];

}

- (void)removeMovieNotificationObservers {
    [[NSNotificationCenter defaultCenter] removeObserver:self
                                                    name:IJKMPMoviePlayerLoadStateDidChangeNotification
                                                  object:_player];
    [[NSNotificationCenter defaultCenter] removeObserver:self
                                                    name:IJKMPMoviePlayerPlaybackDidFinishNotification
                                                  object:_player];
    [[NSNotificationCenter defaultCenter] removeObserver:self
                                                    name:IJKMPMediaPlaybackIsPreparedToPlayDidChangeNotification
                                                  object:_player];
    [[NSNotificationCenter defaultCenter] removeObserver:self
                                                    name:IJKMPMoviePlayerPlaybackStateDidChangeNotification
                                                  object:_player];

}


- (IBAction)play_btn:(id)sender {

    if (![self.player isPlaying]) {
        [self.player play];
    }else{
        [self.player pause];
    }
}

@end
</code></pre>

<hr />

<pre><code>Q Q：2211523682/790806573

微信：18370997821/13148454507

微博WB:http://weibo.com/u/3288975567?is_hot=1

git博文：http://al1020119.github.io/

github：https://github.com/al1020119
</code></pre>

<p><img src="http://al1020119.github.io/images/iCocosCoder.jpg" title="Caption" ></p>

<p><img src="http://al1020119.github.io/images/iCocosPublic.jpg" title="Caption" ></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[原理总结-H264-ACC-FLV]]></title>
    <link href="http://al1020119.github.io/blog/2016/09/08/yuan-li-zong-jie-h264-acc-flv/"/>
    <updated>2016-09-08T14:42:11+08:00</updated>
    <id>http://al1020119.github.io/blog/2016/09/08/yuan-li-zong-jie-h264-acc-flv</id>
    <content type="html"><![CDATA[<p>H.264原理</p>

<pre><code>H.264原始码流（又称为“裸流”）是由一个一个的NALU组成的。他们的结构如下图所示。

其中每个NALU之间通过startcode（起始码）进行分隔，起始码分成两种：0x000001（3Byte）或者0x00000001（4Byte）。如果NALU对应的Slice为一帧的开始就用0x00000001，否则就用0x000001。

H.264码流解析的步骤就是首先从码流中搜索0x000001和0x00000001，分离出NALU；然后再分析NALU的各个字段。本文的程序即实现了上述的两个步骤。
</code></pre>

<p>ACC原理</p>

<pre><code>AAC原始码流（又称为“裸流”）是由一个一个的ADTS frame组成的。他们的结构如下图所示。

其中每个ADTS frame之间通过syncword（同步字）进行分隔。同步字为0xFFF（二进制“111111111111”）。AAC码流解析的步骤就是首先从码流中搜索0x0FFF，分离出ADTS frame；然后再分析ADTS frame的首部各个字段。本文的程序即实现了上述的两个步骤。
</code></pre>

<p>FLV原理</p>

<pre><code>FLV封装格式是由一个FLV Header文件头和一个一个的Tag组成的。Tag中包含了音频数据以及视频数据。FLV的结构如下图所示。


有关FLV的格式本文不再做记录。可以参考文章《视音频编解码学习工程：FLV封装格式分析器》。本文的程序实现了FLV中的FLV Header和Tag的解析，并可以分离出其中的音频流。
</code></pre>

<hr />

<pre><code>Q Q：2211523682/790806573

微信：18370997821/13148454507

微博WB:http://weibo.com/u/3288975567?is_hot=1

git博文：http://al1020119.github.io/

github：https://github.com/al1020119
</code></pre>

<p><img src="http://al1020119.github.io/images/iCocosCoder.jpg" title="Caption" ></p>

<p><img src="http://al1020119.github.io/images/iCocosPublic.jpg" title="Caption" ></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[M3U8]]></title>
    <link href="http://al1020119.github.io/blog/2016/09/06/m3u8/"/>
    <updated>2016-09-06T14:41:56+08:00</updated>
    <id>http://al1020119.github.io/blog/2016/09/06/m3u8</id>
    <content type="html"><![CDATA[<p>引用：<a href="http://log.fyscu.com/index.php/archives/28/">http://log.fyscu.com/index.php/archives/28/</a></p>

<pre><code>文件格式
m3u文件是用来描述一个或多个媒体文件地址的纯文本文件，通常以 M3U 或 m3u 作为扩展名。

m3u文件里描述的最小单位（元素/行/记录），可以是一下三者之一：

1.一个文件的绝对路径
2.相对于m3u文件的相对路径
3.一个网络url

以#好开头的，是m3u的注释，而一些m3u扩展指令也是由#号开头

m3u的一个常见用途是作为一个指向网络中一个流媒体的播放列表，比如在线视频、广播等等。

你可以直接用文本编辑器编写一个m3u文件，但需要保存为 window-1252格式（ASCII的一个扩展集）。

M3U指令的扩展

#EXTM3U    文件头，必须出现在第一行            如：略
#EXTINF    引导信息，包含播放时间（时长）和标题     如：#EXTINF:191,Artist Name - Track Title

M3U8
所谓的M3U8就是用unicode编写的M3U文件，这最初是用在IOS设备上播放http实时流的基础格式。
</code></pre>

<h6>1. HLS</h6>

<p>HLS是为移动设备开发的基于HTTP的流媒体解决方案。</p>

<pre><code>HLS，Http Live Streaming 是由Apple公司定义的用于实时流传输的协议，HLS基于HTTP协议实现，传输内容包括两部分，一是M3U8描述文件，二是TS媒体文件。

1、M3U8文件

   用文本方式对媒体文件进行描述，由一系列标签组成。

2、ts文件

    ts文件为传输流文件，视频编码主要格式h264/mpeg4，音频为acc/MP3。

   ts文件分为三层：ts层Transport Stream、pes层 Packet Elemental Stream、es层 Elementary Stream. es层就是音视频数据，pes层是在音视频数据上加了时间戳等对数据帧的说明信息，ts层就是在pes层加入数据流的识别和传输必须的信息
（1）ts层     ts包大小固定为188字节，ts层分为三个部分：ts header、adaptation field、payload。ts header固定4个字节；adaptation field可能存在也可能不存在，主要作用是给不足188字节的数据做填充；payload是pes数据。
</code></pre>

<h6>2. 原理：</h6>

<p>将视频或流切分成小片（TS）， 并建立索引（M3U8）.</p>

<p>支持视频流：H.264； 音频流：AAC</p>

<h6>3. M3U8文件解析</h6>

<p>M3U8文件在很多地方也叫做Playlist file。</p>

<pre><code>m3u8，是HTTP Live Streaming直播的索引文件。

m3u8基本上可以认为就是.m3u格式文件，区别在于，m3u8文件使用UTF-8字符编码。
</code></pre>

<h6>4.  Playlist file</h6>

<pre><code>一个M3U的 Playlist 就是一个由多个独立行组成的文本文件，每行由回车/换行区分。每一行可以是一个URI  空白行或
</code></pre>

<p>是以”#“号开头的字符串，并且空格只能存在于一行中不同元素间的分隔。
   一个URI 表示一个媒体段或是”variant Playlist file“（最多支持一层嵌套，即一个mm3u8文件中嵌套另一个m3u8），
以”#EXT“开头的表示一个”tag“，否则表示注释，直接忽略</p>

<blockquote><p>多码率的适配，根据网络带宽，客户端会选择一个适合自己码率的文件进行播放，保证视频流的流畅。</p></blockquote>

<p>在IOS device和mac上可以用http的方式进行分发，其中playlist标准为由m3u扩展而来的m3u8文件，媒体文件为MPEG2-TS或者AAC文件(audio only)</p>

<h6>5. m3u8文件有两种应用场景：</h6>

<pre><code>- 多码率适配流，

- 单码率适配流
</code></pre>

<p>客户端默认会首先选择码率最高的请求，如果发现码率达不到，会请求郊低码率的流</p>

<h6>6. m3u8分类</h6>

<p>M3U8分顶级M3U8和二级M3U8， 顶级M3U8主要是做多码率适配的， 二级M3U8才是真正的切片文件，</p>

<hr />

<pre><code>Q Q：2211523682/790806573

微信：18370997821/13148454507

微博WB:http://weibo.com/u/3288975567?is_hot=1

git博文：http://al1020119.github.io/

github：https://github.com/al1020119
</code></pre>

<p><img src="http://al1020119.github.io/images/iCocosCoder.jpg" title="Caption" ></p>

<p><img src="http://al1020119.github.io/images/iCocosPublic.jpg" title="Caption" ></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[直播-视频编解码H.264]]></title>
    <link href="http://al1020119.github.io/blog/2016/09/05/zhi-bo-shi-pin-bian-jie-ma-h-dot-264/"/>
    <updated>2016-09-05T14:41:34+08:00</updated>
    <id>http://al1020119.github.io/blog/2016/09/05/zhi-bo-shi-pin-bian-jie-ma-h-dot-264</id>
    <content type="html"><![CDATA[<pre><code>1995年，ITU-T针对低比特率视频应用制定了H.263标准，当时H.263被公认为是以像素为基础的采用第一代编码技术混合编码方案所能 达到的最佳结果。在随后几年中，ITU-T又对其进行了多次完善，以提高编码效率，增强编码功能。1998年发布了H.263+；2000年发布了 H.263++。尽管采用H263编码技术较H261编码在压缩率和图像质量上都有大幅度的提升，但H.263信源编码算法的核心仍然是H.261标准中 采用的 DPCM/DCT混和编码算法，原理框图也和H.261十分相似。

2001年12月，ITU-T和ISO两个国际标准化组织的有关视频编码的专家联合组成视频联合工作组（JVT，Joint Video Team），负责制定一个新的视频编码标准，以实现视频的高压缩比、高图像质量、良好的网络适应性等目标。随后JVT制定出的视频编码标准被ITU-T 定义为H.264；该标准也被ISO定义为14496-10（MPEG-4 第10部分）高级视频编码（AVC，Advanced Video Coding）标准。
</code></pre>

<ul>
<li>1、H.264/MPEG-4 AVC是一个块导向（block-oriented）、以移动补偿为基础（motion-compensation-based）codec标准</li>
<li>2、H264使用范围：蓝光discs，YouTube，iTunes，Adobe FlashPlayer，MS Silverlight，广播服务（DVB，SBTVD），卫星电视直播服务，有线电视服务，实时视频会议。</li>
<li><p>3、设计目标：高视频质量、低比特率，不增加设计及实现的复杂性。</p></li>
<li><p>4、从视频标准的发展来看，H.264作为国际两大标准组织确定的共同标准，全面覆盖了视频通信、广播、存储等各方面的应用，采用H264的视频标准协议的会议电视系统是合理的选择。</p></li>
<li><p>5、采用H264编码协议的优势：</p>

<ul>
<li><p>不同大小和形状的宏块分割：H.264支持7种模式。最小可达4×4的小块模式的运动补偿为运动详细信息的处理提高了性能，减少了方块效应，提高了图像的质量。</p></li>
<li><p>高精度的亚像素运动补偿：在H.263中采用的是半像素精度的运动估计，而在H.264中可以采用1/4或者1/8像素精度的运动估值。运动估计后的残差小。</p></li>
<li><p>多帧预测：H.264提供可选的多帧预测功能，在帧间编码时，可选5个不同的参考帧，提供了更好的纠错性能，这样更可以改善视频图像质量。</p></li>
<li><p>去块滤波器：H.264定义了自适应去除块效应的滤波器，这可以处理预测环路中的水平和垂直块边缘，大大减少了方块效应。</p></li>
<li><p>4×4块的整数变换：由于用二变换块的尺寸缩小,运动物体的划分更精确,这样,不但变换计算量比较小,而且在运动物体边缘处的衔接误疾差也大为减小；</p></li>
<li><p>先进的量化方法：与H.263等的固定常数量化步长不同，H.264步长是以12.5%的复合率递进的，并对色度系数采用了较小量化步长。这些措施提高了码率控制的能力，并加强了彩色的逼真性。</p></li>
</ul>
</li>
</ul>


<blockquote><p>在图像编解码效率上，H.264算法最为领先，MPEG-4和H.263算法基本相同，MPEG-2算法效率最低，但是当图像质量要求达到了一定的程度时，对带宽的要求趋向归一化，即在高带宽（6M和以上）时，各种编码算法提供的图像质量趋同。</p></blockquote>

<p>同时由于H.264编解码对CPU处理能力的需求大幅度增加（相同带宽下，H.264编解码对CPU的占用率是H.263编解码的6倍以上），当前CPU处理能力难以支撑。</p>

<pre><code>1、H264并没有明确规定一个编解码器如何实现，只是规定了一个编码后的视频比特流的句法，和该比特流的解码方法，这个与MPEG 相似。

2、H264和以前的标准（如H261、H263、MPEG-1、MPEG-4）的编解码器实现流程没有太大区别，主要的不同在于各功能块的细节。

3、H264就是利用实现的复杂性获得压缩性能的明显改善。（至于复杂度的评估，以后会介绍）
</code></pre>

<h2>一、H.264的发展历史</h2>

<p>　　H.264在1997年ITU的视频编码专家组（Video Coding Experts Group）提出时被称为H.26L，在ITU与ISO合作研究后被称为MPEG4 Part10（MPEG4 AVC）或H.264（JVT）。</p>

<p>H.264的高级技术背景</p>

<p>　　H.264标准的主要目标是：与其它现有的视频编码标准相比，在相同的带宽下提供更加优秀的图象质量。</p>

<p>　　而，H.264与以前的国际标准如H.263和MPEG-4相比，最大的优势体现在以下四个方面：</p>

<pre><code>1．将每个视频帧分离成由像素组成的块，因此视频帧的编码处理的过程可以达到块的级别。

2．采用空间冗余的方法，对视频帧的一些原始块进行空间预测、转换、优化和熵编码（可变长编码）。

3．对连续帧的不同块采用临时存放的方法，这样，只需对连续帧中有改变的部分进行编码。该算法采用运动预测和运动补偿来完成。对某些特定的块，在一个或多个已经进行了编码的帧执行搜索来决定块的运动向量，并由此在后面的编码和解码中预测主块。

4．采用剩余空间冗余技术，对视频帧里的残留块进行编码。例如：对于源块和相应预测块的不同，再次采用转换、优化和熵编码。
</code></pre>

<p>H.264的特征和高级优势</p>

<p>　　H.264是国际标准化组织（ISO）和国际电信联盟（ITU）共同提出的继MPEG4之后的新一代数字视频压缩格式，它即保留了以往压缩技术的优点和精华又具有其他压缩技术无法比拟的许多优点。</p>

<pre><code>1．低码流（Low Bit Rate）：和MPEG2和MPEG4 ASP等压缩技术相比，在同等图像质量下，采用H.264技术压缩后的数据量只有MPEG2的1/8，MPEG4的1/3。显然，H.264压缩技术的采用将大大节省用户的下载时间和数据流量收费。

2．高质量的图象：H.264能提供连续、流畅的高质量图象（DVD质量）。

3．容错能力强：H.264提供了解决在不稳定网络环境下容易发生的丢包等错误的必要工具。

4．网络适应性强：H.264提供了网络适应层（Network Adaptation Layer）, 使得H.264的文件能容易地在不同网络上传输（例如互联网，CDMA，GPRS，WCDMA，CDMA2000等）。 
</code></pre>

<h2>二、H.264标准概述</h2>

<p>　　H.264和以前的标准一样，也是DPCM加变换编码的混合编码模式。但它采用“回归基本”的简洁设计，不用众多的选项，获得比H.263++好得多的压缩性能；加强了对各种信道的适应能力，采用“网络友好”的结构和语法，有利于对误码和丢包的处理；应用目标范围较宽，以满足不同速率、不同解析度以及不同传输（存储）场合的需求。</p>

<p>　　技术上，它集中了以往标准的优点，并吸收了标准制定中积累的经验。与H.263 v2(H.263+)或MPEG-4简单类(Simple Profile)相比，H.264在使用与上述编码方法类似的最佳编码器时，在大多数码率下最多可节省50%的码率。H.264在所有码率下都能持续提供较高的视频质量。H.264能工作在低延时模式以适应实时通信的应用(如视频会议)，同时又能很好地工作在没有延时限制的应用，如视频存储和以服务器为基础的视频流式应用。H.264提供包传输网中处理包丢失所需的工具，以及在易误码的无线网中处理比特误码的工具。</p>

<p>　　在系统层面上，H.264提出了一个新的概念，在视频编码层(Video Coding Layer, VCL)和网络提取层(Network Abstraction Layer, NAL)之间进行概念性分割，前者是视频内容的核心压缩内容之表述，后者是通过特定类型网络进行递送的表述，这样的结构便于信息的封装和对信息进行更好的优先级控制。H.264的系统编码框图如图1所示。</p>

<p>图1 H.264系统框图</p>

<h2>三、H.264标准的关键技术</h2>

<pre><code>  1．帧内预测编码
</code></pre>

<p>　　帧内编码用来缩减图像的空间冗余。为了提高H.264帧内编码的效率，在给定帧中充分利用相邻宏块的空间相关性，相邻的宏块通常含有相似的属性。因此，在对一给定宏块编码时，首先可以根据周围的宏块预测（典型的是根据左上角的宏块，因为此宏块已经被编码处理），然后对预测值与实际值的差值进行编码，这样，相对于直接对该帧编码而言，可以大大减小码率。</p>

<p>　　H.264提供6种模式进行4×4像素宏块预测，包括1种直流预测和5种方向预测，如图2所示。在图中，相邻块的A到I共9个像素均已经被编码，可以被用以预测，如果我们选择模式4，那么，a、b、c、d4个像素被预测为与E相等的值，e、f、g、h4个像素被预测为与F相等的值，对于图像中含有很少空间信息的平坦区，H.264也支持16×16的帧内编码。</p>

<p>图2 帧内编码模式</p>

<h6>2．帧间预测编码</h6>

<p>　　帧间预测编码利用连续帧中的时间冗余来进行运动估计和补偿。H.264的运动补偿支持以往的视频编码标准中的大部分关键特性，而且灵活地添加了更多的功能，除了支持P帧、B帧外，H.264还支持一种新的流间传送帧——SP帧。码流中包含SP帧后，能在有类似内容但有不同码率的码流之间快速切换，同时支持随机接入和快速回放模式。</p>

<p>　　H.264的运动估计有以下4个特性。</p>

<p>　　(1) 不同大小和形状的宏块分割</p>

<pre><code>对每一个16×16像素宏块的运动补偿可以采用不同的大小和形状，H.264支持7种模式，如图4所示。小块模式的运动补偿为运动详细信息的处理提高了性能，减少了方块效应，提高了图像的质量。
</code></pre>

<p>　　(2) 高精度的亚像素运动补偿</p>

<pre><code>　　在H.263中采用的是半像素精度的运动估计，而在H.264中可以采用1/4或者1/8像素精度的运动估值。在要求相同精度的情况下，H.264使用1/4或者1/8像素精度的运动估计后的残差要比H.263采用半像素精度运动估计后的残差来得小。这样在相同精度下，H.264在帧间编码中所需的码率更小。
</code></pre>

<p>　　(3) 多帧预测</p>

<pre><code>　　H.264提供可选的多帧预测功能，在帧间编码时，可选5个不同的参考帧，提供了更好的纠错性能，这样更可以改善视频图像质量。这一特性主要应用于以下场合：周期性的运动、平移运动、在两个不同的场景之间来回变换摄像机的镜头。
</code></pre>

<p>　　(4) 去块滤波器</p>

<pre><code>　　H.264定义了自适应去除块效应的滤波器，这可以处理预测环路中的水平和垂直块边缘，大大减少了方块效应。
</code></pre>

<h6>3．整数变换</h6>

<p>　　在变换方面，H.264使用了基于4×4像素块的类似于DCT的变换，但使用的是以整数为基础的空间变换，不存在反变换，因为取舍而存在误差的问题，变换矩阵如图5所示。与浮点运算相比，整数DCT变换会引起一些额外的误差，但因为DCT变换后的量化也存在量化误差，与之相比，整数DCT变换引起的量化误差影响并不大。此外，整数DCT变换还具有减少运算量和复杂度，有利于向定点DSP移植的优点。</p>

<h6>4．量化</h6>

<p>　　H.264中可选32种不同的量化步长，这与H.263中有31个量化步长很相似，但是在H.264中，步长是以12.5%的复合率递进的，而不是一个固定常数。
在H.264中，变换系数的读出方式也有两种：之字形(Zigzag)扫描和双扫描。大多数情况下使用简单的之字形扫描；双扫描仅用于使用较小量化级的块内，有助于提高编码效率。</p>

<h6>5．熵编码</h6>

<p>　　视频编码处理的最后一步就是熵编码，在H.264中采用了两种不同的熵编码方法：通用可变长编码（UVLC）和基于文本的自适应二进制算术编码（CABAC）。
在H.263等标准中，根据要编码的数据类型如变换系数、运动矢量等，采用不同的VLC码表。H.264中的UVLC码表提供了一个简单的方法，不管符号表述什么类型的数据，都使用统一变字长编码表。其优点是简单；缺点是单一的码表是从概率统计分布模型得出的，没有考虑编码符号间的相关性，在中高码率时效果不是很好。
因此，H.264中还提供了可选的CABAC方法。算术编码使编码和解码两边都能使用所有句法元素(变换系数、运动矢量)的概率模型。为了提高算术编码的效率，通过内容建模的过程，使基本概率模型能适应随视频帧而改变的统计特性。内容建模提供了编码符号的条件概率估计，利用合适的内容模型，存在于符号间的相关性可以通过选择目前要编码符号邻近的已编码符号的相应概率模型来去除，不同的句法元素通常保持不同的模型。</p>

<h2>四、H.264在视频会议中的应用</h2>

<p>　　目前，大多数的视频会议系统均采用H.261或H.263视频编码标准，而H.264的出现，使得在同等速率下，H.264能够比H.263减小50%的码率。也就是说，用户即使是只利用 384kbit/s的带宽，就可以享受H.263下高达 768kbit/s的高质量视频服务。H.264 不但有助于节省庞大开支，还可以提高资源的使用效率，同时令达到商业质量的视频会议服务拥有更多的潜在客户。</p>

<p>　　目前，已经有少数几家厂商的视频会议产品支持H.264协议，厂商们致力于普及H.264这个全新的业界标准。随着其它视频会议方案厂商陆续效仿他们的做法，我们必将能全面体验H.264视频服务的优势。
　　
　　
　　
　　</p>

<hr />

<pre><code>Q Q：2211523682/790806573

微信：18370997821/13148454507

微博WB:http://weibo.com/u/3288975567?is_hot=1

git博文：http://al1020119.github.io/

github：https://github.com/al1020119
</code></pre>

<p><img src="http://al1020119.github.io/images/iCocosCoder.jpg" title="Caption" ></p>

<p><img src="http://al1020119.github.io/images/iCocosPublic.jpg" title="Caption" ><br/>
　　</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[直播-音频编解码ACC]]></title>
    <link href="http://al1020119.github.io/blog/2016/09/03/zhi-bo-yin-pin-bian-jie-ma-acc/"/>
    <updated>2016-09-03T14:41:15+08:00</updated>
    <id>http://al1020119.github.io/blog/2016/09/03/zhi-bo-yin-pin-bian-jie-ma-acc</id>
    <content type="html"><![CDATA[<ul>
<li><p>AAC是高级音频编码（Advanced Audio Coding）的缩写，出现于1997年，最初是基于MPEG-2的音频编码技术。由Fraunhofer IIS、Dolby Laboratories、AT&amp;T、Sony等公司共同开发，目的是取代MP3格式。2000年，MPEG-4标准出台，AAC重新集成了其它技术（PS,SBR），为区别于传统的MPEG-2 AAC，故含有SBR或PS特性的AAC又称为MPEG-4 AAC。</p></li>
<li><p>AAC是新一代的音频有损压缩技术，它通过一些附加的编码技术（比如PS,SBR等），衍生出了LC-AAC,HE-AAC,HE-AACv2三种主要的编码，LC-AAC就是比较传统的AAC，相对而言，主要用于中高码率(>=80Kbps)，HE-AAC(相当于AAC+SBR)主要用于中低码(&lt;=80Kbps)，而新近推出的HE-AACv2(相当于AAC+SBR+PS)主要用于低码率(&lt;=48Kbps）,事实上大部分编码器设成&lt;=48Kbps自动启用PS技术，而>48Kbps就不加PS,就相当于普通的HE-AAC。</p></li>
</ul>


<p>ACC是更优于MP3的音频格式。</p>

<pre><code>AAC可以在对比MP3文件缩小30%的前题下提供更好的音质。
</code></pre>

<blockquote><p>AAC（Advanced Audio Coding），中文称为“高级音频编码”，出现于1997年，最初是基于MPEG-2的音频编码技术，目的是取代MP3格式。2000年，MPEG-4标准出台，AAC重新集成了其特性，加入了SBR技术和PS技术，为区别于传统的MPEG-2 AAC，故含有SBR或PS特性的AAC又称为MPEG-4 AAC。
作为一种高压缩比的音频压缩算法，远胜MP3；在音质方面，由于采用多声道，和使用低复杂性的描述方式，使其比几乎所有的传统编码方式在同规格的情况下更胜一筹。一般来说，AAC可以在对比MP3文件缩小30%的前题下提供更好的音质。AAC是目前唯一一个，能够在所有的EBU试听测试项目的获得“优秀”的网络广播格式。</p></blockquote>

<p>AAC与MP3规格对比</p>

<pre><code>比特率：AAC - 最高超过400kbps / MP3 - 32~320kbps
采样率：AAC - 最高96kHz / MP3 - 最高48kHz
声道数：AAC - （5.1）六声道 / MP3 - 两声道
采样精度：AAC - 最高32bit / MP3 - 最高16bit
</code></pre>

<p>iTunes Plus优势简单总结</p>

<pre><code>1、更高的音质，更小的容量。（256Kbps的iTunes Plus AAC优于320Kbps的MP3，接近无损。）
2、正确完整无杂质的曲目ID3信息，内嵌官方唱片封面。
3、正版身份，值得收藏。
</code></pre>

<hr />

<pre><code>Q Q：2211523682/790806573

微信：18370997821/13148454507

微博WB:http://weibo.com/u/3288975567?is_hot=1

git博文：http://al1020119.github.io/

github：https://github.com/al1020119
</code></pre>

<p><img src="http://al1020119.github.io/images/iCocosCoder.jpg" title="Caption" ></p>

<p><img src="http://al1020119.github.io/images/iCocosPublic.jpg" title="Caption" ></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[关于直播]]></title>
    <link href="http://al1020119.github.io/blog/2016/09/01/guan-yu-zhi-bo/"/>
    <updated>2016-09-01T14:39:39+08:00</updated>
    <id>http://al1020119.github.io/blog/2016/09/01/guan-yu-zhi-bo</id>
    <content type="html"><![CDATA[<p><img src="http://al1020119.github.io/images/zhibo001.png" title="Caption" ></p>

<p>关于直播，这里先推荐几篇相关的文字，都是非常经典的，虽然有些难，直播本来就很难，不难还叫直播吗？是吧！</p>

<p><a href="http://www.zhihu.com/question/42162310">知乎经典问答直播：如何搭建一个完整的视频直播系统？</a></p>

<h4>关于直播,所有的技术细节都在这里了</h4>

<p><a href="http://mini.eastday.com/a/160511190456604-2.html">http://mini.eastday.com/a/160511190456604-2.html</a></p>

<p><a href="http://toutiao.com/i6283358665676161538/">http://toutiao.com/i6283358665676161538/</a></p>

<p><a href="http://www.csdn.net/article/a/2016-05-20/15821126">http://www.csdn.net/article/a/2016-05-20/15821126</a></p>

<p><a href="http://mini.eastday.com/a/160523102622452-4.html">http://mini.eastday.com/a/160523102622452-4.html</a></p>

<p>直播其实之前好早就存在，只是真正火起来是在今年上半年，一下子各大公司都打算开始着手直播，当然直播虽然赚钱，但是重点是得先烧钱 ，而且不是一般的App那么烧钱。</p>

<p>后面的文章系列就以直播为主题开始摘取和总结一系列的相关技术与知识。</p>

<p><img src="http://al1020119.github.io/images/zhibo002.png" title="Caption" ></p>

<hr />

<pre><code>Q Q：2211523682/790806573

微信：18370997821/13148454507

微博WB:http://weibo.com/u/3288975567?is_hot=1

git博文：http://al1020119.github.io/

github：https://github.com/al1020119
</code></pre>

<p><img src="http://al1020119.github.io/images/iCocosCoder.jpg" title="Caption" ></p>

<p><img src="http://al1020119.github.io/images/iCocosPublic.jpg" title="Caption" ></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[多线程安全？应该不止这些😂！]]></title>
    <link href="http://al1020119.github.io/blog/2016/08/31/duo-xian-cheng-an-quan-%3Fying-gai-bu-zhi-zhe-xie-%3F!/"/>
    <updated>2016-08-31T12:33:27+08:00</updated>
    <id>http://al1020119.github.io/blog/2016/08/31/duo-xian-cheng-an-quan-?ying-gai-bu-zhi-zhe-xie-?!</id>
    <content type="html"><![CDATA[<ul>
<li>前言</li>
<li>介绍与使用</li>
<li>总结</li>
<li>其他实战使用</li>
</ul>


<h2>一、前言</h2>

<p>前段时间看了几个开源项目，发现他们保持线程同步的方式各不相同，有@synchronized、NSLock、dispatch_semaphore、NSCondition、pthread_mutex、OSSpinLock。后来网上查了一下，发现他们的实现机制各不相同，性能也各不一样。不好意思，我们平常使用最多的@synchronized是性能最差的。下面我们先分别介绍每个加锁方式的使用，在使用一个案例来对他们进行性能对比。</p>

<h2>二、介绍与使用</h2>

<!--more-->


<h4>2.1、@synchronized</h4>

<pre><code>    NSObject *obj = [[NSObject alloc] init];



    dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{

        @synchronized(obj) {

            NSLog(@"需要线程同步的操作1 开始");

            sleep(3);

            NSLog(@"需要线程同步的操作1 结束");

        }

    });



    dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{

        sleep(1);

        @synchronized(obj) {

            NSLog(@"需要线程同步的操作2");

        }

    });
</code></pre>

<p>@synchronized(obj)指令使用的obj为该锁的唯一标识，只有当标识相同时，才为满足互斥，如果线程2中的@synchronized(obj)改为@synchronized(self),刚线程2就不会被阻塞，@synchronized指令实现锁的优点就是我们不需要在代码中显式的创建锁对象，便可以实现锁的机制，但作为一种预防措施，@synchronized块会隐式的添加一个异常处理例程来保护代码，该处理例程会在异常抛出的时候自动的释放互斥锁。所以如果不想让隐式的异常处理例程带来额外的开销，你可以考虑使用锁对象。</p>

<p>上面结果的执行结果为：</p>

<pre><code>2016-06-29 20:48:35.747 SafeMultiThread[35945:580107] 需要线程同步的操作1 开始

2016-06-29 20:48:38.748 SafeMultiThread[35945:580107] 需要线程同步的操作1 结束

2016-06-29 20:48:38.749 SafeMultiThread[35945:580118] 需要线程同步的操作2
</code></pre>

<h4>2.2、dispatch_semaphore</h4>

<pre><code>dispatch_semaphore_t signal = dispatch_semaphore_create(1);

    dispatch_time_t overTime = dispatch_time(DISPATCH_TIME_NOW, 3 * NSEC_PER_SEC);



    dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{

        dispatch_semaphore_wait(signal, overTime);

            NSLog(@"需要线程同步的操作1 开始");

            sleep(2);

            NSLog(@"需要线程同步的操作1 结束");

        dispatch_semaphore_signal(signal);

    });



    dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{

        sleep(1);

        dispatch_semaphore_wait(signal, overTime);

            NSLog(@"需要线程同步的操作2");

        dispatch_semaphore_signal(signal);

    });
</code></pre>

<p>dispatch_semaphore是GCD用来同步的一种方式，与他相关的共有三个函数，分别是dispatch_semaphore_create，dispatch_semaphore_signal，dispatch_semaphore_wait。</p>

<h6>（1）dispatch_semaphore_create的声明为：</h6>

<pre><code>dispatch_semaphore_t dispatch_semaphore_create(long value);
</code></pre>

<p>传入的参数为long，输出一个dispatch_semaphore_t类型且值为value的信号量。</p>

<p>值得注意的是，这里的传入的参数value必须大于或等于0，否则dispatch_semaphore_create会返回NULL。</p>

<h6>（2）dispatch_semaphore_signal的声明为：</h6>

<pre><code>long dispatch_semaphore_signal(dispatch_semaphore_t dsema)
</code></pre>

<p>这个函数会使传入的信号量dsema的值加1；</p>

<h6>(3) dispatch_semaphore_wait的声明为：</h6>

<pre><code>long dispatch_semaphore_wait(dispatch_semaphore_t dsema, dispatch_time_t timeout)；
</code></pre>

<p>这个函数会使传入的信号量dsema的值减1；这个函数的作用是这样的，如果dsema信号量的值大于0，该函数所处线程就继续执行下面的语句，并且将信号量的值减1；如果desema的值为0，那么这个函数就阻塞当前线程等待timeout（注意timeout的类型为dispatch_time_t，不能直接传入整形或float型数），如果等待的期间desema的值被dispatch_semaphore_signal函数加1了，且该函数（即dispatch_semaphore_wait）所处线程获得了信号量，那么就继续向下执行并将信号量减1。如果等待期间没有获取到信号量或者信号量的值一直为0，那么等到timeout时，其所处线程自动执行其后语句。</p>

<p>dispatch_semaphore 是信号量，但当信号总量设为 1 时也可以当作锁来。在没有等待情况出现时，它的性能比 pthread_mutex 还要高，但一旦有等待情况出现时，性能就会下降许多。相对于 OSSpinLock 来说，它的优势在于等待时不会消耗 CPU 资源。</p>

<p>如上的代码，如果超时时间overTime设置成>2，可完成同步操作。如果overTime</p>

<p>上面代码的执行结果为：</p>

<pre><code>2016-06-29 20:47:52.324 SafeMultiThread[35945:579032] 需要线程同步的操作1 开始

2016-06-29 20:47:55.325 SafeMultiThread[35945:579032] 需要线程同步的操作1 结束

2016-06-29 20:47:55.326 SafeMultiThread[35945:579033] 需要线程同步的操作2
</code></pre>

<p>如果把超时时间设置为</p>

<pre><code>2016-06-30 18:53:24.049 SafeMultiThread[30834:434334] 需要线程同步的操作1 开始

2016-06-30 18:53:25.554 SafeMultiThread[30834:434332] 需要线程同步的操作2

2016-06-30 18:53:26.054 SafeMultiThread[30834:434334] 需要线程同步的操作1 结束
</code></pre>

<h4>2.3、NSLock</h4>

<pre><code>   NSLock *lock = [[NSLock alloc] init];

    dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{

        //[lock lock];

        [lock lockBeforeDate:[NSDate date]];

            NSLog(@"需要线程同步的操作1 开始");

            sleep(2);

            NSLog(@"需要线程同步的操作1 结束");

        [lock unlock];



    });



    dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{

        sleep(1);

        if ([lock tryLock]) {//尝试获取锁，如果获取不到返回NO，不会阻塞该线程

            NSLog(@"锁可用的操作");

            [lock unlock];

        }else{

            NSLog(@"锁不可用的操作");

        }



        NSDate *date = [[NSDate alloc] initWithTimeIntervalSinceNow:3];

        if ([lock lockBeforeDate:date]) {//尝试在未来的3s内获取锁，并阻塞该线程，如果3s内获取不到恢复线程, 返回NO,不会阻塞该线程

            NSLog(@"没有超时，获得锁");

            [lock unlock];

        }else{

            NSLog(@"超时，没有获得锁");

        }



    });
</code></pre>

<p>NSLock是Cocoa提供给我们最基本的锁对象，这也是我们经常所使用的，除lock和unlock方法外，NSLock还提供了tryLock和lockBeforeDate:两个方法，前一个方法会尝试加锁，如果锁不可用(已经被锁住)，刚并不会阻塞线程，并返回NO。lockBeforeDate:方法会在所指定Date之前尝试加锁，如果在指定时间之前都不能加锁，则返回NO。</p>

<p>上面代码的执行结果为：</p>

<pre><code>2016-06-29 20:45:08.864 SafeMultiThread[35911:575795] 需要线程同步的操作1 开始

2016-06-29 20:45:09.869 SafeMultiThread[35911:575781] 锁不可用的操作

2016-06-29 20:45:10.869 SafeMultiThread[35911:575795] 需要线程同步的操作1 结束

2016-06-29 20:45:10.870 SafeMultiThread[35911:575781] 没有超时，获得锁
</code></pre>

<p>源码定义如下：</p>

<pre><code>@protocol NSLocking



- (void)lock;

- (void)unlock;



@end



@interface NSLock : NSObject  {

&lt;a href="http://www.jobbole.com/members/kaishu6296"&gt;@private&lt;/a&gt;

    void *_priv;

}



- (BOOL)tryLock;

- (BOOL)lockBeforeDate:(NSDate *)limit;



@property (nullable, copy) NSString *name NS_AVAILABLE(10_5, 2_0);



@end
</code></pre>

<h4>2.4、NSRecursiveLock递归锁</h4>

<pre><code>    //NSLock *lock = [[NSLock alloc] init];

    NSRecursiveLock *lock = [[NSRecursiveLock alloc] init];



    dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{



        static void (^RecursiveMethod)(int);



        RecursiveMethod = ^(int value) {



            [lock lock];

            if (value &gt; 0) {



                NSLog(@"value = %d", value);

                sleep(1);

                RecursiveMethod(value - 1);

            }

            [lock unlock];

        };



        RecursiveMethod(5);

    });
</code></pre>

<p>NSRecursiveLock实际上定义的是一个递归锁，这个锁可以被同一线程多次请求，而不会引起死锁。这主要是用在循环或递归操作中。</p>

<p>这段代码是一个典型的死锁情况。在我们的线程中，RecursiveMethod是递归调用的。所以每次进入这个block时，都会去加一次锁，而从第二次开始，由于锁已经被使用了且没有解锁，所以它需要等待锁被解除，这样就导致了死锁，线程被阻塞住了。调试器中会输出如下信息：</p>

<pre><code>2016-06-30 19:08:06.393 SafeMultiThread[30928:449008] value = 5

2016-06-30 19:08:07.399 SafeMultiThread[30928:449008] -[NSLock lock]: deadlock ( ‘(null)’)

2016-06-30 19:08:07.399 SafeMultiThread[30928:449008] Break on _NSLockError() to debug.
</code></pre>

<p>在这种情况下，我们就可以使用NSRecursiveLock。它可以允许同一线程多次加锁，而不会造成死锁。递归锁会跟踪它被lock的次数。每次成功的lock都必须平衡调用unlock操作。只有所有达到这种平衡，锁最后才能被释放，以供其它线程使用。</p>

<p>如果我们将NSLock代替为NSRecursiveLock，上面代码则会正确执行。</p>

<pre><code>2016-06-30 19:09:41.414 SafeMultiThread[30949:450684] value = 5

2016-06-30 19:09:42.418 SafeMultiThread[30949:450684] value = 4

2016-06-30 19:09:43.419 SafeMultiThread[30949:450684] value = 3

2016-06-30 19:09:44.424 SafeMultiThread[30949:450684] value = 2

2016-06-30 19:09:45.426 SafeMultiThread[30949:450684] value = 1
</code></pre>

<p>如果需要其他功能，源码定义如下：</p>

<pre><code>@interface NSRecursiveLock : NSObject  {

&lt;a href="http://www.jobbole.com/members/kaishu6296"&gt;@private&lt;/a&gt;

    void *_priv;

}



- (BOOL)tryLock;

- (BOOL)lockBeforeDate:(NSDate *)limit;



@property (nullable, copy) NSString *name NS_AVAILABLE(10_5, 2_0);



@end
</code></pre>

<h2>2.5、NSConditionLock条件锁</h2>

<pre><code>    NSMutableArray *products = [NSMutableArray array];



    NSInteger HAS_DATA = 1;

    NSInteger NO_DATA = 0;



    dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{

        while (1) {

            [lock lockWhenCondition:NO_DATA];

            [products addObject:[[NSObject alloc] init]];

            NSLog(@"produce a product,总量:%zi",products.count);

            [lock unlockWithCondition:HAS_DATA];

            sleep(1);

        }



    });



    dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{

        while (1) {

            NSLog(@"wait for product");

            [lock lockWhenCondition:HAS_DATA];

            [products removeObjectAtIndex:0];

            NSLog(@"custome a product");

            [lock unlockWithCondition:NO_DATA];

        }



    });
</code></pre>

<p>当我们在使用多线程的时候，有时一把只会lock和unlock的锁未必就能完全满足我们的使用。因为普通的锁只能关心锁与不锁，而不在乎用什么钥匙才能开锁，而我们在处理资源共享的时候，多数情况是只有满足一定条件的情况下才能打开这把锁：</p>

<p>在线程1中的加锁使用了lock，所以是不需要条件的，所以顺利的就锁住了，但在unlock的使用了一个整型的条件，它可以开启其它线程中正在等待这把钥匙的临界地，而线程2则需要一把被标识为2的钥匙，所以当线程1循环到最后一次的时候，才最终打开了线程2中的阻塞。但即便如此，NSConditionLock也跟其它的锁一样，是需要lock与unlock对应的，只是lock,lockWhenCondition:与unlock，unlockWithCondition:是可以随意组合的，当然这是与你的需求相关的。</p>

<p>上面代码执行结果如下：</p>

<pre><code>2016-06-30 20:31:58.699 SafeMultiThread[31282:521698] wait for product

2016-06-30 20:31:58.699 SafeMultiThread[31282:521708] produce a product,总量:1

2016-06-30 20:31:58.700 SafeMultiThread[31282:521698] custome a product

2016-06-30 20:31:58.700 SafeMultiThread[31282:521698] wait for product

2016-06-30 20:31:59.705 SafeMultiThread[31282:521708] produce a product,总量:1

2016-06-30 20:31:59.706 SafeMultiThread[31282:521698] custome a product

2016-06-30 20:31:59.706 SafeMultiThread[31282:521698] wait for product

2016-06-30 20:32:00.707 SafeMultiThread[31282:521708] produce a product,总量:1

2016-06-30 20:32:00.708 SafeMultiThread[31282:521698] custome a product
</code></pre>

<p>如果你需要其他功能，源码定义如下：</p>

<pre><code>@interface NSConditionLock : NSObject  {

&lt;a href="http://www.jobbole.com/members/kaishu6296"&gt;@private&lt;/a&gt;

    void *_priv;

}



- (instancetype)initWithCondition:(NSInteger)condition NS_DESIGNATED_INITIALIZER;



@property (readonly) NSInteger condition;

- (void)lockWhenCondition:(NSInteger)condition;

- (BOOL)tryLock;

- (BOOL)tryLockWhenCondition:(NSInteger)condition;

- (void)unlockWithCondition:(NSInteger)condition;

- (BOOL)lockBeforeDate:(NSDate *)limit;

- (BOOL)lockWhenCondition:(NSInteger)condition beforeDate:(NSDate *)limit;



@property (nullable, copy) NSString *name NS_AVAILABLE(10_5, 2_0);



@end
</code></pre>

<h4>2.6、NSCondition</h4>

<pre><code>   NSCondition *condition = [[NSCondition alloc] init];



    NSMutableArray *products = [NSMutableArray array];



    dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{

        while (1) {

            [condition lock];

            if ([products count] == 0) {

                NSLog(@"wait for product");

                [condition wait];

            }

            [products removeObjectAtIndex:0];

            NSLog(@"custome a product");

            [condition unlock];

        }



    });



    dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{

        while (1) {

            [condition lock];

            [products addObject:[[NSObject alloc] init]];

            NSLog(@"produce a product,总量:%zi",products.count);

            [condition signal];

            [condition unlock];

            sleep(1);

        }



    });
</code></pre>

<h6>一种最基本的条件锁。手动控制线程wait和signal。</h6>

<p>[condition lock];一般用于多线程同时访问、修改同一个数据源，保证在同一时间内数据源只被访问、修改一次，其他线程的命令需要在lock 外等待，只到unlock ，才可访问</p>

<pre><code>[condition unlock];与lock 同时使用



[condition wait];让当前线程处于等待状态



[condition signal];CPU发信号告诉线程不用在等待，可以继续执行
</code></pre>

<p>上面代码执行结果如下：</p>

<pre><code>2016-06-30 20:21:25.295 SafeMultiThread[31256:513991] wait for product

2016-06-30 20:21:25.296 SafeMultiThread[31256:513994] produce a product,总量:1

2016-06-30 20:21:25.296 SafeMultiThread[31256:513991] custome a product

2016-06-30 20:21:25.297 SafeMultiThread[31256:513991] wait for product

2016-06-30 20:21:26.302 SafeMultiThread[31256:513994] produce a product,总量:1

2016-06-30 20:21:26.302 SafeMultiThread[31256:513991] custome a product

2016-06-30 20:21:26.302 SafeMultiThread[31256:513991] wait for product

2016-06-30 20:21:27.307 SafeMultiThread[31256:513994] produce a product,总量:1

2016-06-30 20:21:27.308 SafeMultiThread[31256:513991] custome a product
</code></pre>

<h4>2.7、pthread_mutex</h4>

<pre><code>    __block pthread_mutex_t theLock;

    pthread_mutex_init(&amp;theLock, NULL);



    dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{

            pthread_mutex_lock(&amp;theLock);

            NSLog(@"需要线程同步的操作1 开始");

            sleep(3);

            NSLog(@"需要线程同步的操作1 结束");

            pthread_mutex_unlock(&amp;theLock);



    });



    dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{

            sleep(1);

            pthread_mutex_lock(&amp;theLock);

            NSLog(@"需要线程同步的操作2");

            pthread_mutex_unlock(&amp;theLock);



    });
</code></pre>

<p>c语言定义下多线程加锁方式。</p>

<pre><code>1：pthread_mutex_init(pthread_mutex_t mutex,const pthread_mutexattr_t attr);

初始化锁变量mutex。attr为锁属性，NULL值为默认属性。

2：pthread_mutex_lock(pthread_mutex_t mutex);加锁

3：pthread_mutex_tylock(*pthread_mutex_t *mutex);加锁，但是与2不一样的是当锁已经在使用的时候，返回为EBUSY，而不是挂起等待。

4：pthread_mutex_unlock(pthread_mutex_t *mutex);释放锁

5：pthread_mutex_destroy(pthread_mutex_t* mutex);使用完后释放
</code></pre>

<p>代码执行操作结果如下：</p>

<pre><code>2016-06-30 21:13:32.440 SafeMultiThread[31429:548869] 需要线程同步的操作1 开始

2016-06-30 21:13:35.445 SafeMultiThread[31429:548869] 需要线程同步的操作1 结束

2016-06-30 21:13:35.446 SafeMultiThread[31429:548866] 需要线程同步的操作2
</code></pre>

<h4>2.8、pthread_mutex(recursive)</h4>

<p>这是pthread_mutex为了防止在递归的情况下出现死锁而出现的递归锁。作用和NSRecursiveLock递归锁类似。</p>

<p>如果使用pthread_mutex_init(&amp;theLock, NULL);初始化锁的话，上面的代码会出现死锁现象。如果使用递归锁的形式，则没有问题。</p>

<h4>2.9、OSSpinLock</h4>

<p>OSSpinLock 自旋锁，性能最高的锁。原理很简单，就是一直 do while 忙等。它的缺点是当等待时会消耗大量 CPU 资源，所以它不适用于较长时间的任务。 不过最近YY大神在自己的博客不再安全的 OSSpinLock中说明了OSSpinLock已经不再安全，请大家谨慎使用。</p>

<p>三、性能对比</p>

<p>对以上各个锁进行1000000此的加锁解锁的空操作时间如下：</p>

<pre><code>OSSpinLock: 46.15 ms

dispatch_semaphore: 56.50 ms

pthread_mutex: 178.28 ms

NSCondition: 193.38 ms

NSLock: 175.02 ms

pthread_mutex(recursive): 172.56 ms

NSRecursiveLock: 157.44 ms

NSConditionLock: 490.04 ms

@synchronized: 371.17 ms
</code></pre>

<h2>三.总的来说：</h2>

<ul>
<li><p>OSSpinLock和dispatch_semaphore的效率远远高于其他。</p></li>
<li><p>@synchronized和NSConditionLock效率较差。</p></li>
<li><p>鉴于OSSpinLock的不安全，所以我们在开发中如果考虑性能的话，建议使用dispatch_semaphore。</p></li>
<li><p>如果不考虑性能，只是图个方便的话，那就使用@synchronized。</p>

<blockquote><p> 总感觉这个标题怪怪的,但是我自身词汇有限,也不知道怎么描述好了.用一个简单的需求来解释一下吧.我之前开发的一个项目,需要向服务器上传图片,多图片上传,然后每次上传之后会返回一个图片的AID, 然后需要所有图片上传完成之后, 拿着一个全是AID的数组作为参数进行另一个异步请求&hellip;好吧,我感觉又绕了&hellip;</p></blockquote>

<p>  前几天,我在一个技术交流圈,看到一个朋友去JINGDONG的面试题, 其中一个题目的描述是:有a、b、c、d 4个异步请求，如何判断a、b、c、d都完成执行？, 跟我上面的需求大同小异.</p>

<p>  所以在这儿,我把我工作中曾经用到过的一些方法做一个小的总结,有遗漏的或者错误的地方,请大家留意指正,非常感谢哈!!!</p>

<p>  特别注意:所有的代码都基于JINGDONG这道面试题, 不过我只打印了A和B而已..</p></li>
</ul>


<h2>四.实战应用</h2>

<p>我们公司App前段时间刚好有一个功能需求，就是关于发动态的时候图片上传的需求。以前一般来说的话，我们是讲所有图片打包一起发给服务器，但是这依稀不一样的是，必须每一张每一张的传，具体为什么老大说了一各位自己体会。</p>

<p>需求是：</p>

<ul>
<li>1：每次上传图片的时候必须一张一张的传。</li>
<li>2：上传完一张之后服务器返回给我们一个url，把他存起来</li>
<li>3：全部传完之后再把所有存起来的url一起通过json格式发送给服务器</li>
</ul>


<p>这里试了各种方法，问了各种大牛都没找到好的方法，只能说有些能解决，但是达不到非常满意的效果。这里总结一下常见的使用。</p>

<ol>
<li><p>RunLoop</p>

<p> 需要注意一点: 这儿用的是NSURLSession, 不是AFN, 所以block里面的线程是子线程,不是主线程, 不能直接使用CFRunLoopGetCurrent</p>

<pre><code> CFRunLoopGetCurrent : Returns the CFRunLoop object for the current thread.
 CFRunLoopGetMain: Returns the main CFRunLoop object.

 NSURLSessionDataTask *task = [[NSURLSession sharedSession] dataTaskWithRequest:[NSURLRequest requestWithURL:[NSURL URLWithString:@"http://www.baidu.com"]] completionHandler:^(NSData * _Nullable data, NSURLResponse * _Nullable response, NSError * _Nullable error) {
         NSLog(@"A");
         CFRunLoopStop(CFRunLoopGetMain());
     }] ;
     [task resume];
  CFRunLoopRun();
  NSLog(@"B");
</code></pre></li>
<li><p>GCD的group</p>

<p> dispatch_group_notify就是需要等queue里面的子线程都执行完毕之后才会执行
 这种方法比较常见, 不多说</p>

<pre><code> dispatch_group_t group = dispatch_group_create();
     dispatch_queue_t queue = dispatch_get_global_queue(0, 0);
     dispatch_group_async(group, queue, ^{
         NSLog(@"A");
     });
     dispatch_group_notify(group, dispatch_get_main_queue(), ^{
         NSLog(@"B");
     });
</code></pre></li>
<li><p>dispatch_barrier_async</p>

<p> barrier的中文意思就是障碍, 屏障
 一般使用dispatch_barrier_async, 会让barrier之前的线程执行完成之后才会执行barrier后面的操作</p>

<pre><code>  dispatch_queue_t queue =  dispatch_queue_create(0, DISPATCH_QUEUE_CONCURRENT);
     dispatch_async(queue, ^{
         NSLog(@"A");
     });
     dispatch_async(queue, ^{
         NSLog(@"C");
     });
     dispatch_barrier_async(queue, ^{
         NSLog(@"拿到了A的值");
     });

     dispatch_async(queue, ^{
         NSLog(@"D");
     });
     dispatch_async(queue, ^{
         NSLog(@"E");
     });dispatch_async(queue, ^{
         NSLog(@"F");
     });
</code></pre></li>
</ol>


<p>4.NSOperationQueue</p>

<p>   主要就是用到NSOperationQueue的一个对象方法-addDependency
   需要注意一点: waitUntilFinished如果是YES,必须等到queue中所有Operation执行完毕之后, 才会打印HAHA, 反之的话, HAHA的打印顺序是随机的了,就看哪个线程跑得快了&hellip;</p>

<pre><code>NSOperationQueue *queue = [[NSOperationQueue alloc] init];
    NSBlockOperation *p1 = [NSBlockOperation blockOperationWithBlock:^{
        NSLog(@"A");
    }];
    NSBlockOperation *p2 = [NSBlockOperation blockOperationWithBlock:^{
        NSLog(@"B");
    }];
    NSBlockOperation *p3 = [NSBlockOperation blockOperationWithBlock:^{
        NSLog(@"C");
    }];
    [p3 addDependency:p1];
    [p3 addDependency:p2];
    // waitUntilFinished是否阻塞当前线程
    [queue addOperations:@[p1,p2,p3] waitUntilFinished:NO];

    // 如果是NO,那么这行打印就是随机的, 反之就是等A,B,C都打印完之后才执行
    NSLog(@"HAHA");
</code></pre>

<ol>
<li><p>使用AFN中的batchOfRequestOperations</p>

<p> 这个和GCD一样, 我工作中比较常用的一种方法
 batchOfRequestOperations方法其实是AFHTTPRequestOperation的父类AFURLConnectionOperation的一个方法.
 这儿的waitUntilFinished同4. NSOperationQueue
 progressBlock一般用在进度计算中, 比如执行了多少百分比, 可以自定义一些炫酷动画</p>

<pre><code> AFHTTPRequestOperation *queue = [[AFHTTPRequestOperation alloc] initWithRequest:[NSURLRequest requestWithURL:[NSURL URLWithString:@"http://www.baidu.com"]]];
     [queue setCompletionBlockWithSuccess:^(AFHTTPRequestOperation *operation, id responseObject) {
         NSLog(@"A");
     } failure:^(AFHTTPRequestOperation *operation, NSError *error) {
         NSLog(@"A");
     }];
     [queue resume];

 AFHTTPRequestOperation *queue2 = [[AFHTTPRequestOperation alloc] initWithRequest:[NSURLRequest requestWithURL:[NSURL URLWithString:@"http://www.baidu.com"]]];
 [queue2 setCompletionBlockWithSuccess:^(AFHTTPRequestOperation *operation, id responseObject) {
     NSLog(@"B");
 } failure:^(AFHTTPRequestOperation *operation, NSError *error) {
     NSLog(@"B");
 }];
 [queue2 resume];

 NSArray *operations = [AFHTTPRequestOperation batchOfRequestOperations:@[queue, queue2] progressBlock:^(NSUInteger numberOfFinishedOperations, NSUInteger totalNumberOfOperations) {
     NSLog(@"%ld/%ld", numberOfFinishedOperations, totalNumberOfOperations);
 } completionBlock:^(NSArray *operations) {
     NSLog(@"C");
 }];

 [[NSOperationQueue mainQueue] addOperations:operations waitUntilFinished:NO];
</code></pre></li>
</ol>


<p>6.其他</p>

<pre><code>老早以前, 我一般是在一个异步请求中的completionBlock或者successBlock中拿到需要的值, 为空判断后,直接在block里面再写一个异步线程...其实这样的写法可能很多人都用过,但是代码的阅读性太弱了,花括号太多,看的眼花缭乱的...
其实还可以设置flag进行判断等等方法...
暂时就想到这么多, 还有别的方案的话, 欢迎留言哈,大家共同学习!!!
</code></pre>

<hr />

<pre><code>Q Q：2211523682/790806573

微信：18370997821/13148454507

微博WB:http://weibo.com/u/3288975567?is_hot=1

git博文：http://al1020119.github.io/

github：https://github.com/al1020119
</code></pre>

<p><img src="http://al1020119.github.io/images/iCocosCoder.jpg" title="Caption" ></p>

<p><img src="http://al1020119.github.io/images/iCocosPublic.jpg" title="Caption" ></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[修行篇-ios开发中常见设计模式]]></title>
    <link href="http://al1020119.github.io/blog/2016/08/30/xiu-xing-pian-ioskai-fa-zhong-chang-jian-she-ji-mo-shi/"/>
    <updated>2016-08-30T13:10:04+08:00</updated>
    <id>http://al1020119.github.io/blog/2016/08/30/xiu-xing-pian-ioskai-fa-zhong-chang-jian-she-ji-mo-shi</id>
    <content type="html"><![CDATA[<p>本文摘自：<a href="http://ios.jobbole.com/85360/">伯乐在线</a>,因为自己研究并学习ios设计模式的时候寻找了好多相关文章，最后发现这篇才是最适合ios开发的，当然你也可以自己通过C或者java设计模式的规范进行演变。</p>

<p>源码下载地址：<a href="https://github.com/al1020119/iCocosDesignPattern">https://github.com/al1020119/iCocosDesignPattern</a></p>

<h1>对象创建</h1>

<h4>原型（Prototype）</h4>

<p>使用原型实例指定创建对象的种类，并通过复制这个原型创建新的对象。</p>

<pre><code>NSArray *array = [[NSArray alloc] initWithObjects:@1, nil];
NSArray *array2 = array.copy;
</code></pre>

<p>array 就是原型了，array2 以 array 为原型，通过 copy 操作创建了 array2。</p>

<p>当创建的实例非常复杂且耗时，或者新实例和已存在的实例值相同，使用原型模式去复制已经存在的实例效率更高。</p>

<h4>工厂方法（Factory Method）</h4>

<pre><code>定义创建对象的接口，让子类决定实例化哪一个类。工厂方法使得类的实例化延迟到其子类。
</code></pre>

<p>工厂方法是针对每一种产品提供一个工厂类。通过不同的工厂类来创建不同的产品实例。</p>

<p><img src="http://al1020119.github.io/images/iosshejimoshi001.png" title="Caption" ></p>

<ul>
<li>如上图，+ create():Product 就是工厂方法，ConcreatFactoryA 与 ConcreateFactoryB 就是两个工厂类，ConcreateProductA 与 ConcreateProductB 就是两个工厂类对应的产品类，通过不同的工厂生产不同类型的产品，且两个产品类最终返回的是他们的父类 Product，隐藏了对象的具体类型。工厂方法模式让创建的对象拥有一组共同的接口，使我们无需关心做了不同类型接口的具体实现，只需要调用 Product 的接口就行。</li>
</ul>


<blockquote><p>工厂方法模式的扩展性也很好，新增的产品类并不需要修改客户端代码。但每新加一个产品类都需要新建一个工厂类，会造成项目中的类过多。</p></blockquote>

<p>而在 Cocoa Touch 框架中，以 NSNumber 举例，将原有的 alloc+init 拆开写：</p>

<pre><code> id obj1 = [NSNumber alloc];
    id obj2 = [NSNumber alloc];
    id obj3 = [obj1 initWithBool:YES];
</code></pre>

<p>发现 + alloc 后并非生成了我们期望的类实例，而是一个NSPlacehodlerNumber 的中间对象，后面的 – initWithXXXXX 消息都是发送给这个中间对象，再由它做工厂，生成真的对象。如 obj3 的实际类型为 NSCFBoolean，而 obj4 的实际类型为 NSCFNumber 。</p>

<h4>抽象工厂（Abstract Factory）</h4>

<pre><code>提供一个创建一系列相关或相互依赖对象的接口，而无需指定它们具体的类。
</code></pre>

<p><img src="http://al1020119.github.io/images/iosshejimoshi002.png" title="Caption" ></p>

<ul>
<li>如上图，抽象工厂有一个产品族的概念，Factory1 与 Factory2 是继承 AbstractFactory 的两个产品族工厂类， 继承了父类创建 A，B 两个产品的方法，不同产品族工厂类会创建不同类型的产品，最终返回了不同的产品族对象，既 ProductA 和 ProductB。</li>
</ul>


<p>在 Cocoa Touch 框架中，类簇是抽象工厂模式在 iOS 下的一种实现，以 NSArray 举例，将原有的 alloc+init 拆开写：</p>

<pre><code>id obj1 = [NSArray alloc]; // __NSPlacehodlerArray *
id obj2 = [NSMutableArray alloc];  // __NSPlacehodlerArray *
id obj3 = [obj1 init];  // __NSArrayI *
id obj4 = [obj2 init];  // __NSArrayM *
</code></pre>

<p>发现 + alloc 后并非生成了我们期望的类实例，而是一个NSPlacehodlerArray 的中间对象，后面的 – init 或 – initWithXXXXX 消息都是发送给这个中间对象，再由它做工厂，生成真的对象。这里的 NSArrayI 和 __NSArrayM 分别对应 Immutable 和 Mutable（后面的 I 和 M 的意思）</p>

<blockquote><p>于是顺着思路猜实现，__NSPlacehodlerArray 必定用某种方式存储了它是由谁 alloc 出来的这个信息，才能在 init 的时候知道要创建的是可变数组还是不可变数组。</p></blockquote>

<p>抽象工厂将一系列的产品族统一到一起创建，增加产品族很方便，但增加产品很麻烦，需要改动太多的类的接口。</p>

<h4>生成器（Builder）</h4>

<p>将一个复杂对象的构建与它的表现分离，使得同样的构建过程可以创建不同的表现。
生成器可以将构建对象的过程分为，客户 – 指导者 – 生成器 的关系，</p>

<pre><code>CharacterBuilder *characterBuilder = [[StandarCharacterBuilder alloc] init];
ChasingGame *game = [[ChasingGame alloc] init];

Character *player = [chasingGame createPlayer:characterBuilder];
Character *enemy = [chasingGame createEnemy:characterBuilder];
</code></pre>

<p>characterBuilder 就是生成器了，而 game 就是指导者。指导者里声明了创建不同表现的对象的方法。而方法里由生成器 characterBuilder 来构建不同的 Character 类型的对象。</p>

<ul>
<li>生成器模式将复杂的生成对象的过程交给了生成器去完成，作为客户的我们只需要根据简单的接口去生成不同表现的对象。如上述代码中的 player 以及 enemy。玩家和敌人具体的属性数值我们不需要去设置，而是交给生成器去设置。</li>
</ul>


<h4>单例（Singleton）</h4>

<pre><code>保证一个类仅有一个实例，并提供一个访问它的全局访问点。
</code></pre>

<p>在 Cocoa Touch 框架中，最常见的使用了单例模式的就是 UIApplication 类了。每个应用程序有且仅有一个 UIApplication 的实例，它由 UIApplicationMain 函数在程序启动时创建为单例对象，之后，对同一 UIApplication 实例可以通过其 sharedApplication 类方法进行访问。</p>

<p>单例用来集中管理对类的对象所提供的资源，例如应用程序中需要用集中式的类来协调其服务，这个类就应该生成单一的实例。</p>

<ul>
<li>单例模式在多线程的应用场合下必须小心使用。如果当唯一实例尚未创建时，有两个线程同时调用创建方法，那么它们同时没有检测到唯一实例的存在，从而同时各自创建了一个实例，这样就有两个实例被构造出来，从而违反了单例模式中实例唯一的原则。 解决这个问题的办法是为指示类是否已经实例化的变量提供一个互斥锁。</li>
</ul>


<h1>接口适配</h1>

<h4>适配器（Adapter）</h4>

<pre><code>将一个类的接口转换成客户希望的另一个接口，适配器模式使得原本由于接口不兼容而不能一起工作的那些类可以一起工作。
</code></pre>

<p>适配器模式分为类适配器模式和对象适配器模式。
<img src="http://al1020119.github.io/images/iosshejimoshi003.png" title="Caption" ></p>

<ul>
<li>上图是对象适配器模式，Adapter（适配器）遵守了 Target（目标接口）协议，拥有一个 Adaptee（被适配者）的对象 adaptee 的引用，当调用 Adapter 的 request 方法，request 方法里会去调用 adapteee 的 specificRequest 方法。</li>
</ul>


<h4>类适配模式</h4>

<p><img src="http://al1020119.github.io/images/iosshejimoshi004.png" title="Caption" ></p>

<p>类适配器模式中适配器和被适配者是继承关系。request 方法里会去调用 super 的 specificRequest 方法，达到将类的接口转换成客户希望的另一个接口。</p>

<p>适配器模式主要应用于“希望复用一些现存的类，但是接口又与复用环境要求不一致的情况”，在遗留代码复用、类库迁移等方面非常有用。</p>

<h4>桥接（Bridge）</h4>

<pre><code>将抽象部分与它的实现部分分离，使它们都可以独立地变化。
</code></pre>

<p>桥接模式是软件设计模式中最复杂的模式之一，在软件系统中，某些类型由于自身的逻辑，它具有两个或多个维度的变化。</p>

<p><img src="http://al1020119.github.io/images/iosshejimoshi005.png" title="Caption" ></p>

<ul>
<li>如上图，毛笔和颜色是两个维度的变化，可以选择新建 9 个类去实现不同颜色的不同毛笔，也可以如图所示，去组合两个维度。对于客户端而言，可以针对两个维度的抽象层编程，在程序运行的时候再动态确认两个维度的子类，动态组合对象，将两个独立变化的维度完全解耦，以便能够灵活地扩充任一维度而对另一维度不造成任何影响。比如增加一种毛笔并不需要去改动图中的实现部分，增加一种颜色也不需要去改变抽象部分。（抽象部分是面向我们编程的接口部分，我们绘图的时候是调用毛笔类的绘图方法）。</li>
</ul>


<p>桥接模式可以让抽象与实现之间不形成绑定关系，在运行时可以切换实现，也将抽象和实现完全解耦，可以独立扩展。</p>

<h4>外观（Facade）</h4>

<pre><code>为系统中的一组接口提供一个统一的接口。外观顶一个高层接口，让子系统更易于使用。
</code></pre>

<p>外观模式主要是使用一个外观类，为复杂的子系统提供一个简单的接口，而子系统的复杂调用交给外观类去做。</p>

<p><img src="http://al1020119.github.io/images/iosshejimoshi006.png" title="Caption" ></p>

<ul>
<li>如上图，数据的来源可能是不同数据库，获取数据可能非常的复杂，所以使用一个外观类提供简单的获取数据的接口，复杂的操作让外观类去做。做到让子系统更加的易用。</li>
</ul>


<h1>对象去耦</h1>

<h4>中介者（Mediator）</h4>

<pre><code>用一个对象来封装一系列对象的交互方式，中介者使各对象不需要显示地相互引用，从而使其耦合松散，而且可以独立地改变它们之间的交互。
</code></pre>

<p>我们开发的程序是由大量的类来组成的，随着程序功能的不断增加，类和类之间的依赖关系也跟着趋于复杂，而中介者模式便能解决这个问题，</p>

<p><img src="http://al1020119.github.io/images/iosshejimoshi007.png" title="Caption" ></p>

<ul>
<li>如图所示，6 个 VC 类之间的交互可能特别多，如果让他们相互依赖，然后管理这些 VC 之间的关系是一件非常繁琐的事情，我们要处理各个 VC 之间的关系，每当一个 VC 要跳转到另外个 VC，我们需要包含新的 VC 的头文件。而使用中介者模式，让 VC 之间的交互变成 VC 和中介者的交互，用中介者来管理多对多的复杂的对象群，降低了各个对象之间的耦合，减少了对象之间逻辑的复杂度，但也可能导致中介者类中的实现过于复杂。</li>
</ul>


<p>UINavigationController 就是一个中介者，如下图所示</p>

<p><img src="http://al1020119.github.io/images/iosshejimoshi008.png" title="Caption" ></p>

<p>视图控制器的切换都是与 UINavigationController 做交互。由 UINavigationController 去做集中管理。</p>

<h4>观察者（Observer）</h4>

<pre><code>定义对象间的一种一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都得到通知并自动更新。
</code></pre>

<p>在 Cocoa Touch 框架中通知和 KVO 都实现了观察者模式。通知是由一个中心对象为所有观察者提供变更通知，KVO 是被观察的对象直接向观察者发送通知。</p>

<p><img src="http://al1020119.github.io/images/iosshejimoshi009.png" title="Caption" ></p>

<ul>
<li>如上图，Subject 的值改变时，通知观察者 ObserverA，ObserverB，ObserverC，我的数据改变了，依赖我的你们需要更新状态了。</li>
</ul>


<p>被观察者不需要知道有多少个观察者和观察者的更新细节，降低被观察者和观察者之间的耦合。</p>

<h1>抽象集合</h1>

<h4>组合（Composite）</h4>

<pre><code>将对象组合成树形结构以表示“部分-整体”的层次结构。组合使得用户对单个对象和组合对象的使用具有一致性。
</code></pre>

<p>在 Cocoa Touch 框架中，UIView 被组织成一个组合结构。每个 UIView 都可以将其它 UIView 设置为自己的子视图，形成一个树形结构，让客户端可以对单个 UIView 或者对 UIView 组合统一对待。</p>

<p>既平移一个 UIView，可以做到平移这一个 UIView 组合，且操作方法与平移单个 UIView 一致。</p>

<h4>迭代器（Iterator）</h4>

<pre><code>提供一种方法顺序访问一个聚合对象中的各个元素，而又不需要暴露该对象的内部表示，
</code></pre>

<p>在 Cocoa Touch 中的 NSEnumerator 就实现了迭代器模式，如以下代码</p>

<pre><code> NSArray *anArray = @[@"this", @"is", @"a", @"test"];
    NSEnumerator *itemEnumerator = [anArray objectEnumerator];

    NSString *item;
    while (item = [itemEnumerator nextObject]) {
        NSLog(@"%@", item);
    }
</code></pre>

<p>迭代器分为两种，上面使用了一个外部迭代器，外部迭代器让客户端直接操作迭代过程，如上面代码就是使用一个 while 循环去迭代。</p>

<p>下面是使用了内部迭代器，客户端不需要知道实现迭代的方式。</p>

<pre><code> NSArray *anArray = @[@"this", @"is", @"a", @"test"];
    NSString *string = @"a";
    [anArray enumerateObjectsUsingBlock:^(id  _Nonnull obj, NSUInteger idx, BOOL * _Nonnull stop) {
        NSLog(@"%@", obj);
        if ([obj isEqualToString:string]) {
            *stop = YES;
        }
    }];
</code></pre>

<p>客户端不需要手动实现迭代器，只要对每个元素进行处理就行。</p>

<h1>行为扩展</h1>

<h4>访问者（Visitor）</h4>

<pre><code>表示一个作用于某对象结构中的各元素的操作，它让我们可以在不改变各元素的类的前提下定义作用于这些元素的新操作。
</code></pre>

<p>当一个复杂的对象结构包含很多其他的对象，每个对象都有不同的接口，这个时候如果想添加新的接口进行新的操作，就得修改该对象的类，如果每个对象都需要添加新操作，就需要修改更多的类。而访问者模式就是用来不修改原有类添加新的操作。</p>

<p>访问者模式涉及两个关键元素，访问者和被访问对象。访问者遵从访问协议，访问协议里声明了访问方法。访问方法类似下面</p>

<pre><code>- (void)visitEngine:(NimoEngine *)engine;
- (void)visitWheel:(NimoWheel *)wheel;
</code></pre>

<p>访问者模式流程，直接调用访问者里的访问方法，访问方法里实现了新添加的操作，engine 与 wheel 既被访问对象，达到了将新操作集中在访问者里处理的效果。如果再需要新添加一系列对各个元素的操作，只需要再添加一个访问者类就行。</p>

<blockquote><p>访问者能访问复杂元素里的每一个元素，然后由访问者对这些元素进行行为扩展。</p>

<h4>装饰（Decorator）</h4></blockquote>

<pre><code>动态地给一个对象添加一些额外的职责。就扩展功能来说，装饰模式相比生成子类更为灵活。
</code></pre>

<p>Category 就是实现了装饰的设计模式。Category 是 Objective-C 的语言功能，通过它可以给类添加方法的接口与实现，而不必子类化。 从这个设计模式的描述联想到 Category，就没什么难理解了。
责任链（Chain of Responsibility）</p>

<pre><code>使多个对象都有机会处理请求，从而避免请求的发送者和接受者之间发生耦合。此模式将这些对象连成一条链，并沿着这条链传递请求，直到有一个对象处理它为止。
</code></pre>

<p>Cocoa Touch 中的事件处理流程–响应者链就实现了责任链模式。以点击为例，首先通过 hit-test view 的流程找到被点击的视图，被点击的视图如果不处理点击事件，则沿着响应者链向上回溯，比如给父视图发消息，让父视图去处理，父视图不处理则继续沿着响应者链向上回溯，直到有对象处理它为止，如果都不处理，则该事件丢弃。</p>

<h1>算法封装</h1>

<h4>模板方法（Template Method）</h4>

<pre><code>定义一个操作中算法的骨架，而将一些步骤延迟到子类中。模板方法使子类可以重定义算法的某些特定步骤而不改变该算法的结构。
</code></pre>

<p>模板方法可以提高可扩展性与可复用性，比如 UIView 类中的定制绘图,UIView 的结构不改变，只是继承 UIView,再重载 – (void)drawRect:(CGRect)rect
方法。所以 – (void)drawRect:(CGRect)rect 就是模板方法，默认什么都不做或者只是做了部分操作，缺少特性操作，用来给子类选择重载与实现的方法。</p>

<h4>策略（Strategy）</h4>

<pre><code>定义一系列算法，把它们一个个封装起来，并且使它们可相互替换。本模式使得算法可独立于使用它的客户而变化。
</code></pre>

<p>举一个常见的例子，验证 UITextField 输入是否有效。有两个算法分别是验证邮箱的和验证电话号码的。可以通过 if else 这样的判断代码来决定执行哪个算法。也可以通过策略模式，将算法封装起来，如下图
￼</p>

<p><img src="http://al1020119.github.io/images/iosshejimoshi010.png" title="Caption" ></p>

<p>Strategy 是这一系列算法的父类，ConcreteStrategyA, B, C。是三种算法，给 Context 对象添加一个 Strategy 类型的属性，里面存放着 ConcreteStrategyA 或者 B，C。然后 Context 对象就知道去执行哪个算法。也就知道自己需要执行什么策略。</p>

<blockquote><p>策略模式首先将算法都封装起来了，易于理解，且易于切换和扩展。</p>

<h4>命令（Command）</h4></blockquote>

<pre><code>将请求封装为一个对象，从而可用不同的请求对客户进行参数化，对请求排队或记录请求日志，以及支持可撤销的操作。
</code></pre>

<p>Cocoa Touch 框架中的 NSInvocation 就是实现了命令模式。</p>

<pre><code>NSMethodSignature*signature = [ViewController instanceMethodSignatureForSelector:@selector(sendMessageWithNumber:WithContent:)];
  //1、创建NSInvocation对象
  NSInvocation*invocation = [NSInvocation invocationWithMethodSignature:signature];
  invocation.target = self;
  //invocation中的方法必须和签名中的方法一致。
  invocation.selector = @selector(sendMessageWithNumber:WithContent:);
  /*第一个参数：需要给指定方法传递的值
         第一个参数需要接收一个指针，也就是传递值的时候需要传递地址*/
  //第二个参数：需要给指定方法的第几个参数传值
  NSString*number = @"1111";
  //注意：设置参数的索引时不能从0开始，因为0已经被self占用，1已经被_cmd占用
  [invocation setArgument:&amp;number atIndex:2];
  NSString*number2 = @"啊啊啊";
  [invocation setArgument:&amp;number2 atIndex:3];
  //2、调用NSInvocation对象的invoke方法
  //只要调用invocation的invoke方法，就代表需要执行NSInvocation对象中制定对象的指定方法，并且传递指定的参数
  [invocation invoke];
</code></pre>

<p>将行为封装成对象，而不是直接触发行为，因为是对象，所以可以很容易的设计一个命令队列，也可以方便的记录进日志里，以及实现行为的撤销。（因为行为对象可以记录进日志里，所以可以根据日志得知上一个操作做了什么，从而进行撤销）。</p>

<h1>性能与对象访问</h1>

<h2>享元（Flyweight）</h2>

<pre><code>利用共享技术有效地支持大量细粒度的对象。
</code></pre>

<p>tableViewCell 的重用机制就是实现了享元模式。在要使用一个 Cell 的时候，会先去重用池里看看 tableView 有没有可以重用的 cell，如果有重用该 cell，没有创建一个，这就是享元模式。</p>

<p>享元模式主要有两个关键组件，可共享的享元对象和保存它们的享元池。</p>

<blockquote><p>举另一个实现例子，画面上需要显示 100 个相同的图案，可以只生成一个包含该图案 image 的 imageView。其它 99 个只需要去享元池里去拿这个 imageView 实例的信息，然后在页面里直接绘制图案，这样就不需要生成 100 个图案实例。</p></blockquote>

<p>享元模式通过共享一部分必须的对象，减少对象的创建，节省大量的内存。</p>

<h4>代理（Proxy）</h4>

<pre><code>为其它对象提供一种代理以控制对这个对象的访问。
</code></pre>

<p>代理设计模式的英文名是 Proxy pattern，和我们常见的 delegate（委托） 没关系。</p>

<p>iOS 中常见的代理模式例子为引用计数，当一个复杂对象的多份副本须存在时，代理模式可以结合享元模式以减少内存用量。典型做法是创建一个复杂对象及多个代理者，每个代理者会引用到原本的复杂对象。而作用在代理者的运算会转送到原本对象。一旦所有的代理者都不存在时，复杂对象会被移除。</p>

<blockquote><p>当然，上面的代理模式中的代理者什么都没做，代理对象作为 A 和 C 中间的协调者，可以多做点操作，可以理解为 VPN 中的代理者可以对传输数据加密，而 A 和 C 中的代理者，也可以隐藏 C 的信息，做到对 C 的保护。</p></blockquote>

<h1>对象状态</h1>

<h4>备忘录（Memento）</h4>

<pre><code>在不破坏封装的情况下，捕获一个对象的内部状态，并在该对象之外保存这个状态，这样以后就可将该对象恢复到原先保存的状态。
</code></pre>

<p>Cocoa Touch 框架中归档可以实现备忘录模式，Cocoa 的归档是对对象及其属性还有同其他对象间的关系进行编码，形成一个文档，该文档可以保存于文件系统，也可在进程或网络间传输，最后又可以通过解档将文档解码成与该对象归档时状态一致的对象。</p>

<blockquote><p>既将对象保存一个备份放置到其它地方，可以随时使用备份将该对象恢复到原先保存的状态，用来储存关键对象的关键状态。</p></blockquote>

<h5>总结：（如果看了这么久您依然不知道上面在扯上面鬼，那么请结合ios开发中遇到的技术点简单粗略的体会一下下面的东西，再返回看看或许你就会明白很多）</h5>

<ul>
<li>备忘录-归档</li>
<li>代理-引用计数（非delegate）</li>
<li>享元-TableView重用机制</li>
<li>命令-NSInvocation</li>
<li>策略-文本有效</li>
<li>模板-drawRect</li>
<li>装饰-分类</li>
<li>责任链-响应者</li>
<li>迭代器-NSEnumerator</li>
<li>组合-UIView</li>
<li>观察者-通知、KVO</li>
<li>中介-导航</li>
<li>原型-.copy</li>
<li>工厂方法-initWithBool</li>
<li>抽象工厂-alloc]initWithXXX</li>
<li>单利-无处不在哈哈</li>
<li>适配器-网络请求接口</li>
</ul>


<hr />

<pre><code>Q Q：2211523682/790806573

微信：18370997821/13148454507

微博WB:http://weibo.com/u/3288975567?is_hot=1

git博文：http://al1020119.github.io/

github：https://github.com/al1020119
</code></pre>

<p><img src="http://al1020119.github.io/images/iCocosCoder.jpg" title="Caption" ></p>

<p><img src="http://al1020119.github.io/images/iCocosPublic.jpg" title="Caption" ></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[修行篇-数据结构常见操作与总结]]></title>
    <link href="http://al1020119.github.io/blog/2016/08/28/xiu-xing-pian-shu-ju-jie-gou-chang-jian-cao-zuo-yu-zong-jie/"/>
    <updated>2016-08-28T12:33:11+08:00</updated>
    <id>http://al1020119.github.io/blog/2016/08/28/xiu-xing-pian-shu-ju-jie-gou-chang-jian-cao-zuo-yu-zong-jie</id>
    <content type="html"><![CDATA[<h1>一、栈</h1>

<p>栈是只能在一端进行插入和删除的线性表。
（别看只是个定义，非常重要，已经道出了运算方法：只能在一端插入和删除。)</p>

<blockquote><p>栈的特征：后进先出，先进后出。</p></blockquote>

<p>插入和删除元素的一端称为栈顶。（说明了我们在栈顶操作）
另一端称为栈底。
插入元素和删除元素的操作称为入栈和出栈。</p>

<!--more-->


<h3>1.顺序栈</h3>

<p>结构：(top总是指向数组最后的元素，比如data[n]，而不是前面)</p>

<pre><code>#define MAXSIZE 100
typedef struct
{
    elementtype data[MAXSIZE];
    int top;
} seqstack;
</code></pre>

<p>初始化栈：</p>

<pre><code>void init_stack(seqstack *S)
{
    S-&gt;top = -1;    //一个元素也没有，注意因为TOP是下标而不是元素个数，用-1
}
</code></pre>

<p>判断栈是否为空：</p>

<pre><code>int stack_empty(seqstack *S)
{
    if (S-&gt;top == -1)
        return 1;
    else
        return 0;
}
</code></pre>

<p>取栈顶元素：</p>

<pre><code>elementtype stack_top(seqstack *S)
{
    if (stack_empty(S))
        error("栈为空！");
    else
        return S-&gt;data[S-&gt;top];
}
</code></pre>

<p>入栈：</p>

<pre><code>void push_stack(seqstack *S, elementtype x)
{
    if (S-&gt;top == MAXSIZE -1)
        error("溢出！");
    else
        S-&gt;data[++S-&gt;top] = x;    //注意-&gt;运算符的优先级是最高的
}
</code></pre>

<p>出栈：</p>

<pre><code>elementtype pop_stack(seqstack *S)
{
    if (stack_empty(S))
        error("栈为空！");
    else
        return S-&gt;data[S-&gt;top--];
}
</code></pre>

<p>判断栈是否为满：</p>

<pre><code>int stack_full(seqstack *S)
{
    if (S-&gt;top == MAXSIZE -1)
        return 1;
    else
        return 0;
}
</code></pre>

<p>总体来说，顺序栈很简单，出的时候取最后的元素，进的时候一样进在尾部。</p>

<h3>2.链栈</h3>

<p>栈的链式存储结构称为链栈。
其插入和删除操作仅限制在表头位置上进行。
由于只能在链表头部进行操作，故链栈没有必要象单链表那样添加头结点。栈顶指针就是链表的头指针。
结构：</p>

<pre><code>typedef struct node    //和一般链表的结构一样。
{
    elementtype data;
    struct node *next;
} linkstack; 
linkstack *top;
当top=NULL时，链栈为空栈。
</code></pre>

<p>入栈：</p>

<pre><code>void push_stack(linkstack *top, elementtype x)
{
    linkstack *P = (linkstack *)malloc(sizeof(linkstack));
    P-&gt;data = x;
    P-&gt;next = top-&gt;next;
    top = P;
}
</code></pre>

<p>出栈：</p>

<pre><code>elementype pop_stack(linkstack *top)
{
    elementtype x;
    linkstack *P;
    if (top == NULL)
        error("栈为空！");
    else
    {
        x = top-&gt;data;
        P = top;
        top = top-&gt;next;
        free(P);
        return x;
    }
}
</code></pre>

<h1>二、队列</h1>

<p>队列是只能在一端插入，另一端删除的线性表。
特征是：先进先出，后进后出。</p>

<h1>1.顺序队列</h1>

<p>注意顺序队列多是循环队列，这里要注意几点：</p>

<ul>
<li>(1)front是队头的前一个位置。</li>
<li>(2)尾部入队，头部出队。</li>
<li><p>(3)由于循环，任何的位置移动计算之后要取余：P = (P + 1) % MAXSIZE 。
结构：</p>

<p>  #define MAXSIZE 100
  typedef struct
  {
      elementtype data[MAXSIZE];
      int front;    //头序号（注意是队头的前一个位置）
      int rear;    //尾序号（直接指向尾元素）
  } seqqueue;</p></li>
</ul>


<p>初始化队列：</p>

<pre><code>void init_queue(seqqueue *Q)
{
    Q-&gt;front = 0;
    Q-&gt;rear = 0;
}
</code></pre>

<p>还有一种写法：</p>

<pre><code>void init_queue(seqqueue *Q)
{
    Q-&gt;front = MAXSIZE - 1;
    Q-&gt;rear = MAXSIZE - 1;
}
</code></pre>

<p>两种方法的区别是第一种插入第一个元素是data[1]，而第二种是data[0]。
判断队列是否为空：</p>

<pre><code>int queue_empty(seqqueue *Q)
{
    if (Q-&gt;front == Q-&gt;rear)
        return 1;
    else
        return -1;
}
</code></pre>

<p>判断队列是否为满：</p>

<pre><code>int queue_full(seqqueue *Q)
{
    if ((Q-&gt;rear + 1) % MAXSIZE == Q-&gt;front)
        return 1;
    else
        return 0;
}
</code></pre>

<p>取队头元素：</p>

<pre><code>elementtype queue_front(seqqueue *Q)
{
    if (queue_empty(Q))
        error("队列为空！");
    else
        return Q-&gt;data[(Q-&gt;front + 1) % MAXSIZE];
}
</code></pre>

<p>入队：</p>

<pre><code>void Enqueue(seqqueue *Q, elementtype x)
{
    if (queue_full(Q))
        error("队列满！");
    else
    {
        Q-&gt;rear = (Q-&gt;rear + 1) % MAXSIZE;    //千万不能直接用Q-&gt;rear++，在循环队列要特别注意
        Q-&gt;data[Q-&gt;rear] = x;
    }
}
</code></pre>

<p>出队：</p>

<pre><code>elementtype Outqueue(seqqueue *Q)
{
    if (queue_empty(Q))
        error("队列为空！");
    else
    {
        Q-&gt;front = (Q-&gt;front + 1) % MAXSIZE;
        return Q-&gt;data[Q-&gt;front];
    }
}
</code></pre>

<h3>2.链队列</h3>

<p>出队时，删除表头操作，入队时，在表尾添加结点。（也就是头部出，尾部进）
使用带头结点的单链表形式。（注意链栈是不带头结点的）
结构：</p>

<pre><code>typedef struct mynode
{
    elementtype data;
    mynode *next;
} node;    //就是单链表
typedef struct
{
    node *front;
    node *rear;
} linkqueue;
</code></pre>

<p>初始化队列：</p>

<pre><code>void init_queue(linkqueue *Q)
{
    Q-&gt;front = (node *)malloc(sizeof(node));    //生成头结点（注意是NODE类型，Q结构是已有的一个结构，这里有点特殊，仔细体会）
    Q-&gt;rear = Q-&gt;front;
    Q-&gt;front = NULL;
}
</code></pre>

<p>判断队列是否为空：</p>

<pre><code>int queue_empty(linkqueue *Q)
{
    if (Q-&gt;front == Q-&gt;rear)
        return 1;
    else
        return 0;
}
</code></pre>

<p>取队头元素：</p>

<pre><code>elementtype queue_front(linkqueue *Q)
{
    if (queue_empty(Q))
        error("队列为空！");
    else
        return Q-&gt;front-&gt;next-&gt;data;
}
</code></pre>

<p>入队：</p>

<pre><code>void Enqueue(linkqueue *Q, elementtype x)
{
    node *P = (node *)malloc(sizeof(node));
    P-&gt;data = x;
    P-&gt;next = NULL;
    Q-&gt;rear-&gt;next = P;
    Q-&gt;rear = P;
}
</code></pre>

<p>出队：</p>

<pre><code>elementtype Outqueue(linkqueue *Q)
{
    node *P;
    elmenttype x;
    if (queue_empty(Q))
        error("队列为空！");
    else
    {
        P = Q-&gt;front-&gt;next;
        Q-&gt;front-&gt;next = P-&gt;next;
        x = P-&gt;data;
        free(P);
    }
    if (Q-&gt;front-&gt;next == NULL)    //只剩一个结点删除后队列为空时的特殊情况，一定要注意处理
        Q-&gt;rear = Q-&gt;front;
    return x;
}
</code></pre>

<h1>数组</h1>

<p>主要是稀疏矩阵的压缩存储：
当数组中非零元素非常少时，称之为稀疏矩阵。
存储特别如下：</p>

<ul>
<li>(1)对稀疏矩阵压缩存储时，除了存储非零元素的值v以外，还要存储其行列号i和j，故每个元素对应一个三元组(i, j, v)。将这些元素的三元组组织起来构成三元组表。</li>
<li>(2)需要在三元组表中增设元素个数、行列数，以唯一确定一个稀疏矩阵。</li>
</ul>


<p>结构如下：</p>

<pre><code>#define MAXSIZE 100
typedef struct    //三元组结构
{
    int i, j;
    elementtype v;
} tuple;
typedef struct
{
    int mu, nu, tu;    //行数、列数、非0元素个数
    tuple data[MAXSIZE];
} spmatrix;
</code></pre>

<h1>树</h1>

<h3>一、树</h3>

<p>树中的每个结点最多只有一个前驱（父辈），但可能有多个后继（后代）。
一个结点的度是指该结点的孩子数目。
若一个结点的度为0，称为叶子结点或终结点，否则称为分支结点或非终结点。
一棵树的度是树中最大的结点的度。
某个结点的子树的根称为其孩子结点，而该结点为其孩子结点的双亲结点或父结点。
同一个结点的孩子互相称为兄弟结点。
根的层次为1，其余结点的层次为父结点的层次数加1，而最大的层次数称为树的高度或深度。
如果树中各兄弟结点之间的排列次序是无关的，则称之为有序树，否则称为无序树。
称多棵树为森林。</p>

<h3>二叉树</h3>

<p>二叉树和树一样，都可以为空树。
注意二叉树每个结点的孩子都有左右之分，每个结点都有左右两个子树，这与树结构明显不同。
二叉树和树本质上是完全不同的两种结构。
 定义：满二叉树是指每层都有最大数目结点的二叉树，即高度为k的满二叉树中有2k-1个结点。而完全二叉树则是指在满二叉树的最下层从右到左连续地删除若干个结点所得到的二叉树。</p>

<p>二叉树的性质：</p>

<ul>
<li>1.在二叉树的第i层上的结点个数&lt;=2i-1(i>0)</li>
<li>2.深度（高度）为k的二叉树的结点个数&lt;=2k-1</li>
<li>3.对任一棵非空的二叉树，如果其叶子数为n0, 度为2的结点数为n2, 则有下面的关系式成立：n0=n2+1
(这个性质很重要。主要是有个概念：除去根结点，每个结点都与一个它上面的分支一一对应，也就是说，结点数＝分支数＋1，所以有：n-1=n1+2*n2)</li>
<li>4.有n个结点的完全二叉树(n>0)的深度为[log2n]+1([]为取整)</li>
<li>5.在编号的完全二叉树中，各结点的编号之间的关系为：
编号为i的结点如果存在左孩子，则其编号为2i，如果存在右孩子，则其编号为2i+1，如果存在父结点，则其编号为[i/2]。</li>
</ul>


<p>二叉树的存储结构：
1.顺序存储结构：
按完全二叉树的编号次序进行，即编号为i的结点存储在数组中下标为i的元素中。
缺点：若二叉树不是完全二叉树，则为了保持结点之间的关系，不得不空出许多元素来，这就造成了空间的浪费。</p>

<p>2.二叉链表存储结构：</p>

<pre><code>typedef struct node
{
    datatype data;
    struct node *lchild, *rchild;
} bitree;
</code></pre>

<h3>二叉树的遍历：</h3>

<p>所谓遍历二叉树是指按某种次序访问二叉树中每个结点一次且仅一次。
根据访问根结点的次序，可以分为先序遍历，中序遍历，后序遍历。
先序遍历可描述为：
若二叉树T不为空：</p>

<ul>
<li>(1)访问T的根结点；</li>
<li>(2)先序遍历T的左子树；</li>
<li><p>(3)先序遍历T的右子树。
遍历的算法非常简单，只写出先序遍历算法：</p>

<p>  void preorder(bitree *T)
  {
      if (T != NULL)
      {
          visit(T);    //一般用的最多的就是输出
          preorder(T->lchild);
          preorder(T->rchild);
      }
  }</p></li>
</ul>


<h3>线索二叉树</h3>

<p>线索二叉树主要是为了求解在某种次序下的前驱或后继结点。
将二叉树各结点中的空的左孩子指针域改为指向其前驱，空的右孩子指针域改为指向其后继。称这种新的指针（前驱或后继）为线索，所得到的二叉树被称为线索二叉树，将二叉树转变成线索二叉树的过程称为线索化。
同时，为了区分到底指针是指向前驱（后继）还是孩子，要加入两个标志来判断。
结构：</p>

<pre><code>typedef struct node
{
    int ltag, rtag;    //0为孩子，1为前驱或后继
    datatype data;
    struct node *lchild, *rchild;
} ordertree;
</code></pre>

<p>先序后继的求解：</p>

<pre><code>ordertree *presuc(ordertree *P)
{
    if (P-&gt;ltag == 0)
        return P-&gt;lchild;
    else
        return P-&gt;rchild;
}
</code></pre>

<p>中序后继：</p>

<pre><code>ordertree *insuc(ordertree *P)
{
    ordertree *q = P-&gt;rchild;
    if (P-&gt;rtag == 1)
        return q;
    else
    {
        while (q-&gt;ltag == 0)
            q = q-&gt;lchild;
        return q;
    }
}
</code></pre>

<p>中序先驱：</p>

<pre><code>ordertree *infore(ordertree *P)
{
    ordertree *q = P-&gt;lchild;
    if (P-&gt;ltag == 1)
        return q;
    else
    {
        while (q-&gt;rtag == 0)
            q = q-&gt;rchild;
        return q;
    }
}
</code></pre>

<p>后序先驱：</p>

<pre><code>ordertree *postfore(ordertree *P)
{
    if (P-&gt;rtag == 0)
        return P-&gt;rchild;
    else
        return P-&gt;lchild;
}
</code></pre>

<h3>树和森林</h3>

<h5>1.树的存储结构：</h5>

<p>(1)双亲表示法</p>

<pre><code>struct tnode
{
    datatype data;
    int parent;
}
struct tnode treelist[MAXSIZE];    //整个树的存储数组说明
</code></pre>

<p>其中parent指示该结点父结点的下标，data存放结点的值。
优点：便于搜索相应结点的父结点和祖先结点。
缺点：若要搜索孩子结点或后代结点需要搜索整个表，浪费时间。</p>

<p>(2)孩子链表表示法
分别将每个结点的孩子结点连成一个链表，然后将各表头指针放在一个表中构成一个整体结构。</p>

<pre><code>typedef struct node    //链表中每个孩子结点的定义
{
    int data;
    struct node *next;
} listnode;
typedef struct    //数组元素的定义，每个数组元素都是一个单链表，单头元素不同
{
    datatype info;
    listnode *firstchild;
} arrnode;
arrnode tree[MAXSIZE];    //MAXSIZE为所有结点的个数
</code></pre>

<p>优缺点：与双亲表示法恰好相反。</p>

<p>(3)孩子－兄弟链表表示法（二叉链表表示法，二叉树表示法）
树中每个结点用一个链表结点来存储，每个链表结点中除了存放结点的值外，还有两个指针，一个用来指示该结点的第一个孩子，另一个用于指示该结点的下一个兄弟结点。</p>

<pre><code>typedef struct node
{
    datatype data;
    struct node *firstchild, *nextbrother;
} tnode;
</code></pre>

<h5>2.树（森林）与二叉树的转换</h5>

<p>树或森林的子树转换为二叉树的左子树，兄弟转化为右子树。</p>

<h5>3.树（森林）的遍历</h5>

<p>树的遍历可分为先序遍历和后序遍历。（注意没有中序，因为树有不只两个孩子）即结点是在其子树之前还是之后访问。
遍历树（森林）要转换为遍历其对应的二叉树：
先序遍历：（同二叉树的先序遍历）</p>

<pre><code>void preorder(tnode *T)
{
    if (T != NULL)
    {
        visit(T);
        preorder(T-&gt;firstchild);
        preorder(T-&gt;nextbrother);
    }
}
</code></pre>

<p>后序遍历：（同二叉树的中序遍历）</p>

<pre><code>void postorder(tnode *T)
{
    if (T != NULL)
    {
        postorder(T-&gt;firstchild);
        visit(T);
        postorder(T-&gt;nextbrother);
    }
}
</code></pre>

<h3>哈夫曼树</h3>

<p>哈夫曼树主要用来处理压缩算法。
一般的判断问题的流程就象是一棵二叉树，其中分支（判断）结点对应于二叉树的分支结点；而最后得出的结论对应于叶子结点；一个结论所需要的判断次数是从根结点到该叶子结点的分支线数（层次数-1）；每个结论成立的次数作为叶子结点的权值。
(这个权值可能比较少接触,但是其实它非常重要,因为我们平时设计的系统,判断的结果常常都是通过长年的实践会有一个出现机率分配,而不可能是平分的,比如考试,如果常常80-90分的比较多,也许就要换一种算法,当然这是后话,和考试无关了.)</p>

<p>哈夫曼算法步骤如下:</p>

<ul>
<li>(1)根据给定的n个权值,构成一排结点T,每个的值都是相应的权值.</li>
<li>(2)从T中选两棵权值最小的二叉树,作为左右子树构成一棵新的二叉树T',并且新二叉树的权值为左右子树权值之和.</li>
<li>(3)将新二叉树T'并入到T中,删除原来的两棵二叉树.</li>
<li>(4)重复2,3直到只剩一棵二叉树.这棵树就是哈夫曼树.</li>
</ul>


<p>哈夫曼树的带权路径长度WPL=∑wL
即所有叶子结点的 权值*比较次数(层次数-1) 之和.
而WPL也正好等于所有分支结点(不包括叶子结点)的值之和.</p>

<h1>图</h1>

<p>图中将每个对象用一个顶点表示，并常用一个序号来标识一个顶点。
其中弧表示单向关系，边表示双向关系，用离散数学中的术语来说，则分别表示为非对称关系和对称关系。
弧用&lt;A, B>表示（A为尾，B为头），边用(A, B)表示。</p>

<pre><code>一个图G由两部分内容构成，即顶点(vertex)集合(V)和边(或弧edge)的集合(E)，并用二元组(V, E)来表示，记做G = (V, E) 
</code></pre>

<ul>
<li>根据顶点间的关系是否有向而引入有向图和无向图。</li>
<li>给每条边或弧加上权值，这样的带权图称为网络。</li>
<li>若无向图中任意两点间都有一条边，则称此图G为无向完全图。(共有边数 n*(n-1)/2 )</li>
<li><p>若有向图中任意一个顶点到其余各点间均有一条弧，则称为有向完全图。(共有弧数 n*(n-1) )
若一个图G1是从G中选取部分顶点和部分边（或弧）组成，则称G1是G的子图。（注意，顶点和边必须都为子关系）</p></li>
<li><p>若无向图中两个顶点i, j之间存在一条边，则称i, j相邻接，并互为邻接点。
在有向图中，若存在弧&lt;Vi, Vj>，也做Vi, Vj相邻接，但为区别弧的头、尾顶点，可进一步称做Vi邻接到Vj，Vj邻接于Vi。</p></li>
</ul>


<p>与一个顶点相邻接的顶点数称为该顶点的度。
在有向图中，进入一个顶点的弧数称为该顶点的入度，从一个顶点发出的弧数为该顶点的出度，并将入度和出度之和作为该顶点的度。</p>

<p>一个顶点经过一定的可经路程到达另一个顶点，就为顶点之间的路径。</p>

<ul>
<li>若某路径所经过的顶点不重复，则称此路径为简单路径。</li>
<li>若某路径的首尾相同，则称此路径为回路（或称为环）。</li>
<li><p>若某回路的中间不重复，则称之为简单回路。</p></li>
<li><p>若无向图中任意两点之间均存在路径，则称G为连通图，否则不连通，就存在若干个连通分量。</p></li>
<li>若有向图中任意两点间可以互相到达，则称为强连通图。</li>
</ul>


<p>一个无向图，连通并且无回路，称这样的图为树。
若有向图中仅有一个顶点的入度为0，其余顶点的入度都为1，称此图为有向树，入度为0的顶点为根。</p>

<h3>图的存储结构：</h3>

<h5>1。邻接矩阵表示</h5>

<p>对n个顶点的图来说，其邻接矩阵为n*n阶的。
邻接矩阵的元素存放边（弧）的权值，对不存在的边（弧），则用0或∞表示。
定义格式如下：</p>

<pre><code>#define n 6    /* 图顶点数 */ 
#define e 8    /* 图的边（弧）数 */
typedef struct
{
    vextype vexs[n];    /* 顶点类型 */
    datatype arcs[n][n];    /* 权值类型 */
} graph; 
</code></pre>

<p>建立一个无向网络的算法：</p>

<pre><code>CreateGraph(graph *G) 
{ 
    int i, j, k; 
    float w; 
    for (i=0; i&lt;n; i++) 
        G-&gt;vexs[i] = getchar();    /* 读入顶点信息，创建表，这里用字符型 */ 
    for (i=0; i&lt;n; i++) 
        for (j=0; j&lt;n; j++) 
            G-&gt;arcs[i][j] = 0;    /* 邻接矩阵初始化 */ 
    for (k=0; k&lt;e; k++) 
    { 
        scanf("%d%d%f", &amp;i, &amp;j, &amp;w);    /* 读入边(vi, vj)上的权w(暂用float类型) */ 
        G-&gt;arcs[i][j] = w; 
        G-&gt;arcs[j][i] = w; 
    } 
}
</code></pre>

<h5>2.邻接表表示法</h5>

<p>将每个顶点的邻接点连成链表，并将各链表的表头指针合在一起（用数组或链表表示均可），其中每个头指针与该结点的信息合为一个整体结点。
如果将邻接表中各顶点的邻接表变为其前驱顶点即可，从而得到逆邻接表。
用邻接表存储网络时，需要将各条边（弧）的权值作为相应邻接结点中的一个字段。
结构：</p>

<pre><code>typedef struct node
{
    int adjvex;    /* 邻接点域 */
    struct node *next;    /* 链域 */
    datatype arc;    /* 权值 */
} edgenode;    /* 边表指针 */
typedef struct
{
    vextype vertex;    /* 顶点信息 */
    edgenode *link;    /* 边表头指针 */
} vexnode;    /* 顶点表结点 */
vexnode gnode[n];    /* 整个图的构成 */
 建立无向图的邻接表：
CreateAdjlist(gnode)
{
    int i, j, k;
    edgenode *s;
    for (i=0; i&lt;n; i++)    /* 读入顶点信息 */
    {
        gnode[i].vertex = getchar();
        gnode[i].link = NULL;    /* 边表指针初始化 */
    }
    for (k=0; k&lt;e; k++)    /* 建立边表 */
    {
        scanf("%d%d", &amp;i, &amp;j);    /* 读入边(vi,vj)的顶点序号 */
        s = malloc(sizeof(edgenode));    /* 生成邻接点序号为j的表结点 */
        s-&gt;adjvex = j;
        s-&gt;next = gnode[i].link;
        gnode[i].link = s;    /* 将*s插入顶点vi的边表头部(插到头部比尾部简单) */
        s = malloc(sizeof(edgenode));    /* 生成邻接点序号为i的边表结点*s */
        s-&gt;adjvex = i;
        s-&gt;next = gnode[j].link;
        gnode[j].link = s;    /* 将*s插入顶点vj的边表头部(最后四行由于是无向图，所以相互，两次) */
    }
}
</code></pre>

<h3>图的遍历算法及其应用</h3>

<h5>1.深度遍历</h5>

<ul>
<li>(1)访问V0</li>
<li>(2)依次从V0 的各个未被访问的邻接点出发深度遍历
（两句话说的非常清楚。是一种以深度为绝对优先的访问。）</li>
</ul>


<h5>2。深度优先搜索遍历算法</h5>

<p>由于实际算法比较复杂，这里算法依赖两个函数来求解（对于不同的存储结构有不同的写法）
firstadj(G, v)：返回图G中顶点v的第一个邻接点。若不存在，返回0。
nextadj(G, v, w)：返回图G中顶点v的邻接点中处于w之后的那个邻接点。若不存在，返回0。
depth first search:</p>

<pre><code>void dfs(graph G, int v)
{
    int w;
    visit(v);
    visited[v] = 1;
    w = firstadj(G, v)
    while (w != 0)
    {
        if (visited[w] == 0)
            dfs(w);
        w = nextadj(G, v, w);
    }
}
</code></pre>

<p>如果不是连通图，或者是有向图，那么访问一个v不可能遍历所有顶点。所以，需要再选择未被访问的顶点作为起点再调用dfs.</p>

<p>所以，深度遍历图的算法如下：</p>

<pre><code>void dfs_travel(graph G)
{
    int i;
    for (i=1; i&lt;=n; i++)
        visited[i] = 0;        //初始化各顶点的访问标志
    for (i=1; i&lt;=n; i++)
        if (visited[i] == 0)
            dfs(G, i);
}
</code></pre>

<h5>3.广度优先搜索遍历算法</h5>

<p>广度优先搜索遍历算法(bfs)是一种由近而远的层次遍历算法，从顶点V0出发的广度遍历bfs描述为：</p>

<ul>
<li>(1)访问V0（可作为访问的第一层）；</li>
<li>(2)假设最近一层的访问顶点依次为V1, V2, &hellip;, Vk，则依次访问他们的未被访问的邻接点。</li>
<li>(3)重复2，直到找不到未被访问的邻接点为止。</li>
</ul>


<p>算法</p>

<pre><code>void bfs(graph G, int V0)
{
    int w;
    int v;
    queue Q;
    init_queue(Q);
    visit(V0);
    visited[V0] = 1;
    Enqueue(Q, V0);
    while (!empty(Q))
    {
        v = Outqueue(Q);
        w = firstadj(G, v);
        while (w != 0)
        {
            if (visited[w] == 0)
            {
                visit(w);
                visited[w] = 1;
                Enqueue(Q, w);
            }
            w = nextadj(G, v, w);
        }
    }
}
</code></pre>

<p>广度遍历图的算法和深度一样：</p>

<pre><code>void bfs_travel(graph G)
{
    int i;
    for (i=1; i&lt;=n; i++)
        visited[i] = 0;
    for (i=1; i&lt;=n; i++)
        if (visited[i] = 0)
            bfs(G, i);
}
</code></pre>

<p>最小生成树：</p>

<pre><code>从图中选取若干条边，将所有顶点连接起来，并且所选取的这些边的权值之和最小。
</code></pre>

<p>这样所选取的边构成了一棵树，称这样的树为生成树，由于权值最小，称为最小生成树。</p>

<h3>构造最小生成树有两种方法：</h3>

<h6>1.Prim算法：</h6>

<pre><code>首先将所指定的起点作为已选顶点，然后反复在满足如下条件的边中选择一条最小边，直到所有顶点成为已选顶点为止（选择n-1条边）：一端已选，另一端未选。
</code></pre>

<p>(简单的说，就是先任选一点，然后每次选择一条最小权值的边，而且只连接到一个已选顶点)</p>

<h6>2.Kruskal算法：</h6>

<pre><code>反复在满足如下条件的边中选出一条最小的，和已选边不够成回路。
(条件就是不够成回路就OK，反复选最小边，知道所有顶点都有连接）
</code></pre>

<p>最短路径：
一般即是要一个顶点到其余各个顶点的最短路径。（比如隔很远的顶点，要绕哪几条边走）
求解方法：</p>

<pre><code>首先，我们要画一个表，每个顶点有path和dist两个值，分别用来存储到各点的最短路径（比如(1,5,6)，就是1-5-6这个路径）和相应的长度（到该点的权值之和）。
</code></pre>

<ul>
<li>(1)对V以外的各顶点，若两点间的邻接路径存在，则将其作为最短路径和最短长度存到path[v]和dist[v]中。(实际上也就是最开始对顶点的直接后继进行处理）</li>
<li>(2)从未解顶点中选择一个dist值最小的顶点v，则当前的path[v]和dist[v]就是顶点v的最终解（从而使v成为已解顶点）。</li>
<li>(3)如果v的直接后继经过v会更近一些，则修改v的直接后继的path和dist值。</li>
</ul>


<p>(上面的确是很难懂，只能通过例子自己慢慢熟悉。）</p>

<h1>查找</h1>

<blockquote><p>在软件设计中，通常是将待查找的数据元素集以某种表的形式给出，从而构成一种新的数据结构－－查找表。
表包括一些“元素”，“字段”等等概念。</p></blockquote>

<p>在一个数据表中，若某字段的值可以标识一个数据元素，则称之为关键字（或键）。
若此关键字的每个值均可以唯一标识一个元素，则称之为主关键字，否则，若该关键字可以标识若干个元素，则称之为次关键字。</p>

<p>查找算法的时间性能一般以查找次数来衡量。所谓查找长度是指查找一个元素所进行的关键字的比较次数。常以平均查找次数、最大查找次数来衡量查找算法的性能。</p>

<h5>一、简单顺序查找</h5>

<pre><code>int seq_seach(elementtype A[], int n, keytype x)
{
    int i;
    A[0].key = x;        //设定监视哨
    for (i=n; A[i].key!=x; i--);
    return i;
}
</code></pre>

<p>监视哨是一个小技巧，查找失败时，这里设定的数据是A[1]-A[n]，肯定可以在A[0]中找到该元素，并返回0表示查找失败。如果不设定监视哨，则在每次循环中要判断下标是否越界：for (i=1; i!=n&amp;&amp;A[i].key!=x;i&ndash;); 可以节省一半的时间。</p>

<h5>二、有序表的二分查找</h5>

<pre><code>int bin_search(elementtype A[], int n, keytype x)
{
    int mid, low, high;
    low = 0;
    high = n - 1;
    while (low &lt;= high)
    {
        mid = (low + high) / 2;
        if (x == A[mid].key)
            return mid;
        else if (x &lt; A[mid].key)
            high = mid - 1;
        else
            low = mid + 1;
    }
    return -1;
}
</code></pre>

<p>也可以使用递归算法：</p>

<pre><code>int bin_search(elementtype A[], int low, int high, keytype x)
{
    int mid;
    if (low &lt; high)
        return -1;
    else
    {
        mid = (low + high) / 2;
        if (x == A[mid].key)
            return mid;
        else if (x &lt; A[mid],key)
            return bin_search(A, low, mid - 1, x);
        else
            return bin_search(A, mid - 1, high, x);
    }
}
</code></pre>

<h1>排序</h1>

<ul>
<li>增排序和减排序：如果排序的结果是按关键字从小到大的次序排列的，就是增排序，否则就是减排序。</li>
<li>内部排序和外部排序：如果在排序过程中，数据表中所有数据均在内存中进行，则这类排序为内部排序，否则就是外部排序。</li>
<li>稳定排序和不稳定排序：在排序过程中，如果关键字相同的两个元素的相对次序不变，则称为稳定排序，否则是不稳定排序。</li>
</ul>


<p>在分析算法的时间性能时，主要以算法中用的最多的基本操作的执行次数（或者其数量级）来衡量，这些操作主要是比较、移动和交换元素。有时，可能要用这些次数的平均数来表示。</p>

<h3>一、插入排序</h3>

<p>基本思想：</p>

<blockquote><p>把整个待排序子表看作是左右两部分，其中左边为有序区，右边为无序区，整个排序过程就是把右边无序区中的元素逐个插入到左边的有序区中，以构成新的有序区。
实际中，开始排序时把第一个元素A[0]（或A[1]）看作左边的有序区，然后把剩下的2～N个元素依次插入到有序表中。</p></blockquote>

<pre><code>void insert_sort(elementtype A[n+1])
{
    int i;
    for (i=2; i&lt;=n; i++)
    {
        A[0] = A[i];        //设置监视哨，这个数组同样是从1开始，A[0]就设为监视哨
        j = i - 1;
        while (A[j].key &gt; A[0].key)
        {
            A[j + 1] = A[j];
            j--;
        }
        A[j + 1] = A[0];
    }
}
</code></pre>

<p>明白这种方法的简单原理：
a1 a2 a3 &hellip; a(i-1) ai &hellip;
先将ai临时保存起来，然后把a(i-1)向前只要是比ai大的向后移，再把ai填进去即可。</p>

<h3>二、快速排序</h3>

<p>速度最快的办法！一定要掌握，考试重点。</p>

<p>基本思想：</p>

<blockquote><p>首先，选定一个元素作为中间元素，然后将表中所有元素与该中间元素相比较，将表中比中间元素小的元素调到表的前面，将比中间元素大的元素调到后面，再将中间数放在这两部分之间作为分界点，这样便得到一个划分；然后再对左右两部分分别进行快速排序，如此反复，直到每个子表仅有一个元素或空表为止。
中间数一般选择部分的第一个元素。</p></blockquote>

<pre><code>int partition(elementtype A[n], int s, int t)    //s,t是要排序元素的起点和终点,并返回最后中间元素位置
{
    elementtype x = A[s];    //保存中间元素到临时变量x,以腾出空位
    int i = s;                        //置两端搜索位置的初值
    int j = t;
    while (i != j)        //两端位置重和再停止
    {
        while (i &lt; j &amp;&amp; A[j].key &gt; x.key) j--;    //从后面搜索“小”的元素
        if (i &lt; j)        //如果找到，就调到前面的空位中
        {
            A[i] = A[j];
            i++;
        }
        while (i &lt; j &amp;&amp; A[i].key &lt; x.key) i++;    //从前面搜索“大”的元素
        if (i &lt; j)        //如果找到，调到后面的空位中
        {
            A[j] = A[i];
            j--;
        }
    }
    A[i] = x;        //将中间数移到最终位置上
    return i;
}
</code></pre>

<p>整个算法：</p>

<pre><code>void quick_sort(elementtype A[n], int s, int t)    //对数组中下标从s到t的部分进行快速排序，如果是整个表就是0, n-1
{
    int i;
    if (s &lt; t)    //表中至少有两个元素时
    {
        i = partition(A, s, t);    //划分排序一次
        quick_sort(A, i + 1, t);    //对后面部分快速排序
        quick_sort(A, s, i - 1);    //对前面部分快速排序
    }
}
</code></pre>

<h3>三、选择排序：</h3>

<p>在待排序子表中完整地比较一遍以确定最大（小）元素，并将该元素放在子表的最前（后）面。
【注：可能发觉和冒泡法比较类似，但注意选择法是全部比较一遍，找到最小元素的下标，再进行一次交换，而冒泡则是进行多次交换】</p>

<pre><code>void select_sort(elementtype A[n])
{
   int min, i, j;
   elementtype temp;
   for (i=0; i&lt;n-1; i++)
   {
      min = i;
      for (j=i+1; j&lt;n; j++)
         if (A[min].key &gt; A[j].key) min = j;
      if (min != i)
      {
         temp = A[i];
         A[i] = A[min];
         A[min] = temp;
      }
   }
}
</code></pre>

<h3>四、归并排序</h3>

<p>所谓归并是指将两个或两个以上的有序表合并成一个新的有序表。
归并算法：</p>

<p>假设两个序列A[m]和B[n]为非降序列（即存在相同元素的升序列），现要把他们合并为一个非降序列C[m+n]。</p>

<pre><code>void merge(elementtype A[], elementtype B[], elementtype C[], int m, int n)
{
    int ia = 0, ib = 0, ic = 0;
    while (ia &lt; m &amp;&amp; ib &lt; n)
        if (A[ia] &lt;= B[ib])
            C[ic++] = A[ia++];
        else
            C[ic++] = B[ib++];
    while (ia &lt; m)
        C[ic++] = A[ia++];
    while (ib &lt; n)
        C[ic++] = B[ib++];
}
</code></pre>

<hr />

<pre><code>Q Q：2211523682/790806573

微信：18370997821/13148454507

微博WB:http://weibo.com/u/3288975567?is_hot=1

git博文：http://al1020119.github.io/

github：https://github.com/al1020119
</code></pre>

<p><img src="http://al1020119.github.io/images/iCocosCoder.jpg" title="Caption" ></p>

<p><img src="http://al1020119.github.io/images/iCocosPublic.jpg" title="Caption" ></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[修行篇-算法之精华-算法&amp;冒泡]]></title>
    <link href="http://al1020119.github.io/blog/2016/08/25/xiu-xing-pian-suan-fa-zhi-jing-hua-suan-fa-and-mou-pao/"/>
    <updated>2016-08-25T12:32:56+08:00</updated>
    <id>http://al1020119.github.io/blog/2016/08/25/xiu-xing-pian-suan-fa-zhi-jing-hua-suan-fa-and-mou-pao</id>
    <content type="html"><![CDATA[<ul>
<li><p>冒泡排序（交换）</p>

<ul>
<li>改进</li>
</ul>
</li>
<li><p>快速排序（交换）</p>

<ul>
<li>改进</li>
</ul>
</li>
</ul>


<h2>交换排序—冒泡排序（Bubble Sort）</h2>

<p>基本思想：</p>

<blockquote><p>在要排序的一组数中，对当前还未排好序的范围内的全部数，自上而下对相邻的两个数依次进行比较和调整，让较大的数往下沉，较小的往上冒。即：每当两相邻的数比较后发现它们的排序与排序要求相反时，就将它们互换。
算法的实现：</p></blockquote>

<pre><code>void bubbleSort(int a[], int n){  
    for(int i =0 ; i&lt; n-1; ++i) {  
        for(int j = 0; j &lt; n-i-1; ++j) {  
            if(a[j] &gt; a[j+1])  
            {  
                int tmp = a[j] ; a[j] = a[j+1] ;  a[j+1] = tmp;  
            }  
        }  
    }  
}  
</code></pre>

<h4>改进</h4>

<!--more-->


<blockquote><p>对冒泡排序常见的改进方法是加入一标志性变量exchange，用于标志某一趟排序过程中是否有数据交换，如果进行某一趟排序时并没有进行数据交换，则说明数据已经按要求排列好，可立即结束排序，避免不必要的比较过程。本文再提供以下两种改进算法：</p></blockquote>

<p>1．设置一标志性变量pos,用于记录每趟排序中最后一次进行交换的位置。由于pos位置之后的记录均已交换到位,故在进行下一趟排序时只要扫描到pos位置即可。
改进后算法如下:</p>

<pre><code>void Bubble_1 ( int r[], int n) {  
    int i= n -1;  //初始时,最后位置保持不变  
    while ( i&gt; 0) {   
        int pos= 0; //每趟开始时,无记录交换  
        for (int j= 0; j&lt; i; j++)  
            if (r[j]&gt; r[j+1]) {  
                pos= j; //记录交换的位置   
                int tmp = r[j]; r[j]=r[j+1];r[j+1]=tmp;  
            }   
        i= pos; //为下一趟排序作准备  
     }   
}    
</code></pre>

<p>2．传统冒泡排序中每一趟排序操作只能找到一个最大值或最小值,我们考虑利用在每趟排序中进行正向和反向两遍冒泡的方法一次可以得到两个最终值(最大者和最小者) , 从而使排序趟数几乎减少了一半。
改进后的算法实现为:</p>

<pre><code>void Bubble_2 ( int r[], int n){  
    int low = 0;   
    int high= n -1; //设置变量的初始值  
    int tmp,j;  
    while (low &lt; high) {  
        for (j= low; j&lt; high; ++j) //正向冒泡,找到最大者  
            if (r[j]&gt; r[j+1]) {  
                tmp = r[j]; r[j]=r[j+1];r[j+1]=tmp;  
            }   
        --high;                 //修改high值, 前移一位  
        for ( j=high; j&gt;low; --j) //反向冒泡,找到最小者  
            if (r[j]&lt;r[j-1]) {  
                tmp = r[j]; r[j]=r[j-1];r[j-1]=tmp;  
            }  
        ++low;                  //修改low值,后移一位  
    }   
}   
</code></pre>

<h2>交换排序—快速排序（Quick Sort）</h2>

<p>基本思想：</p>

<ul>
<li><p>1）选择一个基准元素,通常选择第一个元素或者最后一个元素,</p></li>
<li><p>2）通过一趟排序讲待排序的记录分割成独立的两部分，其中一部分记录的元素值均比基准元素值小。另一部分记录的 元素值比基准值大。</p></li>
<li><p>3）此时基准元素在其排好序后的正确位置</p></li>
<li><p>4）然后分别对这两部分记录用同样的方法继续进行排序，直到整个序列有序。</p></li>
</ul>


<p>算法的实现：
 递归实现：</p>

<pre><code>void print(int a[], int n){  
    for(int j= 0; j&lt;n; j++){  
        cout&lt;&lt;a[j] &lt;&lt;"  ";  
    }  
    cout&lt;&lt;endl;  
}  

void swap(int *a, int *b)  
{  
    int tmp = *a;  
    *a = *b;  
    *b = tmp;  
}  
int partition(int a[], int low, int high)  
{  
    int privotKey = a[low];                             //基准元素  
    while(low &lt; high){                                   //从表的两端交替地向中间扫描  
        while(low &lt; high  &amp;&amp; a[high] &gt;= privotKey) --high;  //从high 所指位置向前搜索，至多到low+1 位置。将比基准元素小的交换到低端  
        swap(&amp;a[low], &amp;a[high]);  
        while(low &lt; high  &amp;&amp; a[low] &lt;= privotKey ) ++low;  
        swap(&amp;a[low], &amp;a[high]);  
    }  
    print(a,10);  
    return low;  
}  
void quickSort(int a[], int low, int high){  
    if(low &lt; high){  
        int privotLoc = partition(a,  low,  high);  //将表一分为二  
        quickSort(a,  low,  privotLoc -1);          //递归对低子表递归排序  
        quickSort(a,   privotLoc + 1, high);        //递归对高子表递归排序  
    }  
}  
int main(){  
    int a[10] = {3,1,5,7,2,4,9,6,10,8};  
    cout&lt;&lt;"初始值：";  
    print(a,10);  
    quickSort(a,0,9);  
    cout&lt;&lt;"结果：";  
    print(a,10);  

}  
</code></pre>

<p>分析：</p>

<blockquote><p>快速排序是通常被认为在同数量级（O(nlog2n)）的排序方法中平均性能最好的。但若初始序列按关键码有序或基本有序时，快排序反而蜕化为冒泡排序。为改进之，通常以“三者取中法”来选取基准记录，即将排序区间的两个端点与中点三个记录关键码居中的调整为支点记录。快速排序是一个不稳定的排序方法。
快速排序的改进</p></blockquote>

<h4>改进</h4>

<p>在本改进算法中,只对长度大于k的子序列递归调用快速排序,让原序列基本有序，然后再对整个基本有序序列用插入排序算法排序。实践证明，改进后的算法时间复杂度有所降低，且当k取值为 8 左右时,改进算法的性能最佳。算法思想如下：</p>

<pre><code>void print(int a[], int n){  
    for(int j= 0; j&lt;n; j++){  
        cout&lt;&lt;a[j] &lt;&lt;"  ";  
    }  
    cout&lt;&lt;endl;  
}  
void swap(int *a, int *b)  
{  
    int tmp = *a;  
    *a = *b;  
    *b = tmp;  
}  
int partition(int a[], int low, int high)  
{  
    int privotKey = a[low];                 //基准元素  
    while(low &lt; high){                   //从表的两端交替地向中间扫描  
        while(low &lt; high  &amp;&amp; a[high] &gt;= privotKey) --high; //从high 所指位置向前搜索，至多到low+1 位置。将比基准元素小的交换到低端  
        swap(&amp;a[low], &amp;a[high]);  
        while(low &lt; high  &amp;&amp; a[low] &lt;= privotKey ) ++low;  
        swap(&amp;a[low], &amp;a[high]);  
    }  
    print(a,10);  
    return low;  
}  
void qsort_improve(int r[ ],int low,int high, int k){  
    if( high -low &gt; k ) { //长度大于k时递归, k为指定的数  
        int pivot = partition(r, low, high); // 调用的Partition算法保持不变  
        qsort_improve(r, low, pivot - 1,k);  
        qsort_improve(r, pivot + 1, high,k);  
    }   
}   
void quickSort(int r[], int n, int k){  
    qsort_improve(r,0,n,k);//先调用改进算法Qsort使之基本有序  
    //再用插入排序对基本有序序列排序  
    for(int i=1; i&lt;=n;i ++){  
        int tmp = r[i];   
        int j=i-1;  
        while(tmp &lt; r[j]){  
            r[j+1]=r[j]; j=j-1;   
        }  
        r[j+1] = tmp;  
    }   

}   
int main(){  
    int a[10] = {3,1,5,7,2,4,9,6,10,8};  
    cout&lt;&lt;"初始值：";  
    print(a,10);  
    quickSort(a,9,4);  
    cout&lt;&lt;"结果：";  
    print(a,10);  

}  
</code></pre>

<hr />

<pre><code>Q Q：2211523682/790806573

微信：18370997821/13148454507

微博WB:http://weibo.com/u/3288975567?is_hot=1

git博文：http://al1020119.github.io/

github：https://github.com/al1020119
</code></pre>

<p><img src="http://al1020119.github.io/images/iCocosCoder.jpg" title="Caption" ></p>

<p><img src="http://al1020119.github.io/images/iCocosPublic.jpg" title="Caption" ></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[修行篇-23种设计模式]]></title>
    <link href="http://al1020119.github.io/blog/2016/08/23/xiu-xing-pian-23chong-she-ji-mo-shi/"/>
    <updated>2016-08-23T12:32:39+08:00</updated>
    <id>http://al1020119.github.io/blog/2016/08/23/xiu-xing-pian-23chong-she-ji-mo-shi</id>
    <content type="html"><![CDATA[<h2>设计模式</h2>

<p>总体来说设计模式分为三大类：</p>

<ul>
<li><p>创建型模式，共五种：工厂方法模式、抽象工厂模式、单例模式、建造者模式、原型模式。</p></li>
<li><p>结构型模式，共七种：适配器模式、装饰器模式、代理模式、外观模式、桥接模式、组合模式、享元模式。</p></li>
<li><p>行为型模式，共十一种：策略模式、模板方法模式、观察者模式、迭代子模式、责任链模式、命令模式、备忘录模式、状态模式、访问者模式、中介者模式、解释器模式。</p>

<ul>
<li>其实还有两类：并发型模式和线程池模式。</li>
</ul>
</li>
</ul>


<!--more-->


<h2>创建型模式</h2>

<h3>工厂方法模式</h3>

<p>简单工厂模式的最大优点在于工厂类中包含了必要的逻辑判断，根据客户端输入的选择条件动态的实例化相关的类，对于客户端来说，去除了与具体产品的依赖。</p>

<p>但是简单工厂方法违背了开放——封闭模式。</p>

<h6>1、思想</h6>

<pre><code>工厂方法模式：定义一个用于创建对象的接口，让子类决定实例化哪一个类。工厂方法使一个类的实例化延迟到其子类。
</code></pre>

<h6>2、核心思想</h6>

<pre><code> 核心工厂类不再负责所有产品的创建，而是将具体创建的工作交给了子类去做，成为一个抽象工厂角色，仅仅负责具体工厂类必须实现的接口，而不接触哪一个产品类应当被实例化的细节。
</code></pre>

<h6>3、优缺点分析</h6>

<p>GOOD：修正了简单工厂模式中不遵守开放－封闭原则。工厂方法模式把选择判断移到了客户端去实现，如果想添加新功能就不用修改原来的类，直接修改客户端即可，从而保持了封装对象创建过程的优点。使得更换对象时，不需要做大的改动就可以实现，降低了客户程序与产品对象的耦合。</p>

<p>BAD：每增加一个产品，就需要增加一个产品工厂类，即增加了额外的开发量</p>

<h3>抽象工厂模式</h3>

<h6>一、思想</h6>

<pre><code> 定义一个用于创建对象的接口，让子类决定实例化哪一个类。Factory使一个类的实例化延迟到其子类。（四人团）

实际上： 工厂模式主要就是用于创建对象。新添加类时，不会影响以前的系统代码。
</code></pre>

<h6>二、基本思想</h6>

<p>   核心思想：是用一个工厂来根据输入的条件产生不同的类，然后根据不同类的virtual函数得到不同的结果。</p>

<pre><code> 客户类和工厂类分开，消费者任何时候需要某种产品类对象，只需要向工厂类（有静态成员函数接收）提交参数和请求即可。消费者无需修改（直接用所有产品共同的父类指针指向）就可以接纳和使用新产品类的对象。
</code></pre>

<h6>三、优缺点分析</h6>

<p>GOOD: 适用于不同情况创建不同的类时</p>

<p>BAD：  客户端必须要知道基类和工厂类，耦合性差，而且当产品修改时，工厂类也要做相应修改（如：如何创建及如何向客户端提供）</p>

<h3>单例模式</h3>

<h6>1、思想</h6>

<pre><code>保证一个类仅有一个实例，并提供一个访问它的全局访问点
</code></pre>

<h6>2、核心思想</h6>

<p>确保某个类只有一个实例（类的静态成员变量），而且自行实例化并向整个系统提供这个实例单例模式。</p>

<p>直接将类的构造方法改成私有的（所有类都有构造方法，不编码则系统默认生成空的构造方法，若有显示定义的构造方法，默认的构造方法就会失效），然后在一个public的实例化函数中调用私有构造函数，完成仅有的一次实例化。</p>

<h6>3、优缺点分析</h6>

<p>GOOD:单例模式只应在有真正的“单一实例”的需求时才可使用。</p>

<p>单例模式因为Singleton类封装它的唯一实例，这样它可以严格地控制客户怎样访问它以及何时访问它，简单的说就是对唯一实例的受控访问。</p>

<h3>建造者模式</h3>

<h6>1、思想</h6>

<pre><code>建造者模式：将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示
</code></pre>

<h6>2、核心思想</h6>

<pre><code> 将产品的内部表象和产品的生成过程分割开来，从而使一个建造过程生成具有不同的内部表象的产品对象。建造模式使得产品内部表象可以独立的变化，客户不必知道产品内部组成的细节。
</code></pre>

<p>即用户就只需要指定需要建造的类型就可以得到产品，而具体的建造过程和细节就不需要知道了。</p>

<p>建造模式可以强制实行一种分步骤进行的建造过程。</p>

<h6>3、优缺点分析</h6>

<p>GOOD：使得建造代码与表示代码分离，由于建造者隐藏了该产品是如何组装的，所以若需要改变一个产品的内部表示，只需要再定义一个具体的建造者就可以了。</p>

<h6>适用于：</h6>

<p>（1）在当创建复杂对象的算法应该独立于该对象的组成部分以及它们的装配方式时适用。</p>

<p>就是说：主要用于创建一些复杂的对象，这些对象内部的构建顺序通常是稳定的，但是对象内部的具体各个构建方法通常面临着复杂的变化。</p>

<p>（2）当构造过程必须允许被构造的对象有不同的表示时。</p>

<h3>原型模式</h3>

<h6>1、思想</h6>

<pre><code>原型模式：用原型实例指定创建对象的种类，并且通过拷贝这些原型创建新的对象。
</code></pre>

<h6>2、核心思想</h6>

<pre><code> 通过给出一个原型对象来指明所要创建的对象的类型，然后用复制这个原型对象的方法创建出更多同类型的对象。原型模式允许动态的增加或减少产品类，产品类不需要非得有任何事先确定的等级结构。
</code></pre>

<h6>3、优缺点分析</h6>

<p>GOOD：</p>

<p>从一个对象再创建另外一个可定制的对象，而无需知道任何创建的细节。并能提高创建的性能。 说白了就COPY技术，把一个对象完整的COPY出一份。</p>

<p>一般在初始化的信息不发生变化的情况下，克隆是最好的办法。这既隐藏了对象创建的细节，又对性能是大大的提高。
BAD：</p>

<p>缺点是每一个类都必须配备一个复制方法。
必须注意：</p>

<p>浅复制和深复制的问题：如果字段是基本数据类型的，则用拷贝构造函数即可进行逐位复制，但如果字段是指针或引用类型的，则复制就不仅仅要复制指针和引用本身，还需要对其所指的实际数据对象进行复制。</p>

<h2>结构型模式</h2>

<h3>适配器模式</h3>

<h6>1、思想</h6>

<pre><code>把一个类的接口变换成客户端所期待的另一种接口，从而使原本因接口不兼容而无法一起工作的两个类能够一起工作。
</code></pre>

<h6>2、优缺点分析</h6>

<p>适用情况：当系统的数据和行为都正确，但接口不符时，我们应该考虑使用适配器，目的是使控制范围之外的一个原有对象与某个接口匹配。适配器模式主要应用于希望复用一些现存的类，但是接口又与复用环境要求不一致的情况。
装饰器模式</p>

<h3>装饰模式</h3>

<h6>1、思想</h6>

<pre><code>装饰模式：动态的给一个对象添加一些额外的职责（不重要的功能，只是偶然一次要执行）。就增加功能来说，Decorator模式比使用继承生成子类更为灵活。

 建造过程不稳定，需要把所需的功能按正确的顺序串联起来进行控制。
</code></pre>

<h6>2、优缺点分析</h6>

<p>GOOD:当你向旧的类中添加新代码时，一般是为了添加核心职责或主要行为。而当需要加入的仅仅是一些特定情况下才会执行的特定的功能时（简单点就是不是核心应用的功能），就会增加类的复杂度。</p>

<pre><code>装饰模式就是把要添加的附加功能分别放在单独的类中，并让这个类包含它要装饰的对象，

当需要执行时，客户端就可以有选择地、按顺序地使用装饰功能包装对象。
</code></pre>

<h3>代理模式</h3>

<h6>一、思想</h6>

<pre><code>代理模式：为其他对象提供一种代理以控制对这个对象的访问
</code></pre>

<h6>二、基本思想</h6>

<pre><code> 代理模式实际就是在访问对象时引入一定程度的间接性，因为这种间接性，可以附加多种用途。
</code></pre>

<h6>三、优缺点分析</h6>

<p>GOOD：（适用场合）</p>

<p>远程代理：也就是为一个对象在不同的地址空间提供局部代表，这样可以隐藏一个对象在不同地址空间的事实。</p>

<pre><code>              例如：客户端程序调用代理就可以解决远程访问的问题
</code></pre>

<p>虚拟代理：是根据需要创建开销很大的对象，通过代理来存放实例化需要很长时间的真实对象，从而达到性能的最优化（例如浏览器使用代理模式来优化下载）。</p>

<pre><code>              例如：打开大网页时，未马上打开的图片就是通过虚拟代理来替代了真实的图片，而代理存储了真实图片的路径和尺寸。
</code></pre>

<p>安全代理：用来控制真实对象的访问权限</p>

<p>智能引用：当调用真实对象时，代理处理另外一些事</p>

<h3>外观模式</h3>

<h6>1、思想</h6>

<pre><code>外观模式：为子系统中的一组接口提供一个一致的界面，此模式定义了一个高层接口，这个接口使得这一子系统更加容易使用。
</code></pre>

<h6>2、核心思想</h6>

<pre><code> 外部与一个子系统的通信必须通过一个统一的外观对象进行。外观模式提供一个高层次的接口，使得子系统更易于使用。每一个子系统只有一个外观类，而且此外观类只有一个实例，也就是还说它是一个单例模式。但整个系统可以有多个外观类。
</code></pre>

<h6>3、优缺点分析</h6>

<p>GOOD：</p>

<p>为子系统的一组接口提供一个一致的界面。使用户使用起来更加方便。</p>

<pre><code>完美体现了依赖倒转原则和迪米特原则
</code></pre>

<p>适用情况：</p>

<pre><code>分三个阶段：

1、首先，在设计初期阶段，应该有意识的将不同的两个层分离，即在层与层之间建立外观Facade

2、其次，在开发阶段，子系统往往因为不断的重构演化，而变得越来越复杂，增加外观Facade可以提供一个简单的接口，减少它们之间的依赖。

3、在维护一个遗留的大型系统时，可能这个系统已经非常难以维护和扩展了，就可以为新系统开发一个外观Facade类，来提供设计粗糙或高度复杂的遗留代码的比较清晰简单的接口，让新系统与Facade对象交互，Facade与遗留代码交互所有复杂的工作。
</code></pre>

<h3>桥接模式</h3>

<h6>1、合成聚合原则</h6>

<p>缘由：对象的继承关系是在编译时就定义好了，所以无法在运行时改变从父类继承的实现。子类的实现与它的父类有非常紧密的依赖关系，以至于父类实现中的任何变化必然会导致子类发生变化。当你需要复用子类时，如果继承下来的实现不适合解决新的问题，则父类必须重写或被其他更适合的类替换。这种依赖关系限制了灵活性并最终限制了复用性。</p>

<p>原则：</p>

<pre><code>合成/聚合原则(CARP)：尽量使用合成/聚合，尽量不要使用类继承
</code></pre>

<ul>
<li><p>聚合：一种弱的’拥有’关系，体现的是A对象可以包含B对象，但B对象不是A对象的一部分</p></li>
<li><p>合成：一种强的’拥有’关系，体现了严格的部分和整体的关系，部分和整体的生命周期一样。</p></li>
</ul>


<h6>合成聚合的好处：</h6>

<p>优先使用对象的合成/聚合将有助于你保持每个类被封装，并被集中在单个任务上，这样类和类继承层次会保持较小规模，并且不太可能增长为不可控制的庞然大物。</p>

<h6>2、桥模式思想</h6>

<pre><code>桥接模式(Bridge)：将抽象部分与它的实现部分分离，使它们都可以独立地变化
</code></pre>

<p>抽象与实现分离：指的是抽象类和它的派生类用来实现自己的对象</p>

<h6>3、核心思想</h6>

<p>桥模式就是将抽象化与实现化脱耦，使得二者可以独立的变化，也就是说将他们之间的强关联变成弱关联，也就是指在一个软件系统的抽象化与实现化之间使用组合/聚合关系而不是继承关系，从而让二者独立的变化。</p>

<h6>4、优缺点分析</h6>

<p>GOOD：</p>

<pre><code>将抽象部分与实现部分分离，使它们可以独立变化。

这里说的意思不是让抽象基类与具体类分离，而是现实系统可能有多角度分类，每一种分类都有可能变化，那么把这种多角度分离出来让它们独立变化，减少它们之间的耦合性，即如果继承不能实现“开放－封闭原则”的话，就应该考虑用桥接模式 
</code></pre>

<h3>组合模式</h3>

<h6>1、思想</h6>

<pre><code>组合模式：将对象组合成树形结构以表示“部分——整体”的层次结构。组合模式使得用户对单个对象和组合对象的使用具有一致性
</code></pre>

<h6>2、优缺点分析</h6>

<p>GOOD：</p>

<pre><code>整体和部分可以被一致对待（如WORD中复制一个文字、一段文字、一篇文章都是一样的操作）

用户不用关心到底是处理一个叶结点还是处理一个组合组件，也就不用为定义组合而写一些选择判断语句，即用户可以一致的使用组合结构和单个对象。
</code></pre>

<h6>适用情况：</h6>

<p>当需求中是体现部分与整体层次的结构时，以及希望用户可以忽略组合对象与单个对象的不同，统一地使用组合结构中的所有对象时，就应该考虑用组合模式</p>

<h3>享元模式。</h3>

<h6>1、思想</h6>

<pre><code>享元模式：运用共享技术有效地支持大量细粒度的对象
</code></pre>

<h6>2、核心思想</h6>

<pre><code>  享元模式以共享的方式高效的支持大量的细粒度对象。享元模式能做到共享的关键是区分内蕴状态和外蕴状态。

 内蕴状态存储在享元内部，不会随环境的改变而有所不同。外蕴状态是随环境的改变而改变的。外蕴状态不能影响内蕴状态，它们是相互独立的。

  将可以共享的状态和不可以共享的状态从常规类中区分开来，将不可以共享的状态从类里剔除出去。

  客户端不可以直接创建被共享的对象，而应当使用一个工厂对象负责创建被共享的对象。享元模式大幅度的降低内存中对象的数量。
</code></pre>

<h6>3、优缺点分析</h6>

<p>GOOD：</p>

<pre><code>（1）运用共享技术有效地支持大量细粒度的对象（对于C++来说就是共用一个内存块啦，对象指针指向同一个地方）。

（2）如果一个应用程序使用了大量的对象，而这些对象造成了很大的存储开销就应该考虑使用。

（3）还有就是对象的大多数状态可以外部状态，如果删除对象的外部状态，那么可以用较少的共享对象取代多组对象，此时可以考虑使用享元。 
</code></pre>

<h2>行为型模式</h2>

<h3>策略模式</h3>

<h6>一、思想</h6>

<pre><code> 定义一系列的算法，把它们一个个封装起来，并且使它们可相互替换，本模式使得算法可独立于使用它的客户而变化——四人团
</code></pre>

<h6>二、基本思想</h6>

<pre><code>定义算法家族，分别封装起来，让它们之间可以互相替换，让算法的变化，不会影响到使用算法的用户。
</code></pre>

<h6>三、优缺点分析</h6>

<p>GOOD:</p>

<p>（1）策略模式是一种定义一系列算法的方法，从概念上看，所有这些算法完成的都是相同的工作，只是实现不同。</p>

<pre><code>   所以使用策略模式，就可以以相同的方式调用所有的算法，减少了各种算法类与使用算法类之间的耦合。
</code></pre>

<p>（2）策略模式的Strategy类层次为Context定义了一系列的可供重用的算法或行为。继承有助于析取出这些算法中的公共功能</p>

<p>（3）简化了单元测试（因为每个算法都有自己的类，可以通过自己的接口单独测试）</p>

<p>BUG:客户端要做出判断使用哪个具体算法（可通过在context中与工厂模式的结合来消除这个问题，虽然当新增加需求时，还是要改context中的代码，但是任何需求的变更本身就是需要成本的）
四、适用情况</p>

<pre><code> 策略模式和简单工厂基本相同，但简单工厂模式只能解决对象创建问题，对于类中的成员以方法为主，而且算法经常变动的类，应使用策略模式。

 在实践中，策略模式实际上可以封装几乎任何类型的规则，只要在分析过程中听到需要不同时间应用不同的业务规则，就可以考虑使用策略模式处理这种变化的可能性。
</code></pre>

<h3>模板方法模式</h3>

<h6>1、思想</h6>

<pre><code>定义一个操作中的算法的骨架，而将一些步骤延迟到子类中。template method使得子类可以不改变一个算法的结构即可重定义该算法的某些特定步骤
</code></pre>

<h6>2、核心思想</h6>

<pre><code> 模板方法模式准备一个抽象类，将部分逻辑以具体方法以及具体构造子类的形式实现，然后声明一些抽象方法来迫使子类剩余的逻辑。不同的子类可以以不同的方式实现这些抽象方法，从而对剩余的逻辑有不同的实现。先制定一个顶级逻辑框架，而将逻辑的细节留给具体的子类去实现。

 当要完成在某一细节层次一致的一个过程或一系列步骤，但其个别步骤在更详细的层次上的实现可能不同时，通常考虑用模板方法来处理。也就是说：有时候，我们遇到由一系列步骤构成的过程需要执行。这个过程从高层次上看是相同的，但从底层看有些具体步骤实现又可能不同，这时候，就要考虑使用模板方法模式。
</code></pre>

<h6>3、优缺点分析</h6>

<p>GOOD：</p>

<pre><code>把不变的代码部分都转移到父类中，将可变的代码用virtual留到子类重写，从而提供了一个很好的代码复用平台。
</code></pre>

<p>即当不变的和可变的行为在方法的子类实现中混合在一起的时候，不变的行为就会在子类中重复出现。我们就可以通过模板方法模式把这些行为搬移到单一的地方，这样就帮助子类摆脱重复的不变行为的纠缠。</p>

<h3>观察者模式</h3>

<h6>1、思想</h6>

<pre><code>定义对象间的一种一对多的依赖关系，让多个观察者对象同时监听某一个主题对象。这个主题对象在状态发生改变时，会通知所有观察者对象，使它们能够自动更新自己。
</code></pre>

<h6>2、核心思想</h6>

<pre><code> 观察者模式定义了一种一对多的依赖关系，让多个观察者对象同时监听某一个主题对象。这个主题对象在状态上发生变化时，会通知所有观察者对象，使他们能够自动更新自己。
</code></pre>

<h6>使用动机：</h6>

<p>　　将一个系统分割成一系列相互协作的类有一个很不好的副作用，那就是需要维护相关对象间的一致性。我们不希望为了维持一致性而使各类紧密耦合，这样会给维护、扩展和重用都带来不便。</p>

<h6>本模式适用情况：</h6>

<p>（1）当一个对象的改变需要同时改变其他对象的时候，而且它不知道具体有多少对象有待改变时，应该考虑使用观察者模式。</p>

<p>（2）当一个抽象模型有两个方面，其中一方面依赖于另一方面，这时用观察者模式可以将这两者封装在独立的对象中，使它们各自独立地改变和复用。
总结：</p>

<pre><code>观察者模式所做的工作其实就是解除耦合，让耦合的双方都依赖于抽象，而不是依赖于具体。从而使得各自的变化都不会影响另一边的变化。

本模式是依赖倒置原则的最佳体现！

设计原则：为了交互对象之间的松耦合设计而奋斗到底！
</code></pre>

<h6>3、优缺点分析</h6>

<p>GOOD：</p>

<pre><code>定义了一种一对多的关系，让多个观察对象（公司员工）同时监听一个主题对象（秘书），主题对象状态发生变化时，会通知所有的观察者，使它们能够更新自己。
</code></pre>

<p>BAD:</p>

<pre><code>尽管使用了“依赖倒置原则”，但是“抽象通知者”还是依赖于“抽象观察者”。而且每个具体观察者不一定是“更新”方法需要调用。

在.net中可通过事件委托方法，使得通知者和观察者之间根本就互相不知道。  
</code></pre>

<h3>迭代子模式</h3>

<h6>1、思想</h6>

<pre><code>迭代器模式：提供一种方法顺序访问一个聚合对象中各个元素，而又不暴露该对象的内部表示。
</code></pre>

<h6>2、核心思想</h6>

<h6>3、优缺点分析</h6>

<p>适用情况：</p>

<p>（1）当需要访问一个聚集对象，而且不管这些对象是什么都需要遍历的时候，就应该考虑使用迭代器模式</p>

<p>（2）当需要对聚集有多种方式遍历时，可以考虑使用迭代器模式</p>

<p>GOOD：</p>

<pre><code>提供一种方法顺序访问一个聚敛对象的各个元素，而又不暴露该对象的内部表示。

为遍历不同的聚集结构提供如开始，下一个，是否结束，当前一项等统一接口。 
</code></pre>

<h3>责任链模式</h3>

<h6>1、思想</h6>

<pre><code>使多个对象都有机会处理请求，从而避免请求的发送者和接收者之间的耦合关系，将这些对象连成一条链，并沿着这条链传递该请求，直到有一个对象处理它为止。
</code></pre>

<h6>2、核心思想</h6>

<p>在责任链模式中，很多对象由每一个对象对其下家的引用而接起来形成一条链。请求在这个链上传递，直到链上的某一个对象决定处理此请求。客户并不知道链上具体的哪一个对象最终处理了这个请求，系统可以在不影响客户端的情况下，动态的重新组织链和分配责任。处理者有两个选择：承担责任或者把责任推给下家。一个请求可以最终不被任何接收端对象所接受。</p>

<h6>3、优缺点分析</h6>

<p>关键点：当客户提交一个请求时，请求是沿链传递直至有一个ConcreteHandler对象负责处理它。</p>

<p>GOOD：</p>

<pre><code>（1）这就使得接受者和发送者之间都没有对方明确的信息，且链中的对象自己也并不知道整个链的结构。结果是职责链可简化对象的相互连接，它们仅需保持一个指向其后继者的引用，而不需要保持它所有的候选接受者的引用。

（2）可以随时地增加或修改一个请求的结构，增强了给对象指派职责的灵活性

（3）一个请求极有可能到了链的末端都得不到处理，或者因为没有正确配置而得不到处理
</code></pre>

<h3>命令模式</h3>

<h6>1、思想</h6>

<pre><code>命令模式：将一个请求封装为一个对象，从而使你可用不同的请求对客户进行参数化；对请求排队或记录请求日志，以及支持可撤销的操作
</code></pre>

<h6>2、核心思想</h6>

<p>命令模式：把一个请求或者操作封装到一个对象中，命令模式把发出命令的责任和执行命令的责任分割开来，委派给不同的对象。命令模式允许请求的一方和发送的一方独立开来，使得请求的一方不必知道接收请求的一方的接口，更不必知道请求是怎么被接收，以及操作是否执行，何时被执行以及是怎么被执行的。</p>

<h6>3、优缺点分析</h6>

<p>GOOD：</p>

<pre><code>一、能较容易地建立一个命令队列；

二、在需要的情况下，可以较容易地将命令记入日志；

三、允许接收请求的一方是否拒绝请求；

四、可以容易地实现对请求的撤销和重做，

五、由于加进新的具体命令类不影响其他的类，因此添加一个新命令类不影响其它类；
</code></pre>

<p>最关键的优点：命令模式把请求一个操作的对象与知道怎么操行一个操作的对象分开</p>

<p>适用原则：敏捷开发原则告诉我们，不要为代码添加基于猜测的、实际不需要的功能。如果不清楚一个系统是否需要命令模式，一般不要着急去实现它，事实上、在需要的时候通过重构实现这个模式并不困难，只有在真正需要如撤销、恢复等操作功能时，才把原有的代码重构为命令模式才有意义。</p>

<h3>备忘录模式</h3>

<h6>1、思想</h6>

<pre><code>在不破坏封装的条件下，将一个对象的状态捉住，并在该对象外部保存这个状态，从而可以在将来合适的时候把这个对象还原到存储起来的状态。
</code></pre>

<h6>2、核心思想</h6>

<pre><code> 备忘录对象是一个用来存储另外一个对象内部状态的快照的对象。
</code></pre>

<h6>3、优缺点分析</h6>

<p>适用于功能比较复杂的，但需要记录或维护属性历史的类；或者需要保存的属性只是众多属性中的一小部分时Originator可以根据保存的Memo还原到前一状态。</p>

<h3>状态模式</h3>

<h6>1、思想</h6>

<pre><code>状态模式：当一个对象的内在状态改变时允许改变其行为，这个对象看起来像是改变了其类。
</code></pre>

<h6>2、核心思想</h6>

<pre><code> 状态模式允许一个对象在其内部状态改变的时候改变行为。这个对象看上去像是改变了它的类一样。状态模式把所研究的对象的行为包装在不同的状态对象里，每一个状态对象都属于一个抽象状态类的一个子类。状态模式的思想是让一个对象在其内部状态改变的时候，其行为也随之改变。状态模式需要对每一个系统可能取得的状态创立一个状态类的子类。当系统的状态变化时，系统便改变所选的子类。

 状态模式主要解决的是当控制一个对象状态转换的条件表达式过于复杂时的情况。把状态的判断逻辑转移到表示不同状态的一系列类当中，可以把复杂的判断逻辑简化。
</code></pre>

<h6>3、优缺点分析</h6>

<ul>
<li><p>优点：</p>

<ul>
<li><p>状态模式的好处是将与特定状态相关的行为局部化，并且将不同状态的行为分割开来。</p>

<pre><code>  即：将特定的状态相关的行为都放入一个对象中，由于所有与状态相关的代码都存在于某个ConcreteState中，所以通过定义新的子类可以很容易地增加新的状态和转换。
</code></pre></li>
<li><p>消除了庞大的条件分支语句，并且通过把各种状态转移逻辑分布到State的子类之间，来减少相互间的依赖。
适用情况：</p></li>
<li><p>当一个对象的行为取决于它的状态，并且它必须在运行时刻根据状态改变它的行为时，可考虑用到状态模式。</p></li>
</ul>
</li>
</ul>


<h3>中介者模式</h3>

<h6>1、思想</h6>

<pre><code>中介者模式：用一个中介对象来封装一系列的对象交互。中介者使各对象不需要显式地相互引用，从而使其耦合松散，而且可以独立地改变它们之间的交互
</code></pre>

<h6>2、核心思想</h6>

<p>包装了一系列对象相互作用的方式，使得这些对象不必相互明显作用。从而使他们可以松散耦合。当某些对象之间的作用发生改变时，不会立即影响其他的一些对象之间的作用。保证这些作用可以彼此独立的变化。调停者模式将多对多的相互作用转化为一对多的相互作用。调停者模式将对象的行为和协作抽象化，把对象在小尺度的行为上与其他对象的相互作用分开处理。</p>

<h6>3、优缺点分析</h6>

<p>中介者模式很容易在系统中应用，也很容易在系统中误用。当系统中出现了’多对多’交互复杂的对象群时，不要急于使用中介者模式，而要反思你的系统在设计上是不是合理。</p>

<p>GOOD:</p>

<p>（1）Mediator的出现减少了各个Colleague的耦合，使得可以独立地改变和复用各个Colleague类和Mediator</p>

<p>（2）由于把对象如何协作进行了抽象，将中介作为一个独立的概念并将其封装在一个对象中，这样关注的对象就从对象各自本身的行为转移到了它们之间的交互上来，也就是站在一个更宏观的角度去看待系统。</p>

<p>BAD:</p>

<p>由于ConcreteMediator控制了集中化，于是就把交互复杂性变为了中介者的复杂性，这就使得中介者会变得比任何一个ConcreteColleague都复杂。</p>

<h6>适用场合：</h6>

<p>中介者模式一般应用于一组对象以定义良好但是复杂的方式进行通信的场合，以及想定义一个分布在多个类中的行为，而又不想生成太多的子类的场合。</p>

<h3>解释器模式</h3>

<h6>思想</h6>

<pre><code>Interpreter是一种特殊的设计模式，它建立一个解释器，对于特定的计算机程序设计语言，用来解释预先定义的文法。简单地说，Interpreter模式是一种简单的语法解释器构架。

给定一个语言，定义它的文法表示，并定义一个解释器，这个解释器使用该标识来解释语言中的句子。
</code></pre>

<h6>适用场景：</h6>

<pre><code>    1.当有一个语言需要解释执行，并且你可将该语言中的句子表示为一个抽象语法树，可以使用解释器模式。而当存在以下情况时该模式效果最好

    2.该文法的类层次结构变得庞大而无法管理。此时语法分析程序生成器这样的工具是最好的选择。他们无需构建抽象语法树即可解释表达式，这样可以节省空间而且还可能节省时间。

    3.效率不是一个关键问题，最高效的解释器通常不是通过直接解释语法分析树实现的，而是首先将他们装换成另一种形式，例如，正则表达式通常被装换成状态机，即使在这种情况下，转换器仍可用解释器模式实现，该模式仍是有用的
</code></pre>

<h6>优缺点：</h6>

<ul>
<li><p>优点： 1、可扩展性比较好，灵活。 2、增加了新的解释表达式的方式。 3、易于实现简单文法。</p></li>
<li><p>缺点： 1、可利用场景比较少。 2、对于复杂的文法比较难维护。 3、解释器模式会引起类膨胀。 4、解释器模式采用递归调用方法。</p></li>
</ul>


<h3>访问者模式</h3>

<h6>思想：</h6>

<pre><code>封装某些作用于某种数据结构中各元素的操作，它可以在不改变数据结构的前提下定义作用于这些元素的新的操作。
</code></pre>

<h6>优点</h6>

<pre><code>符合单一职责原则：凡是适用访问者模式的场景中，元素类中需要封装在访问者中的操作必定是与元素类本身关系不大且是易变的操作，使用访问者模式一方面符合单一职责原则，另一方面，因为被封装的操作通常来说都是易变的，所以当发生变化时，就可以在不改变元素类本身的前提下，实现对变化部分的扩展。
扩展性良好：元素类可以通过接受不同的访问者来实现对不同操作的扩展。
</code></pre>

<h6>访问者模式的适用场景</h6>

<pre><code>   假如一个对象中存在着一些与本对象不相干（或者关系较弱）的操作，为了避免这些操作污染这个对象，则可以使用访问者模式来把这些操作封装到访问者中去。

   假如一组对象中，存在着相似的操作，为了避免出现大量重复的代码，也可以将这些重复的操作封装到访问者中去。
</code></pre>

<hr />

<h4>其他：</h4>

<h3>单一职责原则</h3>

<pre><code>就一个类而言，应该仅有一个引起它变化的原因。
</code></pre>

<p>　　如果一个类承担的职责过多，就等于把这些职责耦合在一起，一个职责的变化可能会削弱或者抑制这个类完成其它职责能力。这种耦合会导制脆弱的设计，当变化发生时，设计会遭受到意想不到的破坏。</p>

<pre><code>软件设计真正要做的许多内容，就是发现职责并把那些职责相互分离。

如果你能够想到多于一个的动机去改变一个类，那么这个类就具有多于一个的职责。
</code></pre>

<h3>开放——封闭原则</h3>

<h6>一、基本概念</h6>

<pre><code>  OCP: 软件实体（类、模块、函数等）应该可以扩展，但是不可修改。

 解释：即对于扩展是开放的，对于修改是封闭的。
</code></pre>

<h6>二、实际技巧</h6>

<pre><code> 实际上，无论模式多么的‘封闭’，都会存在一些无法对之封闭的变化，既然不可能完全封闭，设计人员必须对于他设计的模块应该对哪种变化封闭做出选择。他必须先猜测出最有可能发生的变化种类，然后构造抽象来隔离那些变化。

 即：当变化发生时，我们就创建抽象来隔离以后发生同类的变化。（等到变化发生时立即采取行动）    

 面对需求，对程序的改动是通过增加代码来完成的，而不是改动现有的代码。（例如简单工厂模式思想）
</code></pre>

<h6>三、优点</h6>

<pre><code> 开放――封闭原则是面向对象的核心所在。这个原则所带来的优点就是可维护、可扩展、可复用、灵活型好。

 开发人员应该对程序中呈现出频繁变化的那部分做出抽象，拒绝对任何部分都刻意抽象及不成熟的抽象。
</code></pre>

<h3>里氏代换原则</h3>

<h6>一、基本概念</h6>

<pre><code>  抽象不应该依赖细节，细节应该依赖抽象。即针对接口编程，不要对实现编程。

A：高层模块不能依赖低层模块，两者都应依赖抽象。

B：抽象不应该依赖细节，细节应该依赖抽象。 
</code></pre>

<h6>二、里氏代换原则（LSP）</h6>

<pre><code>子类型必须能够替换掉它们的父类型
</code></pre>

<p>解释：一个软件实体如果使用的是一个父类的话，那么一定适用于其子类，而且它察觉不出父类对象和子类对象的区别。</p>

<pre><code>   也就是说，在软件里面，把父类都替换成它的子类，程序的行为没有变化。

   只有当子类可以替换父类，软件单位的功能不受到影响时，父类才真正被复用，而子类也能够在父类的基础上增加新的行为。

   所以，正是由于子类型的可替换性才使得使用父类类型的模块在无需修改的情况下就可以扩展。
</code></pre>

<h3>最少知识原则</h3>

<h6>一、基本概念</h6>

<pre><code>迪米特法则：如果两个类不直接通信，那么这两个类就不应当发生直接的相互作用。如果一个类需要调用另一个类的某个方法的话，可以通过第三个类转发这个调用。
</code></pre>

<h6>二、核心思想</h6>

<pre><code> 在类的结构设计上，每一个类都应该尽量降低成员的访问权限。也就是说：一个类包装好自己的private状态，不需要让别的类知道的字段或行为就不要公开。

迪米特原则的根本思想：强调了类之间的松耦合。     

 类之间的耦合越弱，越有利于复用，一个处在弱耦合的类被修改，不会对有关系的类造成波及。

  该法则在后面的适配器模式、解释模式等中有强烈的体现。    
</code></pre>

<hr />

<hr />

<h2>总结：</h2>

<ul>
<li><p>1、当涉及到“维护”时，为了“复用”目的而使用继承，并不是最好的方法。</p></li>
<li><p>2、利用继承来提供对象的行为，会导致以下缺点：</p>

<ul>
<li><p>1）代码在多个子类中重复；</p></li>
<li><p>2）运行时的行为不容易改变；</p></li>
<li><p>3）很难知道所有子类的全部行为；</p></li>
<li><p>4）改变父类会牵一发而动全身，造成其他子类不想要的改变；</p></li>
</ul>
</li>
<li><p>3、使用接口（JAVA）或虚基类加多重继承（C++）方法，则会需要对需要维护的代码中的每个子类都分别考虑其特有方法的继承来源。</p></li>
<li><p>4、设计原则：找出应用中可能需要变化之处，把它们独立出来，不要和那些不需要变化的代码混在一起。即：把会变化的部分取出并“封装”起来，以便以后可以轻易的改动或扩充此部分，而不影响不需要变化的部分。</p></li>
<li><p>5、设计原则：针对接口编程，而不是针对实现编程。</p></li>
</ul>


<p>将对象的行为放在分开的类中，此类专门提供某行为接口的实现，并且在对象类中包含可设定行为的方法，使得程序可在“运行时”动态的改变特定对象的行为。</p>

<ul>
<li>6、封装行为的大局观</li>
</ul>


<p>设计原则：多用组合，少用继承</p>

<ul>
<li><p>7、策略模型：定义了算法族，分别封装起来，让它们之间可以相互替换，此模式让算法的变化独立于使用算法的客户。</p></li>
<li><p>8、设计模式的名词使用主要为了程序员间交流方便</p></li>
</ul>


<hr />

<pre><code>Q Q：2211523682/790806573

微信：18370997821/13148454507

微博WB:http://weibo.com/u/3288975567?is_hot=1

git博文：http://al1020119.github.io/

github：https://github.com/al1020119
</code></pre>

<p><img src="http://al1020119.github.io/images/iCocosCoder.jpg" title="Caption" ></p>

<p><img src="http://al1020119.github.io/images/iCocosPublic.jpg" title="Caption" ></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[修行篇-七大查找算法]]></title>
    <link href="http://al1020119.github.io/blog/2016/08/20/xiu-xing-pian-qi-da-cha-zhao-suan-fa/"/>
    <updated>2016-08-20T12:32:08+08:00</updated>
    <id>http://al1020119.github.io/blog/2016/08/20/xiu-xing-pian-qi-da-cha-zhao-suan-fa</id>
    <content type="html"><![CDATA[<p>阅读目录</p>

<ul>
<li><p>1、顺序查找</p></li>
<li><p>2、二分查找</p></li>
<li><p>3、插值查找</p></li>
<li><p>4、斐波那契查找</p></li>
<li><p>5、树表查找</p></li>
<li><p>6、分块查找</p></li>
<li><p>7、哈希查找</p></li>
</ul>


<p>查找是在大量的信息中寻找一个特定的信息元素，在计算机应用中，查找是常用的基本运算，例如编译程序中符号表的查找。</p>

<!--more-->


<blockquote><p>本文简单概括性的介绍了常见的七种查找算法，说是七种，其实二分查找、插值查找以及斐波那契查找都可以归为一类——插值查找。插值查找和斐波那契查找是在二分查找的基础上的优化查找算法。树表查找和哈希查找会在后续的博文中进行详细介绍。</p></blockquote>

<p>查找定义：根据给定的某个值，在查找表中确定一个其关键字等于给定值的数据元素（或记录）。</p>

<p>查找算法分类：</p>

<p>1）静态查找和动态查找；</p>

<pre><code>注：静态或者动态都是针对查找表而言的。动态表指查找表中有删除和插入操作的表。
</code></pre>

<p>2）无序查找和有序查找。</p>

<pre><code>无序查找：被查找数列有序无序均可；

有序查找：被查找数列必须为有序数列。
</code></pre>

<p>平均查找长度（Average Search Length，ASL）：</p>

<ul>
<li>需和指定key进行比较的关键字的个数的期望值，称为查找算法在查找成功时的平均查找长度。</li>
</ul>


<p>对于含有n个数据元素的查找表，查找成功的平均查找长度为：ASL = Pi*Ci的和。</p>

<pre><code>Pi：查找表中第i个数据元素的概率。

Ci：找到第i个数据元素时已经比较过的次数。
</code></pre>

<h3>1、顺序查找</h3>

<ul>
<li>说明：顺序查找适合于存储结构为顺序存储或链接存储的线性表。</li>
</ul>


<p>基本思想：</p>

<pre><code>顺序查找也称为线形查找，属于无序查找算法。从数据结构线形表的一端开始，顺序扫描，依次将扫描到的结点关键字与给定值k相比较，若相等则表示查找成功；若扫描结束仍没有找到关键字等于k的结点，表示查找失败。
</code></pre>

<p>复杂度分析：　</p>

<pre><code>查找成功时的平均查找长度为：（假设每个数据元素的概率相等） ASL = 1/n(1+2+3+…+n) = (n+1)/2 ;
</code></pre>

<p>当查找不成功时，需要n+1次比较，时间复杂度为O(n);</p>

<blockquote><p>所以，顺序查找的时间复杂度为O(n)。</p></blockquote>

<pre><code>//顺序查找
int SequenceSearch(int a[], int value, int n)
{
    int i;
    for(i=0; i&lt;n; i++)
        if(a[i]==value)
            return i;
    return -1;
}
</code></pre>

<h3>2、二分查找</h3>

<blockquote><p>说明：元素必须是有序的，如果是无序的则要先进行排序操作。</p></blockquote>

<p>基本思想：</p>

<pre><code>也称为是折半查找，属于有序查找算法。用给定值k先与中间结点的关键字比较，中间结点把线形表分成两个子表，若相等则查找成功；若不相等，再根据k与该中间结点关键字的比较结果确定下一步查找哪个子表，这样递归进行，直到查找到或查找结束发现表中没有这样的结点。
</code></pre>

<p>复杂度分析：</p>

<pre><code>最坏情况下，关键词比较次数为log2(n+1)，且期望时间复杂度为O(log2n)；
</code></pre>

<blockquote><p>注：折半查找的前提条件是需要有序表顺序存储，对于静态查找表，一次排序后不再变化，折半查找能得到不错的效率。但对于需要频繁执行插入或删除操作的数据集来说，维护有序的排序会带来不小的工作量，那就不建议使用。——《大话数据结构》</p></blockquote>

<pre><code>    //二分查找（折半查找），版本1
int BinarySearch1(int a[], int value, int n)
{
    int low, high, mid;
    low = 0;
    high = n-1;
    while(low&lt;=high)
    {
        mid = (low+high)/2;
        if(a[mid]==value)
            return mid;
        if(a[mid]&gt;value)
            high = mid-1;
        if(a[mid]&lt;value)
            low = mid+1;
    }
    return -1;
}

//二分查找，递归版本
int BinarySearch2(int a[], int value, int low, int high)
{
    int mid = low+(high-low)/2;
    if(a[mid]==value)
        return mid;
    if(a[mid]&gt;value)
        return BinarySearch2(a, value, low, mid-1);
    if(a[mid]&lt;value)
        return BinarySearch2(a, value, mid+1, high);
}
</code></pre>

<h3>3、插值查找</h3>

<p>在介绍插值查找之前，首先考虑一个新问题，为什么上述算法一定要是折半，而不是折四分之一或者折更多呢？</p>

<pre><code>打个比方，在英文字典里面查“apple”，你下意识翻开字典是翻前面的书页还是后面的书页呢？如果再让你查“zoo”，你又怎么查？很显然，这里你绝对不会是从中间开始查起，而是有一定目的的往前或往后翻。
</code></pre>

<p>同样的，比如要在取值范围1 ~ 10000 之间 100 个元素从小到大均匀分布的数组中查找5， 我们自然会考虑从数组下标较小的开始查找。</p>

<p>经过以上分析，折半查找这种查找方式，不是自适应的（也就是说是傻瓜式的）。二分查找中查找点计算如下：</p>

<pre><code>mid=(low+high)/2, 即mid=low+1/2*(high-low);
</code></pre>

<p>通过类比，我们可以将查找的点改进为如下：</p>

<pre><code>mid=low+(key-a[low])/(a[high]-a[low])*(high-low)，
</code></pre>

<p>也就是将上述的比例参数1/2改进为自适应的，根据关键字在整个有序表中所处的位置，让mid值的变化更靠近关键字key，这样也就间接地减少了比较次数。</p>

<p>基本思想：</p>

<pre><code>基于二分查找算法，将查找点的选择改进为自适应选择，可以提高查找效率。当然，差值查找也属于有序查找。
</code></pre>

<blockquote><p>注：对于表长较大，而关键字分布又比较均匀的查找表来说，插值查找算法的平均性能比折半查找要好的多。反之，数组中如果分布非常不均匀，那么插值查找未必是很合适的选择。</p></blockquote>

<p>复杂度分析：查找成功或者失败的时间复杂度均为O(log2(log2n))。</p>

<pre><code>//插值查找
int InsertionSearch(int a[], int value, int low, int high)
{
    int mid = low+(value-a[low])/(a[high]-a[low])*(high-low);
    if(a[mid]==value)
        return mid;
    if(a[mid]&gt;value)
        return InsertionSearch(a, value, low, mid-1);
    if(a[mid]&lt;value)
        return InsertionSearch(a, value, mid+1, high);
}
</code></pre>

<h3>4、斐波那契查找</h3>

<blockquote><p>在介绍斐波那契查找算法之前，我们先介绍一下很它紧密相连并且大家都熟知的一个概念——黄金分割。</p></blockquote>

<p>黄金比例又称黄金分割，</p>

<pre><code>是指事物各部分间一定的数学比例关系，即将整体一分为二，较大部分与较小部分之比等于整体与较大部分之比，其比值约为1:0.618或1.618:1。
</code></pre>

<p>0.618被公认为最具有审美意义的比例数字，这个数值的作用不仅仅体现在诸如绘画、雕塑、音乐、建筑等艺术领域，而且在管理、工程设计等方面也有着不可忽视的作用。因此被称为黄金分割。</p>

<p>大家记不记得斐波那契数列：</p>

<ul>
<li>1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89…….（从第三个数开始，后边每一个数都是前两个数的和）。然后我们会发现，随着斐波那契数列的递增，前后两个数的比值会越来越接近0.618，利用这个特性，我们就可以将黄金比例运用到查找技术中。</li>
</ul>


<p>基本思想：</p>

<pre><code>也是二分查找的一种提升算法，通过运用黄金比例的概念在数列中选择查找点进行查找，提高查找效率。同样地，斐波那契查找也属于一种有序查找算法。
</code></pre>

<p>相对于折半查找，一般将待比较的key值与第mid=（low+high）/2位置的元素比较，比较结果分三种情况：</p>

<ul>
<li><p>1）相等，mid位置的元素即为所求</p></li>
<li><p>2）>，low=mid+1;</p></li>
<li><p>3）&lt;，high=mid-1。</p></li>
</ul>


<p>斐波那契查找与折半查找很相似，他是根据斐波那契序列的特点对有序表进行分割的。他要求开始表中记录的个数为某个斐波那契数小1，及n=F(k)-1;</p>

<p>开始将k值与第F(k-1)位置的记录进行比较(及mid=low+F(k-1)-1),比较结果也分为三种</p>

<ul>
<li><p>1）相等，mid位置的元素即为所求</p></li>
<li><p>2）>，low=mid+1,k-=2;</p>

<ul>
<li>说明：low=mid+1说明待查找的元素在[mid+1,high]范围内，k-=2 说明范围[mid+1,high]内的元素个数为n-(F(k-1))= Fk-1-F(k-1)=Fk-F(k-1)-1=F(k-2)-1个，所以可以递归的应用斐波那契查找。</li>
</ul>
</li>
<li><p>3）&lt;，high=mid-1,k-=1。</p></li>
</ul>


<p>说明：low=mid+1说明待查找的元素在[low,mid-1]范围内，k-=1 说明范围[low,mid-1]内的元素个数为F(k-1)-1个，所以可以递归 的应用斐波那契查找。</p>

<p>复杂度分析：最坏情况下，时间复杂度为O(log2n)，且其期望复杂度也为O(log2n)。</p>

<pre><code>// 斐波那契查找.cpp 

#include "stdafx.h"
#include &lt;memory&gt;
#include  &lt;iostream&gt;
using namespace std;

const int max_size=20;//斐波那契数组的长度

/*构造一个斐波那契数组*/ 
void Fibonacci(int * F)
{
    F[0]=0;
    F[1]=1;
    for(int i=2;i&lt;max_size;++i)
        F[i]=F[i-1]+F[i-2];
}

/*定义斐波那契查找法*/  
int FibonacciSearch(int *a, int n, int key)  //a为要查找的数组,n为要查找的数组长度,key为要查找的关键字
{
  int low=0;
  int high=n-1;

  int F[max_size];
  Fibonacci(F);//构造一个斐波那契数组F 

  int k=0;
  while(n&gt;F[k]-1)//计算n位于斐波那契数列的位置
      ++k;

  int  * temp;//将数组a扩展到F[k]-1的长度
  temp=new int [F[k]-1];
  memcpy(temp,a,n*sizeof(int));

  for(int i=n;i&lt;F[k]-1;++i)
     temp[i]=a[n-1];

  while(low&lt;=high)
  {
    int mid=low+F[k-1]-1;
    if(key&lt;temp[mid])
    {
      high=mid-1;
      k-=1;
    }
    else if(key&gt;temp[mid])
    {
     low=mid+1;
     k-=2;
    }
    else
    {
       if(mid&lt;n)
           return mid; //若相等则说明mid即为查找到的位置
       else
           return n-1; //若mid&gt;=n则说明是扩展的数值,返回n-1
    }
  }  
  delete [] temp;
  return -1;
}

int main()
{
    int a[] = {0,16,24,35,47,59,62,73,88,99};
    int key=100;
    int index=FibonacciSearch(a,sizeof(a)/sizeof(int),key);
    cout&lt;&lt;key&lt;&lt;" is located at:"&lt;&lt;index;
    return 0;
}
</code></pre>

<h3>5、树表查找</h3>

<h5>5.1 最简单的树表查找算法——二叉树查找算法。</h5>

<p>基本思想：</p>

<pre><code>二叉查找树是先对待查找的数据进行生成树，确保树的左分支的值小于右分支的值，然后在就行和每个节点的父节点比较大小，查找最适合的范围。 这个算法的查找效率很高，但是如果使用这种查找方法要首先创建树。 
</code></pre>

<p>二叉查找树（BinarySearch Tree，也叫二叉搜索树，或称二叉排序树Binary Sort Tree）或者是一棵空树，或者是具有下列性质的二叉树：</p>

<ul>
<li><p>1）若任意节点的左子树不空，则左子树上所有结点的值均小于它的根结点的值；</p></li>
<li><p>2）若任意节点的右子树不空，则右子树上所有结点的值均大于它的根结点的值；</p></li>
<li><p>3）任意节点的左、右子树也分别为二叉查找树。</p></li>
</ul>


<p>二叉查找树性质：</p>

<pre><code>对二叉查找树进行中序遍历，即可得到有序的数列。
</code></pre>

<p>不同形态的二叉查找树如下图所示：</p>

<p>有关二叉查找树的查找、插入、删除等操作的详细讲解，请移步浅谈算法和数据结构: 七 二叉查找树。</p>

<p>复杂度分析：它和二分查找一样，插入和查找的时间复杂度均为O(logn)，但是在最坏的情况下仍然会有O(n)的时间复杂度。原因在于插入和删除元素的时候，树没有保持平衡（比如，我们查找上图（b）中的“93”，我们需要进行n次查找操作）。我们追求的是在最坏的情况下仍然有较好的时间复杂度，这就是平衡查找树设计的初衷。</p>

<p>下图为二叉树查找和顺序查找以及二分查找性能的对比图：</p>

<p>基于二叉查找树进行优化，进而可以得到其他的树表查找算法，如平衡树、红黑树等高效算法。</p>

<h5>5.2 平衡查找树之2-3查找树（2-3 Tree）</h5>

<p>2-3查找树定义：</p>

<pre><code>和二叉树不一样，2-3树运行每个节点保存1个或者两个的值。对于普通的2节点(2-node)，他保存1个key和左右两个自己点。对应3节点(3-node)，保存两个Key，2-3查找树的定义如下：
</code></pre>

<ul>
<li><p>1）要么为空，要么：</p></li>
<li><p>2）对于2节点，该节点保存一个key及对应value，以及两个指向左右节点的节点，左节点也是一个2-3节点，所有的值都比key要小，右节点也是一个2-3节点，所有的值比key要大。</p></li>
<li><p>3）对于3节点，该节点保存两个key及对应value，以及三个指向左中右的节点。左节点也是一个2-3节点，所有的值均比两个key中的最小的key还要小；中间节点也是一个2-3节点，中间节点的key值在两个跟节点key值之间；右节点也是一个2-3节点，节点的所有key值比两个key中的最大的key还要大。</p></li>
</ul>


<p>2-3查找树的性质：</p>

<ul>
<li><p>1）如果中序遍历2-3查找树，就可以得到排好序的序列；</p></li>
<li><p>2）在一个完全平衡的2-3查找树中，根节点到每一个为空节点的距离都相同。（这也是平衡树中“平衡”一词的概念，根节点到叶节点的最长距离对应于查找算法的最坏情况，而平衡树中根节点到叶节点的距离都一样，最坏情况也具有对数复杂度。）</p></li>
</ul>


<p>复杂度分析：</p>

<p>2-3树的查找效率与树的高度是息息相关的。</p>

<pre><code>在最坏的情况下，也就是所有的节点都是2-node节点，查找效率为lgN

在最好的情况下，所有的节点都是3-node节点，查找效率为log3N约等于0.631lgN
</code></pre>

<p>距离来说，对于1百万个节点的2-3树，树的高度为12-20之间，对于10亿个节点的2-3树，树的高度为18-30之间。</p>

<p>对于插入来说，只需要常数次操作即可完成，因为他只需要修改与该节点关联的节点即可，不需要检查其他节点，所以效率和查找类似。下面是2-3查找树的效率：</p>

<h5>5.3 平衡查找树之红黑树（Red-Black Tree）</h5>

<p>2-3查找树能保证在插入元素之后能保持树的平衡状态，最坏情况下即所有的子节点都是2-node，树的高度为lgn，从而保证了最坏情况下的时间复杂度。但是2-3树实现起来比较复杂，于是就有了一种简单实现2-3树的数据结构，即红黑树（Red-Black Tree）。</p>

<p>基本思想：红黑树的思想就是对2-3查找树进行编码，尤其是对2-3查找树中的3-nodes节点添加额外的信息。红黑树中将节点之间的链接分为两种不同类型，红色链接，他用来链接两个2-nodes节点来表示一个3-nodes节点。黑色链接用来链接普通的2-3节点。特别的，使用红色链接的两个2-nodes来表示一个3-nodes节点，并且向左倾斜，即一个2-node是另一个2-node的左子节点。这种做法的好处是查找的时候不用做任何修改，和普通的二叉查找树相同。</p>

<p>红黑树的定义：红黑树是一种具有红色和黑色链接的平衡查找树，同时满足：</p>

<pre><code>红色节点向左倾斜

一个节点不可能有两个红色链接

整个树完全黑色平衡，即从根节点到所以叶子结点的路径上，黑色链接的个数都相同。
</code></pre>

<p>下图可以看到红黑树其实是2-3树的另外一种表现形式：如果我们将红色的连线水平绘制，那么他链接的两个2-node节点就是2-3树中的一个3-node节点了。</p>

<p>红黑树的性质：</p>

<pre><code>整个树完全黑色平衡，即从根节点到所以叶子结点的路径上，黑色链接的个数都相同（2-3树的第2）性质，从根节点到叶子节点的距离都相等）。
</code></pre>

<p>复杂度分析：</p>

<pre><code>最坏的情况就是，红黑树中除了最左侧路径全部是由3-node节点组成，即红黑相间的路径长度是全黑路径长度的2倍。
</code></pre>

<p>下图是一个典型的红黑树，从中可以看到最长的路径(红黑相间的路径)是最短路径的2倍：</p>

<pre><code>　　红黑树的平均高度大约为logn。
</code></pre>

<p>下图是红黑树在各种情况下的时间复杂度，可以看出红黑树是2-3查找树的一种实现，它能保证最坏情况下仍然具有对数的时间复杂度。</p>

<p>红黑树这种数据结构应用十分广泛，在多种编程语言中被用作符号表的实现，如：</p>

<pre><code>Java中的java.util.TreeMap,java.util.TreeSet；

C++ STL中的：map,multimap,multiset；

.NET中的：SortedDictionary,SortedSet 等。
</code></pre>

<h5>5.4 B树和B+树（B Tree/B+ Tree）</h5>

<p>平衡查找树中的2-3树以及其实现红黑树。2-3树种，一个节点最多有2个key，而红黑树则使用染色的方式来标识这两个key。</p>

<blockquote><p>维基百科对B树的定义为“在计算机科学中，B树（B-tree）是一种树状数据结构，它能够存储数据、对其进行排序并允许以O(log n)的时间复杂度运行进行查找、顺序读取、插入和删除的数据结构。B树，概括来说是一个节点可以拥有多于2个子节点的二叉查找树。与自平衡二叉查找树不同，B树为系统最优化大块数据的读和写操作。B-tree算法减少定位记录时所经历的中间过程，从而加快存取速度。普遍运用在数据库和文件系统。</p></blockquote>

<h6>B树定义：</h6>

<pre><code>B树可以看作是对2-3查找树的一种扩展，即他允许每个节点有M-1个子节点。

根节点至少有两个子节点

每个节点有M-1个key，并且以升序排列

位于M-1和M key的子节点的值位于M-1 和M key对应的Value之间

其它节点至少有M/2个子节点
</code></pre>

<p>下图是一个M=4 阶的B树:</p>

<p>可以看到B树是2-3树的一种扩展，他允许一个节点有多于2个的元素。B树的插入及平衡化操作和2-3树很相似，这里就不介绍了。</p>

<h6>B+树定义：</h6>

<p>B+树是对B树的一种变形树，它与B树的差异在于：</p>

<pre><code>有k个子结点的结点必然有k个关键码；

非叶结点仅具有索引作用，跟记录有关的信息均存放在叶结点中。

树的所有叶结点构成一个有序链表，可以按照关键码排序的次序遍历全部记录。
</code></pre>

<p>如下图，是一个B+树:</p>

<pre><code>B和B+树的区别在于，B+树的非叶子结点只包含导航信息，不包含实际的值，所有的叶子结点和相连的节点使用链表相连，便于区间查找和遍历。
</code></pre>

<p>B+ 树的优点在于：</p>

<pre><code>由于B+树在内部节点上不好含数据信息，因此在内存页中能够存放更多的key。 数据存放的更加紧密，具有更好的空间局部性。因此访问叶子几点上关联的数据也具有更好的缓存命中率。

B+树的叶子结点都是相链的，因此对整棵树的便利只需要一次线性遍历叶子结点即可。而且由于数据顺序排列并且相连，所以便于区间查找和搜索。而B树则需要进行每一层的递归遍历。相邻的元素可能在内存中不相邻，所以缓存命中性没有B+树好。
</code></pre>

<p>但是B树也有优点，其优点在于，由于B树的每一个节点都包含key和value，因此经常访问的元素可能离根节点更近，因此访问也更迅速。</p>

<p>B/B+树常用于文件系统和数据库系统中，它通过对每个节点存储个数的扩展，使得对连续的数据能够进行较快的定位和访问，能够有效减少查找时间，提高存储的空间局部性从而减少IO操作。它广泛用于文件系统及数据库中，如：</p>

<pre><code>Windows：HPFS文件系统；

Mac：HFS，HFS+文件系统；

Linux：ResiserFS，XFS，Ext3FS，JFS文件系统；

数据库：ORACLE，MYSQL，SQLSERVER等中。
</code></pre>

<p>有关B/B+树在数据库索引中的应用，请看张洋的MySQL索引背后的数据结构及算法原理这篇文章，这篇文章对MySQL中的如何使用B+树进行索引有比较详细的介绍，推荐阅读。</p>

<p>树表查找总结：</p>

<pre><code>二叉查找树平均查找性能不错，为O(logn)，但是最坏情况会退化为O(n)。在二叉查找树的基础上进行优化，我们可以使用平衡查找树。平衡查找树中的2-3查找树，这种数据结构在插入之后能够进行自平衡操作，从而保证了树的高度在一定的范围内进而能够保证最坏情况下的时间复杂度。但是2-3查找树实现起来比较困难，红黑树是2-3树的一种简单高效的实现，他巧妙地使用颜色标记来替代2-3树中比较难处理的3-node节点问题。红黑树是一种比较高效的平衡查找树，应用非常广泛，很多编程语言的内部实现都或多或少的采用了红黑树。
</code></pre>

<p>除此之外，2-3查找树的另一个扩展——B/B+平衡树，在文件系统和数据库系统中有着广泛的应用。</p>

<h3>6、分块查找</h3>

<p>分块查找又称索引顺序查找，它是顺序查找的一种改进方法。</p>

<p>算法思想：</p>

<pre><code>将n个数据元素"按块有序"划分为m块（m ≤ n）。每一块中的结点不必有序，但块与块之间必须"按块有序"；即第1块中任一元素的关键字都必须小于第2块中任一元素的关键字；而第2块中任一元素又都必须小于第3块中的任一元素，……
</code></pre>

<p>算法流程：</p>

<ol>
<li>step1 先选取各块中的最大关键字构成一个索引表；</li>
<li>step2 查找分两个部分：先对索引表进行二分查找或顺序查找，以确定待查记录</li>
</ol>


<p>在哪一块中；然后，在已确定的块中用顺序法进行查找。</p>

<h3>7、哈希查找</h3>

<p>什么是哈希表（Hash）？</p>

<pre><code>我们使用一个下标范围比较大的数组来存储元素。可以设计一个函数（哈希函数， 也叫做散列函数），使得每个元素的关键字都与一个函数值（即数组下标）相对应，于是用这个数组单元来存储这个元素；也可以简单的理解为，按照关键字为每一个元素"分类"，然后将这个元素存储在相应"类"所对应的地方。但是，不能够保证每个元素的关键字与函数值是一一对应的，因此极有可能出现对于不同的元素，却计算出了相同的函数值，这样就产生了"冲突"，换句话说，就是把不同的元素分在了相同的"类"之中。后面我们将看到一种解决"冲突"的简便做法。
</code></pre>

<p>总的来说，"直接定址"与"解决冲突"是哈希表的两大特点。</p>

<p>什么是哈希函数？哈希函数的规则是：</p>

<pre><code>通过某种转换关系，使关键字适度的分散到指定大小的的顺序结构中，越分散，则以后查找的时间复杂度越小，空间复杂度越高。
</code></pre>

<p>算法思想：</p>

<pre><code>哈希的思路很简单，如果所有的键都是整数，那么就可以使用一个简单的无序数组来实现：将键作为索引，值即为其对应的值，这样就可以快速访问任意键的值。这是对于简单的键的情况，我们将其扩展到可以处理更加复杂的类型的键。
</code></pre>

<p>算法流程：</p>

<ul>
<li><p>1）用给定的哈希函数构造哈希表；</p></li>
<li><p>2）根据选择的冲突处理方法解决地址冲突；</p>

<ul>
<li>常见的解决冲突的方法：拉链法和线性探测法。</li>
</ul>
</li>
<li><p>3）在哈希表的基础上执行哈希查找。</p></li>
</ul>


<p>哈希表是一个在时间和空间上做出权衡的经典例子。如果没有内存限制，那么可以直接将键作为数组的索引。那么所有的查找时间复杂度为O(1)；如果没有时间限制，那么我们可以使用无序数组并进行顺序查找，这样只需要很少的内存。哈希表使用了适度的时间和空间来在这两个极端之间找到了平衡。只需要调整哈希函数算法即可在时间和空间上做出取舍。</p>

<p>复杂度分析：</p>

<pre><code>单纯论查找复杂度：对于无冲突的Hash表而言，查找复杂度为O(1)（注意，在查找之前我们需要构建相应的Hash表）。
</code></pre>

<p>使用Hash，我们付出了什么？</p>

<pre><code>我们在实际编程中存储一个大规模的数据，最先想到的存储结构可能就是map，也就是我们常说的KV pair，经常使用Python的博友可能更有这种体会。使用map的好处就是，我们在后续处理数据处理时，可以根据数据的key快速的查找到对应的value值。map的本质就是Hash表，那我们在获取了超高查找效率的基础上，我们付出了什么？
</code></pre>

<blockquote><p>Hash是一种典型以空间换时间的算法，比如原来一个长度为100的数组，对其查找，只需要遍历且匹配相应记录即可，从空间复杂度上来看，假如数组存储的是byte类型数据，那么该数组占用100byte空间。现在我们采用Hash算法，我们前面说的Hash必须有一个规则，约束键与存储位置的关系，那么就需要一个固定长度的hash表，此时，仍然是100byte的数组，假设我们需要的100byte用来记录键与位置的关系，那么总的空间为200byte,而且用于记录规则的表大小会根据规则，大小可能是不定的。</p></blockquote>

<hr />

<pre><code>Q Q：2211523682/790806573

微信：18370997821/13148454507

微博WB:http://weibo.com/u/3288975567?is_hot=1

git博文：http://al1020119.github.io/

github：https://github.com/al1020119
</code></pre>

<p><img src="http://al1020119.github.io/images/iCocosCoder.jpg" title="Caption" ></p>

<p><img src="http://al1020119.github.io/images/iCocosPublic.jpg" title="Caption" ></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[修行篇-五大常用算法]]></title>
    <link href="http://al1020119.github.io/blog/2016/08/18/xiu-xing-pian-wu-da-chang-yong-suan-fa/"/>
    <updated>2016-08-18T12:31:31+08:00</updated>
    <id>http://al1020119.github.io/blog/2016/08/18/xiu-xing-pian-wu-da-chang-yong-suan-fa</id>
    <content type="html"><![CDATA[<h3>分治算法</h3>

<h6>概念：分而治之</h6>

<pre><code>把一个复杂的问题分成两个或更多的相同或相似的子问题，再把子问题分成更小的子问题……直到最后子问题可以简单的直接求解，原问题的解即子问题的解的合并

排序算法(快速排序，归并排序)，傅立叶变换(快速傅立叶变换)……
</code></pre>

<p>思想：将一个难以直接解决的大问题，分割成一些规模较小的相同问题，以便各个击破，分而治之</p>

<pre><code>分治策略是：对于一个规模为n的问题，若该问题可以容易地解决（比如说规模n较小）则直接解决，否则将其分解为k个规模较小的子问题，这些子问题互相独立且与原问题形式相同，递归地解这些子问题，然后将各子问题的解合并得到原问题的解。这种算法设计策略叫做分治法

这自然导致递归过程的产生。分治与递归像一对孪生兄弟
</code></pre>

<!--more-->


<h6>特征：</h6>

<p>分治法所能解决的问题一般具有以下几个特征：</p>

<pre><code>1) 该问题的规模缩小到一定的程度就可以容易地解决

2) 该问题可以分解为若干个规模较小的相同问题，即该问题具有最优子结构性质。

3) 利用该问题分解出的子问题的解可以合并为该问题的解；

4) 该问题所分解出的各个子问题是相互独立的，即子问题之间不包含公共的子子问题。
</code></pre>

<p>综上：</p>

<ul>
<li><p>第一条特征是绝大多数问题都可以满足的，因为问题的计算复杂性一般是随着问题规模的增加而增加；</p></li>
<li><p>第二条特征是应用分治法的前提它也是大多数问题可以满足的，此特征反映了递归思想的应用；、</p></li>
<li><p>第三条特征是关键，能否利用分治法完全取决于问题是否具有第三条特征，如果具备了第一条和第二条特征，而不具备第三条特征，则可以考虑用贪心法或动态规划法。</p></li>
<li><p>第四条特征涉及到分治法的效率，如果各子问题是不独立的则分治法要做许多不必要的工作，重复地解公共的子问题，此时虽然可用分治法，但一般用动态规划法较好。</p></li>
</ul>


<h6>性能：</h6>

<p> 一个分治法将规模为n的问题分成k个规模为n／m的子问题去解。设分解阀值n0=1，且adhoc解规模为1的问题耗费1个单位时间。再设将原问题分解为k个子问题以及用merge将k个子问题的解合并为原问题的解需用f(n)个单位时间。用T(n)表示该分治法解规模为|P|=n的问题所需的计算时间，则有：</p>

<p> T（n）= k T(n/m)+f(n)</p>

<pre><code>通过迭代法求得方程的解：
递归方程及其解只给出n等于m的方幂时T(n)的值，但是如果认为T(n)足够平滑，那么由n等于m的方幂时T(n)的值可以估计T(n)的增长速度。通常假定T(n)是单调上升的，从而当                  mi≤n&lt;mi+1时，T(mi)≤T(n)&lt;T(mi+1)。 
</code></pre>

<h6>经典问题</h6>

<ul>
<li>（1）二分搜索</li>
<li>（2）大整数乘法</li>
<li>（3）Strassen矩阵乘法</li>
<li>（4）棋盘覆盖</li>
<li>（5）合并排序</li>
<li>（6）快速排序</li>
<li>（7）线性时间选择</li>
<li>（8）最接近点对问题</li>
<li>（9）循环赛日程表</li>
<li>（10）汉诺塔</li>
</ul>


<h6>思维过程</h6>

<pre><code>实际上就是类似于数学归纳法，找到解决本问题的求解方程公式，然后根据方程公式设计递归程序。
</code></pre>

<ol>
<li>一定是先找到最小问题规模时的求解方法</li>
<li>然后考虑随着问题规模增大时的求解方法</li>
<li>找到求解的递归函数式后（各种规模或因子），设计递归程序即可。</li>
</ol>


<h3>动态规划</h3>

<h6>概念</h6>

<pre><code>每次决策依赖于当前状态，又随即引起状态的转移。一个决策序列就是在变化的状态中产生出来的，所以，这种多阶段最优化决策解决问题的过程就称为动态规划
</code></pre>

<h6>思想</h6>

<pre><code>基本思想与分治法类似，也是将待求解的问题分解为若干个子问题（阶段），按顺序求解子阶段，前一子问题的解，为后一子问题的求解提供了有用的信息。在求解任一子问题时，列出各种可能的局部解，通过决策保留那些有可能达到最优的局部解，丢弃其他局部解。依次解决各子问题，最后一个子问题就是初始问题的解
</code></pre>

<h6>特点：</h6>

<pre><code>叠子问题这个特点，为减少重复计算，对每一个子问题只解一次，将其不同阶段的不同状态保存在一个二维数组中
</code></pre>

<h6>与分治法最大的差别是：</h6>

<pre><code>适合于用动态规划法求解的问题，经分解后得到的子问题往往不是互相独立的（即下一个子阶段的求解是建立在上一个子阶段的解的基础上，进行进一步的求解）。
</code></pre>

<h6>使用</h6>

<ul>
<li><p>(1) 最优化原理：如果问题的最优解所包含的子问题的解也是最优的，就称该问题具有最优子结构，即满足最优化原理。</p></li>
<li><p>(2) 无后效性：即某阶段状态一旦确定，就不受这个状态以后决策的影响。也就是说，某状态以后的过程不会影响以前的状态，只与当前状态有关。</p></li>
<li><p>（3）有重叠子问题：即子问题之间是不独立的，一个子问题在下一阶段决策中可能被多次使用到。（该性质并不是动态规划适用的必要条件，但是如果没有这条性质，动态规划算法同其他算法相比就不具备优势）
实际应用</p></li>
</ul>


<h6>三要素：</h6>

<p>使用动态规划求解问题，最重要的就是确定动态规划三要素：</p>

<pre><code>（1）问题的阶段 

（2）每个阶段的状态

（3）从前一个阶段转化到后一个阶段之间的递推关系。
</code></pre>

<h6>总结</h6>

<p>递推关系必须是从次小的问题开始到较大的问题之间的转化，从这个角度来说，动态规划往往可以用递归程序来实现，不过因为递推可以充分利用前面保存的子问题的解来减少重复计算，所以对于大规模问题来说，有递归不可比拟的优势，这也是动态规划算法的核心之处。</p>

<pre><code>确定了动态规划的这三要素，整个求解过程就可以用一个最优决策表来描述，最优决策表是一个二维表，其中行表示决策的阶段，列表示问题状态，表格需要填写的数据一般对应此问题的在某个阶段某个状态下的最优值（如最短路径，最长公共子序列，最大价值等），填表的过程就是根据递推关系，从1行1列开始，以行或者列优先的顺序，依次填写表格，最后根据整个表格的数据通过简单的取舍或者运算求得问题的最优解。

      f(n,m)=max{f(n-1,m), f(n-1,m-w[n])+P(n,m)}
</code></pre>

<h3>贪心算法</h3>

<h6>概念</h6>

<pre><code>在对问题求解时，总是做出在当前看来是最好的选择。也就是说，不从整体最优上加以考虑，他所做出的仅是在某种意义上的局部最优解。
</code></pre>

<blockquote><p>贪心算法不是对所有问题都能得到整体最优解，选择的贪心策略必须具备无后效性，即某个状态以后的过程不会影响以前的状态，只与当前状态有关。</p></blockquote>

<h6>思想</h6>

<ol>
<li>建立数学模型来描述问题。</li>
<li>把求解的问题分成若干个子问题。</li>
<li>对每一子问题求解，得到子问题的局部最优解。</li>
<li>把子问题的解局部最优解合成原来解问题的一个解。</li>
</ol>


<h6>使用</h6>

<p>局部最优策略能导致产生全局最优解。</p>

<pre><code>实际上，贪心算法适用的情况很少。一般，对一个问题分析是否适用于贪心算法，可以先选择该问题下的几个实际数据进行分析，就可做出判断。
</code></pre>

<p>实际应用</p>

<p>实现框架
    从问题的某一初始解出发；
    while （能朝给定总目标前进一步）
    {
          利用可行的决策，求出可行解的一个解元素；
    }
    由所有解元素组合成问题的一个可行解；</p>

<pre><code>    因为用贪心算法只能通过解局部最优解的策略来达到全局最优解，因此，一定要注意判断问题是否适合采用贪心算法策略，找到的解是否一定是问题的最优解。
</code></pre>

<h6>总结</h6>

<blockquote><p>贪心算法并不是完全不可以使用，贪心策略一旦经过证明成立后，它就是一种高效的算法。</p></blockquote>

<ul>
<li>需要证明: 贪心算法的证明围绕着：整个问题的最优解一定由在贪心策略中存在的子问题的最优解得来的。</li>
</ul>


<h3>回溯算法</h3>

<h6>概念</h6>

<pre><code>一个类似枚举的搜索尝试过程，主要是在搜索尝试过程中寻找问题的解，当发现已不满足求解条件时，就“回溯”返回，尝试别的路径

回溯法是一种选优搜索法，按选优条件向前搜索，以达到目标。但当探索到某一步时，发现原先选择并不优或达不到目标，就退回一步重新选择，这种走不通就退回再走的技术为回溯法，而满足回溯条件的某个状态的点称为“回溯点”。
</code></pre>

<p>特点：有“通用解题方法”的美称。</p>

<h6>思想</h6>

<p>在包含问题的所有解的解空间树中，按照深度优先搜索的策略，从根结点出发深度探索解空间树。当探索到某一结点时，要先判断该结点是否包含问题的解，如果包含，就从该结点出发继续探索下去，如果该结点不包含问题的解，则逐层向其祖先结点回溯。（其实回溯法就是对隐式图的深度优先搜索算法）。</p>

<pre><code>   若用回溯法求问题的所有解时，要回溯到根，且根结点的所有可行的子树都要已被搜索遍才结束。

   而若使用回溯法求任一个解时，只要搜索到问题的一个解就可以结束。
</code></pre>

<h6>使用</h6>

<pre><code>（1）针对所给问题，确定问题的解空间：首先应明确定义问题的解空间，问题的解空间应至少包含问题的一个（最优）解。

（2）确定结点的扩展搜索规则

（3）以深度优先方式搜索解空间，并在搜索过程中用剪枝函数避免无效搜索。实际应用
</code></pre>

<h3>分支限界法</h3>

<h6>概念</h6>

<pre><code> 类似于回溯法，也是一种在问题的解空间树T上搜索问题解的算法。但在一般情况下，分支限界法与回溯法的求解目标不同。回溯法的求解目标是找出T中满足约束条件的所有解，而分支限界法的求解目标则是找出满足约束条件的一个解，或是在满足约束条件的解中找出使某一目标函数值达到极大或极小的解，即在某种意义下的最优解。
</code></pre>

<p>回溯法和分支限界法的一些区别</p>

<pre><code>有一些问题其实无论用回溯法还是分支限界法都可以得到很好的解决，但是另外一些则不然。也许我们需要具体一些的分析——到底何时使用分支限界而何时使用回溯呢？
</code></pre>

<h6>搜索算法</h6>

<pre><code>所谓“分支”就是采用广度优先的策略，依次搜索E-结点的所有分支，也就是所有相邻结点，抛弃不满足约束条件的结点，其余结点加入活结点表。然后从表中选择一个结点作为下一个E-结点，继续搜索。

 选择下一个E-结点的方式不同，则会有几种不同的分支搜索方式。
</code></pre>

<p>   1）FIFO搜索</p>

<p>   2）LIFO搜索</p>

<p>   3）优先队列式搜索</p>

<h6>回溯法和分支限界法的区别：</h6>

<ul>
<li><p>方法对解空间树的搜索方式       存储结点的常用数据结构      结点存储特性常用应用</p></li>
<li><p>回溯法深度优先搜索堆栈活结点的所有可行子结点被遍历后才被从栈中弹出找出满足约束条件的所有解</p></li>
<li><p>分支限界法广度优先或最小消耗优先搜索队列、优先队列每个结点只有一次成为活结点的机会找出满足约束条件的一个解或特定意义下的最优解</p></li>
</ul>


<hr />

<p>总结</p>

<blockquote><p>多理解，多理解，多理解。。。。</p></blockquote>

<hr />

<pre><code>Q Q：2211523682/790806573

微信：18370997821/13148454507

微博WB:http://weibo.com/u/3288975567?is_hot=1

git博文：http://al1020119.github.io/

github：https://github.com/al1020119
</code></pre>

<p><img src="http://al1020119.github.io/images/iCocosCoder.jpg" title="Caption" ></p>

<p><img src="http://al1020119.github.io/images/iCocosPublic.jpg" title="Caption" ></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[修行篇-八大排序算法]]></title>
    <link href="http://al1020119.github.io/blog/2016/08/16/xiu-xing-pian-chang-jian-pai-xu-suan-fa/"/>
    <updated>2016-08-16T12:31:14+08:00</updated>
    <id>http://al1020119.github.io/blog/2016/08/16/xiu-xing-pian-chang-jian-pai-xu-suan-fa</id>
    <content type="html"><![CDATA[<p>常用排序算法</p>

<blockquote><p>这里我们大概按照重要性的先后顺序介绍</p></blockquote>

<h2>快速排序</h2>

<ul>
<li><p>快速排序是不稳定的，其时间平均时间复杂度是O ( nlgn )。</p></li>
<li><p>快速排序采用的思想是分治思想。</p></li>
</ul>


<p>思路:快速排序是找出一个元素（理论上可以随便找一个）作为基准(pivot),然后对数组进行分区操作,使基准左边元素的值都不大于基准值,基准右边的元素值 都不小于基准值，如此作为基准的元素调整到排序后的正确位置。递归快速排序，将其他n-1个元素也调整到排序后的正确位置。最后每个元素都是在排序后的正 确位置，排序完成。所以快速排序算法的核心算法是分区操作，即如何调整基准的位置以及调整返回基准的最终位置以便分治递归。</p>

<!--more-->


<p>伪代码</p>

<pre><code>void quickSort(int a[], int len, int left, int right) {
   // 所有都排序完毕了，就退出递归
   if left &gt;= right {
     return;
   }

   // 每一趟划分，使左边的比基准小，右边的比基准大，并返回新的基准的位置
   int baseIndex = partition(a, len, left, right);

   // 递归排序左部分
   quickSort(a, len, left, baseIndex - 1);
   // 递归排序右部分
   quickSort(a, len, baseIndex + 1, right)
}

int partition(int a[], int len, int left, int right) {
   // 记录哪个是基准数
   int base = a[left];
   // 记录当前基准数的位置
   int baseIndex = left;

   while left &lt; right {
     // 先从右边往左边扫描，找到第一个比base还要小的数，但是不能与left相遇
     while left &lt; right &amp;&amp; a[right] &gt;= base {
       right--;
     }

     // 再从左边往右边扫描，找到第一个比base还要大的数，但是不能与right相遇
     while left &lt; right &amp;&amp; a[left] &lt;= base {
       left++;
     }

     // 将所扫描到的第一个比基准数小和第一个比基准数大的数交换
     swap(a, left, right);
   }

   // 交换left与baseIndex对应的元素，将left位置的元素作为新的基准数
   swap(a, baseIndex, left);

   // 返回新的基准位置
   return left;
}

void swap(int a[], int i, int j) {
   int temp = a[i];

   a[i] = a[j];
   a[j] = temp;
}
</code></pre>

<p>C语言版</p>

<pre><code>void quickSort(int a[], int len, int left, int right) {
  if (left &gt;= right) {
    return;
  }

  // 一次划分后，得到基准数据的位置
 int baseIndex = partition(a, len, left, right);

  // 快排左边部分
  quickSort(a, len, left, baseIndex - 1);
  // 快排右边部分
  quickSort(a, len, baseIndex + 1, right);
}

int partition(int a[], int len, int left, int right) {
  // 每一次的划分，都让第一个元素作为基准
  int base = a[left];
  // 记下刚开始的基准的位置， 便于最后相遇时交换
  int baseIndex = left;

  while (left &lt; right) {
    // 查找右部分比base还小的元素的下标
    while (left &lt; right &amp;&amp; a[right] &gt;= base) {
      right--;
    }

    // 查找左部分比base还大的元素的下标
    while (left &lt; right &amp;&amp; a[left] &lt;= base) {
      left++;
    }

    // 将这一趟比基准大和比基准小的所找到的第一个值，互相交换
    swap(a, left, right);
  }

  // 在left与right相遇时，将基准数与相遇点交换
  // 这样这一次划分，就可以保证左边的比基准数小，右边的比基准数大
  swap(a, baseIndex, left);

  // 划分完成后，以left位置的元素作为新的基准，分成左右序列，分别递归排序
  return left;
}

void swap(int a[], int i, int j) {
  int temp = a[i];
  a[i] = a[j];
  a[j] = temp;
}
</code></pre>

<p>Swift版</p>

<pre><code>func quickSort(inout a: [Int], left: Int, right: Int) {
  if left &gt;= right {
    return
  }

  let baseIndex = partition(&amp;a, left: left, right: right)

  quickSort(&amp;a, left: left, right: baseIndex - 1)
  quickSort(&amp;a, left: baseIndex + 1, right: right)
}

func partition(inout a: [Int], var left: Int, var right: Int) -&gt;Int {
  let base = a[left]
  let baseIndex = left

  while left &lt; right {
    while left &lt; right &amp;&amp; a[right] &gt;= base {
      right--
    }

    while left &lt; right &amp;&amp; a[left] &lt;= base {
      left++
    }

    swapInt(&amp;a, i: left, j: right)
  }

  swapInt(&amp;a, i: baseIndex, j: left)

  return left
}

func swapInt(inout a: [Int], i: Int, j: Int) {
  let temp = a[i]
  a[i] = a[j]
  a[j] = temp
}
</code></pre>

<hr />

<h2>冒泡排序</h2>

<p>算法思路：冒泡排序的核心思想就是通过与相邻元素的比较和交换，把小的数交换到最前面。因为这个过程类似于水泡向上升一样，因此被命名为冒泡排序。</p>

<blockquote><p>冒泡排序需要两个循环来控制遍历，也就是需要n * n趟才能判断、交换完成。</p></blockquote>

<p>冒泡排序的时间复杂度为O ( n2 )。</p>

<p>伪代码</p>

<pre><code>void bubbleSort(int a[], int len) {
   for i = 0; i &lt; len - 1; ++i {
      for j = len - 1; j &gt; i; --j {
         if a[j] &lt; a[j - 1] {
            swap(a, j, j - 1);
         }
      }
   }
}

void swap(int a[], int i, int j) {
   int temp = a[i];
   a[i] = a[j];
   a[j] = temp;
}
</code></pre>

<p>C语言版</p>

<pre><code>void bubbleSortUsingC(int arr[], int len) {
  // 代表走多少趟，最后一趟就不用再走了
  for (int i = 0; i &lt; len - 1; ++i) {

    // 从后往前走，相当于泡从水底冒出来到水面
    for (int j = len - 1; j &gt; i; --j) {

      // 如果后面的比前面一个的值还要小，则需要交换
      if (arr[j] &lt; arr[j - 1]) {
        swap(arr, j, j - 1);
      }
    }
  }
}

void swap(int arr[], int i, int j) {
  int temp = arr[i];
  arr[i] = arr[j];
  arr[j] = temp;
}
</code></pre>

<p>测试一下：</p>

<pre><code>int a[5] = {5,3,8,6,4};

bubbleSortUsingC(a, sizeof(a) / sizeof(int));

for (int i = 0; i &lt; sizeof(a) / sizeof(int); ++i) {
    NSLog(@"%d", a[i]);
}

// 打印: 3, 4, 5, 6, 8 初步如期效果

ObjC版

- (void)bubbleSort:(int [])array len:(size_t)len {
  for (size_t i = 0; i &lt; len - 1; ++i) {
    for (size_t j = len - 1; j &gt; i; --j) {
      if (array[j] &lt; array[j - 1]) {
        // 交换
        int temp = array[j];
        array[j] = array[j - 1];
        array[j - 1] = temp;
      }
    }
  }
}
</code></pre>

<p>测试使用：</p>

<p>int a[5] = {5,3,8,6,4};
[self bubbleSort:a len:sizeof(a) / sizeof(int)];
for (int i = 0; i &lt; sizeof(a) / sizeof(int); ++i) {
    NSLog(@&ldquo;%d&rdquo;, a[i]);
}</p>

<p>Swift版</p>

<pre><code>func bubbleSort(var arr: [Int]) -&gt;[Int] {
  // 走多少趟
  for var i = 0; i &lt; arr.count - 1; ++i {

    // 从后往前
    for var j = arr.count - 1; j &gt; i; --j {

      // 后者 &lt; 前者 ？ 交换 ： 不交换
      if arr[j] &lt; arr[j - 1] {
        let temp = arr[j]

        arr[j] = arr[j - 1]
        arr[j - 1] = temp
      }
    }
  }

  return arr
}
</code></pre>

<p>测试使用：</p>

<pre><code>// 由于swift中数组也是结构体，是值类型，因此需要接收返回值才能得到排序后的数组
var arr = [5, 3, 8, 6, 4]
arr = bubbleSort(arr)
print(arr)

尝试给Model排序

- (void)bubbleSort:(NSMutableArray *)array {
  for (NSUInteger i = 0; i &lt; array.count - 1; ++i) {

    for (NSUInteger j = array.count - 1; j &gt; i; --j) {
      HYBTestModel *modelj = [array objectAtIndex:j];
      HYBTestModel *modelj_1 = [array objectAtIndex:j - 1];

      // 前者 &lt; 后者 ？ 交换 ： 不交换
      if ([modelj.uid compare:modelj_1.uid options:NSCaseInsensitiveSearch] == NSOrderedAscending) {
        [array exchangeObjectAtIndex:j withObjectAtIndex:j - 1];
      }
    }
  }
}
</code></pre>

<p>测试：</p>

<pre><code>NSMutableArray *array = [[NSMutableArray alloc] init];
for (NSUInteger i = 0; i &lt; 10; ++i) {
  HYBTestModel *model = [[HYBTestModel alloc] init];
  model.title = [NSString stringWithFormat:@"标哥的技术博客：%ld", 10 - (i + 1)];
  model.uid = [NSString stringWithFormat:@"%ld", 10 - (i + 1)];

  [array addObject:model];
}

[self bubbleSort:array];

for (HYBTestModel *model in array) {
  NSLog(@"%@ %@", model.uid, model.title);
}
</code></pre>

<p>// 打印:</p>

<pre><code>2016-03-10 22:57:37.524 DataAgorithmDemos[96148:3779265] 0 标哥的技术博客：0
2016-03-10 22:57:37.526 DataAgorithmDemos[96148:3779265] 1 标哥的技术博客：1
2016-03-10 22:57:37.526 DataAgorithmDemos[96148:3779265] 2 标哥的技术博客：2
2016-03-10 22:57:37.526 DataAgorithmDemos[96148:3779265] 3 标哥的技术博客：3
2016-03-10 22:57:37.582 DataAgorithmDemos[96148:3779265] 4 标哥的技术博客：4
2016-03-10 22:57:37.588 DataAgorithmDemos[96148:3779265] 5 标哥的技术博客：5
2016-03-10 22:57:37.589 DataAgorithmDemos[96148:3779265] 6 标哥的技术博客：6
2016-03-10 22:57:37.593 DataAgorithmDemos[96148:3779265] 7 标哥的技术博客：7
2016-03-10 22:57:37.594 DataAgorithmDemos[96148:3779265] 8 标哥的技术博客：8
2016-03-10 22:57:37.596 DataAgorithmDemos[96148:3779265] 9 标哥的技术博客：9
</code></pre>

<p>说明排序正常的~</p>

<h2>选择排序</h2>

<ul>
<li>选择排序:的思想其实和冒泡排序有点类似，都是在一次排序后把最小的元素放到最前面。但是过程不同，冒泡排序是通过相邻的比较和交换。而选择排序是通过对整体的选择</li>
</ul>


<p>算法思想：每一趟从前往后查找出值最小的索引（下标），最后通过比较是否需要交换。每一趟都将最小的元素交换到最前面。</p>

<p>其实选择排序可以看成是冒泡排序的优化，因为其目的相同，只是选择排序只有在确定了最小数的前提下才进行交换，大大减少了交换的次数，而比较次数是一样的。</p>

<blockquote><p>注意：冒泡排序是从后往前扫，使大的往下沉，而小的往上浮；选择排序是从前往后扫，每趟找出值最小的索引，使每趟最小值都交换到该趟的最前面，从而得到升序序列</p></blockquote>

<p>选择排序可以看作冒泡排序的优化版本，一样要两层循环才能排序完成。</p>

<p>所以，选择排序的时间复杂度为O ( n2 )</p>

<p>伪代码</p>

<pre><code>void selectSort(int arr[], int len) {
  int min = 0;

  // 只需要n-1趟即可，到最后一趟只有一个元素，一定是最小的了
  for i = 0; i &lt; len - 1; ++i {

    // 每一趟的开始，假设该趟的第一个元素是最小的
    min = i;

    // 查找该趟有没有更小的，如果找到更小的，则更新最小值的下标
    for j = i + 1; j &lt; len; ++j {
       if arr[j] &lt; arr[min] {
          min = j;
       } 
    }

    // 如果该趟的第一个元素不是最小的，说明需要交换
    if min != i {
       int temp = arr[i];
       arr[i] = arr[min];
       arr[min] = temp;
    }
  }
}
</code></pre>

<p>C语言版</p>

<pre><code>void selectSort(int arr[], int len) {
  int min = 0;

  // 只需要n-1趟
  for (int i = 0; i &lt; len - 1; ++i) {
    min = i;

    // 从第n+1趟起始找到末尾
    for (int j = i + 1; j &lt; len; ++j) {

      // 找到比min位置更小的，就更新这一趟所找到的最小值的位置
      if (arr[j] &lt; arr[min]) {
        min = j;
      }
    }

    // 如果min与i不相等，说明有比i位置更小的，所以需要交换
    if (min != i) {
      int temp = arr[min];
      arr[min] = arr[i];
      arr[i] = temp;
    }
  }
}
</code></pre>

<p>ObjC版</p>

<pre><code>- (void)selectSort:(int [])arr len:(int)len {
  int min = 0;

  // 只需要n-1趟
  for (int i = 0; i &lt; len - 1; ++i) {
    min = i;

    // 从第n+1趟起始找到末尾
    for (int j = i + 1; j &lt; len; ++j) {

      // 找到比min位置更小的，就更新这一趟所找到的最小值的位置
      if (arr[j] &lt; arr[min]) {
        min = j;
      }
    }

    // 如果min与i不相等，说明有比i位置更小的，所以需要交换
    if (min != i) {
      int temp = arr[min];
      arr[min] = arr[i];
      arr[i] = temp;
    }
  }
}
</code></pre>

<p>Swift版</p>

<pre><code>func selectSort(var arr: [Int]) -&gt;[Int] {
  var min = 0

  // 只需要n-1趟
  for var i = 0; i &lt; arr.count - 1; ++i {
    min = i

    // 从第n+1趟起始找到末尾
    for var j = i + 1; j &lt; arr.count; ++j {

      // 找到比min位置更小的，就更新这一趟所找到的最小值的位置
      if arr[j] &lt; arr[min] {
        min = j
      }
    }

    // 如果min与i不相等，说明有比i位置更小的，所以需要交换
    if min != i {
      let temp = arr[i]
      arr[i] = arr[min]
      arr[min] = temp
    }
  }

  return arr
}
</code></pre>

<p>尝试ObjC实现模型选择排序</p>

<pre><code>- (void)selectSort:(NSMutableArray *)array {
  NSUInteger minIndex = 0;

  for (NSUInteger i = 0; i &lt; array.count - 1; ++i) {
    minIndex = i;

    for (NSUInteger j = i + 1; j &lt; array.count; ++j) {
      HYBTestModel *modelj = [array objectAtIndex:j];
      HYBTestModel *model = [array objectAtIndex:minIndex];

      // 比min下的还要小，则更新min
      if ([modelj.uid compare:model.uid options:NSCaseInsensitiveSearch] == NSOrderedAscending) {
        minIndex = j;
      }
    }

    if (minIndex != i) {
      [array exchangeObjectAtIndex:minIndex withObjectAtIndex:i];
    }
  }
}
</code></pre>

<p>测试：</p>

<pre><code>NSMutableArray *array = [[NSMutableArray alloc] init];
for (NSUInteger i = 0; i &lt; 10; ++i) {
  HYBTestModel *model = [[HYBTestModel alloc] init];
  model.title = [NSString stringWithFormat:@"标哥的技术博客：%ld", 10 - (i + 1)];
  model.uid = [NSString stringWithFormat:@"%ld", 10 - (i + 1)];

  [array addObject:model];

}

[self selectSort:array];

for (HYBTestModel *model in array) {
  NSLog(@"%@ %@", model.uid, model.title);
}
</code></pre>

<p>// 打印:</p>

<pre><code>2016-03-11 11:52:47.482 DataAgorithmDemos[97923:4012461] 0 标哥的技术博客：0
2016-03-11 11:52:47.484 DataAgorithmDemos[97923:4012461] 1 标哥的技术博客：1
2016-03-11 11:52:47.484 DataAgorithmDemos[97923:4012461] 2 标哥的技术博客：2
2016-03-11 11:52:47.484 DataAgorithmDemos[97923:4012461] 3 标哥的技术博客：3
2016-03-11 11:52:47.484 DataAgorithmDemos[97923:4012461] 4 标哥的技术博客：4
2016-03-11 11:52:47.484 DataAgorithmDemos[97923:4012461] 5 标哥的技术博客：5
2016-03-11 11:52:47.484 DataAgorithmDemos[97923:4012461] 6 标哥的技术博客：6
2016-03-11 11:52:47.485 DataAgorithmDemos[97923:4012461] 7 标哥的技术博客：7
2016-03-11 11:52:47.487 DataAgorithmDemos[97923:4012461] 8 标哥的技术博客：8
2016-03-11 11:52:47.487 DataAgorithmDemos[97923:4012461] 9 标哥的技术博客：9
</code></pre>

<h2>堆排序</h2>

<p>堆是指二叉堆，二叉堆又称完全二叉树或者叫近似完全二叉树。二叉堆又分为最大堆和最小堆。</p>

<p>堆排序(Heapsort)是指利用堆这种数据结构所设计的一种排序算法，它是选择排序的一种。可以利用数组的特点快速定位指定索引的元素。数组可以根据索引直接获取元素，时间复杂度为O（1），也就是常量，因此对于取值效率极高。</p>

<p>最大堆的特性如下：</p>

<pre><code>父结点的键值总是大于或者等于任何一个子节点的键值
每个结点的左子树和右子树都是一个最大堆
</code></pre>

<p>最小堆的特性如下：</p>

<pre><code>父结点的键值总是小于或者等于任何一个子节点的键值
每个结点的左子树和右子树都是一个最小堆
</code></pre>

<p>堆排序的时间，主要由建立初始堆和反复调整堆这两部分的时间开销构成.由于堆排序是不稳定的，它得扭到的时间复杂度会根据实际情况较大，因此只能取平均时间复杂度。</p>

<p>平均时间复杂度为：O( N * log2(N) )</p>

<p>使用建议：</p>

<pre><code>由于初始化堆需要比较的次数较多，因此，堆排序比较适合于数据量非常大的场合（百万数据或更多）。由于高效的快速排序是基于递归实现的，所以在数据量非常大时会发生堆栈溢出错误。
</code></pre>

<p>基于最大堆实现升序排序</p>

<pre><code>// 初始化堆
void initHeap(int a[], int len) {
  // 从完全二叉树最后一个非子节点开始
  // 在数组中第一个元素的索引是0
  // 第n个元素的左孩子为2n+1，右孩子为2n+2，
  // 最后一个非子节点位置在(n - 1) / 2
  for (int i = (len - 1) / 2; i &gt;= 0; --i) {
    adjustMaxHeap(a, len, i);
  }
}

void adjustMaxHeap(int a[], int len, int parentNodeIndex) {
  // 若只有一个元素，那么只能是堆顶元素，也没有必要再排序了
  if (len &lt;= 1) {
    return;
  }

  // 记录比父节点大的左孩子或者右孩子的索引
  int targetIndex = -1;

  // 获取左、右孩子的索引
  int leftChildIndex = 2 * parentNodeIndex + 1;
  int rightChildIndex = 2 * parentNodeIndex + 2;

  // 没有左孩子
  if (leftChildIndex &gt;= len) {
    return;
  }

  // 有左孩子，但是没有右孩子
  if (rightChildIndex &gt;= len) {
    targetIndex = leftChildIndex;
  }
  // 有左孩子和右孩子
  else {
    // 取左、右孩子两者中最大的一个
    targetIndex = a[leftChildIndex] &gt; a[rightChildIndex] ? leftChildIndex : rightChildIndex;
  }

  // 只有孩子比父节点的值还要大，才需要交换
  if (a[targetIndex] &gt; a[parentNodeIndex]) {
    int temp = a[targetIndex];

    a[targetIndex] = a[parentNodeIndex];
    a[parentNodeIndex] = temp;


    // 交换完成后，有可能会导致a[targetIndex]结点所形成的子树不满足堆的条件，
    // 若不满足堆的条件，则调整之使之也成为堆
    adjustMaxHeap(a, len, targetIndex);
  }
}

void heapSort(int a[], int len) {
  if (len &lt;= 1) {
    return;
  }

  // 初始堆成无序最大堆
  initHeap(a, len);

  for (int i = len - 1; i &gt; 0; --i) {
    // 将当前堆顶元素与最后一个元素交换，保证这一趟所查找到的堆顶元素与最后一个元素交换
    // 注意：这里所说的最后不是a[len - 1]，而是每一趟的范围中最后一个元素
    // 为什么要加上&gt;0判断？每次不是说堆顶一定是最大值吗？没错，每一趟调整后，堆顶是最大值的
    // 但是，由于len的范围不断地缩小，导致某些特殊的序列出现异常
    // 比如说，5, 3, 8, 6, 4序列，当调整i=1时，已经调整为3,4,5,6,8序列，已经有序了
    // 但是导致了a[i]与a[0]交换，由于变成了4,3,5,6,8反而变成无序了!
    if (a[0] &gt; a[i]) {
      int temp = a[0];
      a[0] = a[i];
      a[i] = temp;
    }

    // 范围变成为：
    // 0...len-1
    // 0...len-1-1
    // 0...1 // 结束
    // 其中，0是堆顶，每次都是找出在指定的范围内比堆顶还大的元素，然后与堆顶元素交换
    adjustMaxHeap(a, i - 1, 0);
  }
}
</code></pre>

<p>基于最小堆实现降序排序</p>

<pre><code>// 初始化堆
void initHeap(int a[], int len) {
  // 从完全二叉树最后一个非子节点开始
  // 在数组中第一个元素的索引是0
  // 第n个元素的左孩子为2n+1，右孩子为2n+2，
  // 最后一个非子节点位置在(n - 1) / 2
  for (int i = (len - 1) / 2; i &gt;= 0; --i) {
    adjustMinHeap(a, len, i);
  }
}

void adjustMinHeap(int a[], int len, int parentNodeIndex) {
  // 若只有一个元素，那么只能是堆顶元素，也没有必要再排序了
  if (len &lt;= 1) {
    return;
  }

  // 记录比父节点大的左孩子或者右孩子的索引
  int targetIndex = -1;

  // 获取左、右孩子的索引
  int leftChildIndex = 2 * parentNodeIndex + 1;
  int rightChildIndex = 2 * parentNodeIndex + 2;

  // 没有左孩子
  if (leftChildIndex &gt;= len) {
    return;
  }

  // 有左孩子，但是没有右孩子
  if (rightChildIndex &gt;= len) {
    targetIndex = leftChildIndex;
  }
  // 有左孩子和右孩子
  else {
    // 取左、右孩子两者中最上的一个
    targetIndex = a[leftChildIndex] &lt; a[rightChildIndex] ? leftChildIndex : rightChildIndex;
  }

  // 只有孩子比父节点的值还要小，才需要交换
  if (a[targetIndex] &lt; a[parentNodeIndex]) {
    int temp = a[targetIndex];

    a[targetIndex] = a[parentNodeIndex];
    a[parentNodeIndex] = temp;


    // 交换完成后，有可能会导致a[targetIndex]结点所形成的子树不满足堆的条件，
    // 若不满足堆的条件，则调整之使之也成为堆
    adjustMinHeap(a, len, targetIndex);
  }
}

void heapSort(int a[], int len) {
  if (len &lt;= 1) {
    return;
  }

  // 初始堆成无序最小堆
  initHeap(a, len);

  for (int i = len - 1; i &gt; 0; --i) {
    // 将当前堆顶元素与最后一个元素交换，保证这一趟所查找到的堆顶元素与最后一个元素交换
    // 注意：这里所说的最后不是a[len - 1]，而是每一趟的范围中最后一个元素
    // 为什么要加上&gt;0判断？每次不是说堆顶一定是最小值吗？没错，每一趟调整后，堆顶是最小值的
    // 但是，由于len的范围不断地缩小，导致某些特殊的序列出现异常
    // 比如说，5, 3, 8, 6, 4序列，当调整i=1时，已经调整为3,4,5,6,8序列，已经有序了
    // 但是导致了a[i]与a[0]交换，由于变成了4,3,5,6,8反而变成无序了!
    if (a[0] &lt; a[i]) {
      int temp = a[0];
      a[0] = a[i];
      a[i] = temp;
    }

    // 范围变成为：
    // 0...len-1
    // 0...len-1-1
    // 0...1 // 结束
    // 其中，0是堆顶，每次都是找出在指定的范围内比堆顶还小的元素，然后与堆顶元素交换
    adjustMinHeap(a, i - 1, 0);
  }
}
</code></pre>

<p>C语言版测试</p>

<p>大家可以测试一下：</p>

<pre><code>//  int a[] = {5, 3, 8, 6, 4};
int a[] = {89,-7,999,-89,7,0,-888,7,-7};
heapSort(a, sizeof(a) / sizeof(int));

for (int i = 0; i &lt; sizeof(a) / sizeof(int); ++i) {
    NSLog(@"%d", a[i]);
}
</code></pre>

<p>Swift版实现
基于最大堆实现升序排序</p>

<pre><code>func initHeap(inout a: [Int]) {
  for var i = (a.count - 1) / 2; i &gt;= 0; --i {
    adjustMaxHeap(&amp;a, len: a.count, parentNodeIndex: i)
  }
}

func adjustMaxHeap(inout a: [Int], len: Int, parentNodeIndex: Int) {
  // 如果len &lt;= 0，说明已经无序区已经缩小到0
  guard len &gt; 1 else {
    return
  }

  // 父结点的左、右孩子的索引
  let leftChildIndex = 2 * parentNodeIndex + 1

  // 如果连左孩子都没有， 一定没有右孩子，说明已经不用再往下了
  guard leftChildIndex &lt; len else {
    return
  }

  let rightChildIndex = 2 * parentNodeIndex + 2

  // 用于记录需要与父结点交换的孩子的索引
  var targetIndex = -1

  // 若没有右孩子，但有左孩子，只能选择左孩子
  if rightChildIndex &gt; len {
    targetIndex = leftChildIndex
  } else {
    // 左、右孩子都有，则需要找出最大的一个
    targetIndex = a[leftChildIndex] &gt; a[rightChildIndex] ? leftChildIndex : rightChildIndex
  }

  // 只有孩子比父结点还要大，再需要交换
  if a[targetIndex] &gt; a[parentNodeIndex] {
    let temp = a[targetIndex]

    a[targetIndex] = a[parentNodeIndex]
    a[parentNodeIndex] = temp

    // 由于交换后，可能会破坏掉新的子树堆的性质，因此需要调整以a[targetIndex]为父结点的子树，使之满足堆的性质
    adjustMaxHeap(&amp;a, len: len, parentNodeIndex: targetIndex)
  }
}

func maxHeapSort(inout a: [Int]) {
  guard a.count &gt; 1 else {
    return
  }

  initHeap(&amp;a)

  for var i = a.count - 1; i &gt; 0; --i {
    // 每一趟都将堆顶交换到指定范围内的最后一个位置
    if a[0] &gt; a[i] {
      let temp = a[0]

      a[0] = a[i]
      a[i] = temp
    }
    print(a)
    print(i - 1)
    // 有序区长度+1，而无序区长度-1，继续缩小无序区，所以i-1
    // 堆顶永远是在0号位置，所以父结点调整从堆顶开始就可以了
    adjustMaxHeap(&amp;a, len: i - 1, parentNodeIndex: 0)
    print(a)
  }
}
</code></pre>

<p>基于最小堆降序排序</p>

<pre><code>func initHeap(inout a: [Int]) {
  for var i = (a.count - 1) / 2; i &gt;= 0; --i {
    adjustMinHeap(&amp;a, len: a.count, parentNodeIndex: i)
  }
}

func adjustMinHeap(inout a: [Int], len: Int, parentNodeIndex: Int) {
  // 如果len &lt;= 0，说明已经无序区已经缩小到0
  guard len &gt; 1 else {
    return
  }

  // 父结点的左、右孩子的索引
  let leftChildIndex = 2 * parentNodeIndex + 1

  // 如果连左孩子都没有， 一定没有右孩子，说明已经不用再往下了
  guard leftChildIndex &lt; len else {
    return
  }

  let rightChildIndex = 2 * parentNodeIndex + 2

  // 用于记录需要与父结点交换的孩子的索引
  var targetIndex = -1

  // 若没有右孩子，但有左孩子，只能选择左孩子
  if rightChildIndex &gt; len {
    targetIndex = leftChildIndex
  } else {
    // 左、右孩子都有，则需要找出最大的一个
    targetIndex = a[leftChildIndex] &lt; a[rightChildIndex] ? leftChildIndex : rightChildIndex
  }

  // 只有孩子比父结点还要大，再需要交换
  if a[targetIndex] &lt; a[parentNodeIndex] {
    let temp = a[targetIndex]

    a[targetIndex] = a[parentNodeIndex]
    a[parentNodeIndex] = temp

    // 由于交换后，可能会破坏掉新的子树堆的性质，因此需要调整以a[targetIndex]为父结点的子树，使之满足堆的性质
    adjustMinHeap(&amp;a, len: len, parentNodeIndex: targetIndex)
  }
}

func minHeapSort(inout a: [Int]) {
  guard a.count &gt; 1 else {
    return
  }

  initHeap(&amp;a)

  for var i = a.count - 1; i &gt; 0; --i {
    // 每一趟都将堆顶交换到指定范围内的最后一个位置
    if a[0] &lt; a[i] {
      let temp = a[0]

      a[0] = a[i]
      a[i] = temp
    } else {
       return // 可以直接退出了，因为已经全部有序了
    }

    // 有序区长度+1，而无序区长度-1，继续缩小无序区，所以i-1
    // 堆顶永远是在0号位置，所以父结点调整从堆顶开始就可以了
    adjustMinHeap(&amp;a, len: i - 1, parentNodeIndex: 0)
  }
}
</code></pre>

<p>测试：</p>

<pre><code>var arr = [5, 3, 8, 6, 4]
//var arr = [89,-7,999,-89,7,0,-888,7,-7]
maxHeapSort(&amp;arr)

print(arr)

// 打印日志如下：
[4, 6, 5, 3, 8]
3
[6, 4, 5, 3, 8]

[3, 4, 5, 6, 8]
2
[5, 4, 3, 6, 8]

[3, 4, 5, 6, 8]
1
[3, 4, 5, 6, 8]

[3, 4, 5, 6, 8]
0
[3, 4, 5, 6, 8]

[3, 4, 5, 6, 8]
</code></pre>

<h2>归并排序</h2>

<p>归并排序（MERGE-SORT）是建立在归并操作上的一种有效的排序算法,该算法是采用分治法（Divide and Conquer）的一个非常典型的应用。将已有序的子序列合并，得到完全有序的序列；即先使每个子序列有序，再使子序列段间有序。若将两个有序表合并成一个有序表，称为二路归并。</p>

<p>归并排序的效率是比较高的，假设数列长度为N，采用中分法的方式将数列分开成若干个小数列一共要log2N 步，每步都是一个合并有序数列的过程，时间复杂度可以记为O ( N )，故一共为O ( N * log2N )。</p>

<p>因为归并排序每次都是在相邻的数据中进行操作，所以归并排序在常用的几种排序方法（快速排序，归并排序，希尔排序，堆排序）中也是效率比较高的。</p>

<p>时间复杂度：O ( N * log2N )</p>

<p>C语言实现</p>

<pre><code>/**
 *  归并排序算法
 *
 *  @param list   待排序的序列
 *  @param first    子序列的起点索引
 *  @param last   子序列的终点索引
 *  @param temp   临时数组，用于将两个子序列二路归并时存储
 */
void mergeSort(int list[], int first, int last, int temp[]) {
  if (first &lt; last) {
    int mid = (first + last) / 2;

    // 递归归并中分左子序列，使子序列有序
    mergeSort(list, first, mid, temp);

    // 递归归并中分右子序列，使子序列有序
    mergeSort(list, mid + 1, last, temp);

    // 最后二路归并，使序列成有序
    // 必须明白的一点，每次中分递归归并都需要二路归并，因为中分后的任意子序列
    // 在有序后，都要二路归并成一个序列
    mergeList(list, first, mid, last, temp);
  }
}

/**
 *  二路归并list[first...mid]子序列与list[mid+1...last]
 *
 *  @param list 序列
 *  @param first    左子序列的起点
 *  @param mid      序列中间分割点
 *  @param last 右序列终点
 *  @param temp 临时序列，用于将两个无序的子序列归并到temp中，使之有序
 */
void mergeList(int list[], int first, int mid, int last, int temp[]) {
  int leftIndex = first;
  int leftEndIndex = mid;

  int rightIndex = mid + 1;
  int rightEndIndex = last;

  int tempIndex = 0;

  // 寻找两个子序列，顺序遍历，将值小的复制到临时数组中，直到其中一个子序列遍历完毕
  while (leftIndex &lt;= leftEndIndex &amp;&amp; rightIndex &lt;= rightEndIndex) {
    // 值小的就复制到临时数组中
    if (list[leftIndex] &lt;= list[rightIndex]) {
      temp[tempIndex] = list[leftIndex];
      tempIndex++;
      leftIndex++;
    } else {
      temp[tempIndex] = list[rightIndex];
      tempIndex++;
      rightIndex++;
    }
  }

  // 有可能左子序列更长，因此将剩下的部分直接复制到临时数组中
  while (leftIndex &lt;= leftEndIndex) {
    temp[tempIndex++] = list[leftIndex++];
  }

  // 有可能右子序列更长，因此将剩下的部分直接复制到临时数组中
  while (rightIndex &lt;= rightEndIndex) {
    temp[tempIndex++] = list[rightIndex++];
  }

  // 最后还需要将有序的临时数组复制到原始序列中
  for (int i = 0; i &lt; tempIndex; ++i) {
    list[first + i] = temp[i];
  }

 // 这里添加一个打印，记录归并
 NSMutableString *str = [[NSMutableString alloc] init];
  for (int i = 0; i &lt; sizeof(list) - 1; ++i) {
    if (i == 0) {
      [str appendFormat:@"%d", list[i]];
    } else {
      [str appendFormat:@", %d", list[i]];
    }
  }
  NSLog(@"此次二路归并后，得到的序列为：(%@)", str);
}
</code></pre>

<p>测试：</p>

<pre><code>int list[] = {6, 202, 100, 301, 38, 8, 1};
int temp[7] = {0};
mergeSort(list, 0, 7-1, temp);
</code></pre>

<p>打印效果：</p>

<pre><code>此次二路归并后，得到的序列为：(6, 202, 100, 301, 38, 8, 1)
此次二路归并后，得到的序列为：(6, 202, 100, 301, 38, 8, 1)
此次二路归并后，得到的序列为：(6, 100, 202, 301, 38, 8, 1)
此次二路归并后，得到的序列为：(6, 100, 202, 301, 8, 38, 1)
此次二路归并后，得到的序列为：(6, 100, 202, 301, 1, 8, 38)
此次二路归并后，得到的序列为：(1, 6, 8, 38, 100, 202, 301)
</code></pre>

<p>从打印结果可以看出来，果然与我们前面的算法分析是一样的。</p>

<h2>插入排序</h2>

<p>插入排序有两种：</p>

<pre><code>直接插入排序
折半插入排序
</code></pre>

<p>原理：</p>

<pre><code>第一个元素就认为是有序的
取第二个元素，判断是否大于第一个元素。若是大于，表示已经有序，不用移动，否则将已经有序的序列整体向后移动一个位置
依此类推，直到所有元素已经有序。
</code></pre>

<p>直接插入排序</p>

<p>需要到两层循环来处理，外层循环用于跑多少趟，而内层循环用于移动元素位置，因此时间复杂度仍为 O ( n2 )</p>

<p>伪代码</p>

<pre><code>void insertSort(int a[], int len) {
  for i = 1; i &lt; len; ++i {     
     // 后者&gt;前者，才需要移动和插入
     if a[i] &lt; a[i - 1] {
        // 记录下要移动的元素
        int target = a[i];

        // 将前j-1个有序的元素分别后移一个位置
        int j = i;
        while j &gt; 0 &amp;&amp; a[j - 1] &gt; target {
          a[j] = a[j - 1];
          j--;
        }

        // 将目标元素插入对应的位置，使之有序
        a[j] = target;
     }
  }
}
</code></pre>

<p>C语言版</p>

<pre><code>void insertSort(int a[], int len) {
  for (int i = 1; i &lt; len; ++i) {

    // 遇到不是有序的，才进入移动元素
    if (a[i] &lt; a[i - 1]) {
      int target = a[i];

      // 移动前j-1元素，分别向后移动一个位置
      int j = i;
      while (j &gt; 0 &amp;&amp; a[j - 1] &gt; target) {
        a[j] = a[j - 1];

        j--;
      }

      // 将目标元素放到目标位置，使之有序
      a[j] = target;
    }
  }
}
</code></pre>

<p>OjbC版</p>

<pre><code>- (void)insertSort:(int[])a len:(int)len {
  for (int i = 1; i &lt; len; ++i) {

    // 遇到不是有序的，才进入移动元素
    if (a[i] &lt; a[i - 1]) {
      int target = a[i];

      // 移动前j-1元素，分别向后移动一个位置
      int j = i;
      while (j &gt; 0 &amp;&amp; a[j - 1] &gt; target) {
        a[j] = a[j - 1];

        j--;
      }

      // 将目标元素放到目标位置，使之有序
      a[j] = target;
    }
  }
}
</code></pre>

<p>Swift版</p>

<pre><code>func insertSort(var a: [Int]) -&gt;[Int] {
  for var i = 1; i &lt; a.count; ++i {
    if a[i] &lt; a[i - 1] {
      let target = a[i]

      var j = i
      while j &gt; 0 &amp;&amp; a[j - 1] &gt; target {
        a[j] = a[j - 1]

        j--
      }

      a[j] = target
    }
  }

  return a
}
</code></pre>

<p>折半插入排序</p>

<p>从第二个元素开始逐个置入监视哨，使用low、high标签进行折半判断比较大小，并确认插入位置，该位置到最后一个数全部后移一位，然后腾出该位置，把监视哨里面的数置入该位置。依此类推进行排序，直到最后一个数比较完毕。
时间复杂度</p>

<p>折半插入排序, 即查找插入点的位置, 可以使用折半查找，这样可以减少比较的次数, 但是移动的次数不变，因此，时间复杂度仍为 O(n2) ;
伪代码</p>

<pre><code>void binaryInsertSort(int a[], int len) {
  for int i = 2; i &lt; len; ++i {
     // 将元素放到哨兵的位置
     a[0] = a[i];

     int low = 1;
     int high = i - 1;

     // 折半查找位置
     while low &lt;= high {
        int mid = (low + high) / 2;

        // 在低半区
        if a[mid] &gt; a[0] {
          high = mid - 1;
        } else { // 在高半区
          low = mid + 1;
        }
     }

     // 将前i - 1个元素后移
     // 找到high，那么high+1就是i要插入的位置  
     for int j = i - 1; j &gt;= high + 1; --j {
        a[j + 1] = a[j];
     }

     // 将临时放在岗哨的元素放到所查找到的位置处
     a[high + 1] = a[0];
  }
}
</code></pre>

<p>C语言版</p>

<pre><code>void binaryInsertSort(int a[], int len) {
  for (int i = 2; i &lt; len; ++i) {
    // 第一个位置永远只是当作哨兵用
    a[0] = a[i];

    int low = 1;
    int high = i - 1;

    while (low &lt;= high) {
      int mid = (low + high) / 2;

      if (a[mid] &gt; a[0]) {
        high = mid - 1;
      } else {
        low = mid + 1;
      }
    }

    // 移动前i - 1个元素
    for (int j = i - 1; j &gt;= high + 1; --j) {
      a[j + 1] = a[j];
    }

    // 放到查找到的位置处
    a[high + 1] = a[0];
  }
}
</code></pre>

<p>Swift版</p>

<pre><code>func binaryInsertSort(var a: [Int]) -&gt;[Int] {
  for var i = 2; i &lt; a.count; ++i {
    a[0] = a[i]

    var low = 1
    var high = i - 1
    while low &lt;= high {
      let mid = (low + high) / 2

      if a[mid] &gt; a[0] {
        high = mid - 1
      } else {
        low = mid + 1
      }
    }

    for var j = i - 1; j &gt;= high + 1; --j {
      a[j + 1] = a[j]
    }

    a[high + 1] = a[0]
  }

  return a
}
</code></pre>

<hr />

<pre><code>Q Q：2211523682/790806573

微信：18370997821/13148454507

微博WB:http://weibo.com/u/3288975567?is_hot=1

git博文：http://al1020119.github.io/

github：https://github.com/al1020119
</code></pre>

<p><img src="http://al1020119.github.io/images/iCocosCoder.jpg" title="Caption" ></p>

<p><img src="http://al1020119.github.io/images/iCocosPublic.jpg" title="Caption" ></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[修行篇-数据结构]]></title>
    <link href="http://al1020119.github.io/blog/2016/08/15/xiu-xing-pian-shu-ju-jie-gou/"/>
    <updated>2016-08-15T12:30:55+08:00</updated>
    <id>http://al1020119.github.io/blog/2016/08/15/xiu-xing-pian-shu-ju-jie-gou</id>
    <content type="html"><![CDATA[<p>概念：数据元素相互之间的关系称为结构。</p>

<p>有四类基本结构：集合、线性结构、树形结构、图状结构;</p>

<ul>
<li><p>集合结构:除了同属于一种类型外，别无其它关系</p></li>
<li><p>线性结构:元素之间存在一对一关系常见类型有: 数组,链表,队列,栈,它们之间在操作上有所区别.例如:链表可在任意位置插入或删除元素,而队列在队尾插入元素,队头删除元素,栈只能在栈顶进行插
入,删除操作.</p></li>
<li><p>树形结构:元素之间存在一对多关系,常见类型有:树(有许多特例:二叉树、平衡二叉树、查找树等)</p></li>
<li><p>图形结构:元素之间存在多对多关系,图形结构中每个结点的前驱结点数和后续结点多个数可以任意</p></li>
</ul>


<p>总结+实战+方案</p>

<ol>
<li>堆</li>
<li>栈</li>
<li>树（二叉树）</li>
<li>图</li>
<li>队列（循环队列）</li>
<li>表（单链表，线性表，hash表）</li>
</ol>


<!--more-->


<h2>堆</h2>

<blockquote><p>堆(heap)又被为优先队列(priority queue)。</p></blockquote>

<p>尽管名为优先队列，但堆并不是队列。回忆一下，在队列中，我们可以进行的限定操作是dequeue和enqueue。dequeue是按照进入队列的先后顺序来取出元素。而在堆中，我们不是按照元素进入队列的先后顺序取出元素的，而是按照元素的优先级取出元素。</p>

<ul>
<li><p>堆是实现调度器(Linux:使用nice控制)的理想数据结构。</p></li>
<li><p>插入元素，删除最大优先级元素</p></li>
<li><p>堆的一个经典的实现是完全二叉树(complete binary tree)。这样实现的堆成为二叉堆(binary heap)。</p></li>
</ul>


<p>完全二叉树是增加了限定条件的二叉树。假设一个二叉树的深度为n。为了满足完全二叉树的要求，该二叉树的前n-1层必须填满，第n层也必须按照从左到右的顺序被填满</p>

<h2>栈</h2>

<blockquote><p>特性：后进先出</p></blockquote>

<h6>注意：如果栈为空的时候，会导致下溢</h6>

<p>栈中的每个元素称为一个frame。而最上层元素称为top frame。栈只支持三个操作， pop, top, push。</p>

<pre><code>pop取出栈中最上层元素(8)，栈的最上层元素变为早先进入的元素(9)。

top查看栈的最上层元素(8)。

push将一个新的元素(5)放在栈的最上层。
</code></pre>

<p>实现方式</p>

<ul>
<li>数组实现：需要一个变量来标记栈顶位置</li>
<li>链表实现：插入元素时对表头操作需要注意</li>
</ul>


<p>常见题目</p>

<ul>
<li>括号匹配</li>
<li>翻转字符串</li>
<li>模拟递归（N皇后问题）</li>
</ul>


<p>栈最经典的计算机应用是函数调用。每个进程都会有一个栈，每个frame中记录了调用函数的参数，自动变量和返回地址。当该函数调用一个新的函数时，栈中会 push一个frame。当函数执行完毕返回时，该frame会pop，从而进入调用该函数的原函数，继续执行</p>

<p>+由于栈是限定了操作的有序的元素集合，所以我们既可以在数组的基础上来实现栈，也可以在表的基础上来实现栈。如果使用数组来实现栈，我们需要预留充足的空间供栈使用，并需要一个下标来记录最上层元素的位置</p>

<h2>树</h2>

<blockquote><p>树(Tree)是元素的集合</p></blockquote>

<p>严格的定义树的方法：</p>

<ol>
<li><p>树是元素的集合。</p></li>
<li><p>该集合可以为空。这时树中没有元素，我们称树为空树 (empty tree)。</p></li>
<li><p>如果该集合不为空，那么该集合有一个根节点，以及0个或者多个子树。根节点与它的子树的根节点用一个边(edge)相连。</p></li>
</ol>


<p>上面的第三点是以递归的方式来定义树，也就是在定义树的过程中使用了树自身(子树)。由于树的递归特征，许多树相关的操作也可以方便的使用递归实现</p>

<ul>
<li><p>二叉树(binary)是一种特殊的树。二叉树的每个节点最多只能有2个子节点</p></li>
<li><p>二叉搜索树(binary search tree)的特殊二叉树。二叉搜索树要求：每个节点都不比它左子树的任意元素小，而且不比它的右子树的任意元素大</p>

<p>  叉搜索树可以方便的实现搜索算法。在搜索元素x的时候，我们可以将x和根节点比较:</p>

<ol>
<li><p>如果x等于根节点，那么找到x，停止搜索 (终止条件)</p></li>
<li><p>如果x小于根节点，那么搜索左子树</p></li>
<li><p>如果x大于根节点，那么搜索右子树</p></li>
</ol>


<p>  二叉搜索树所需要进行的操作次数最多与树的深度相等。n个节点的二叉搜索树的深度最多为n，最少为log(n)。</p></li>
</ul>


<h2>图</h2>

<p>图(graph)是一种比较松散的数据结构。它有一些节点(vertice)，在某些节点之间，由边(edge)相连。节点的概念在树中也出现过，我们通常在节点中储存数据。边表示两个节点之间的存在关系。在树中，我们用边来表示子节点和父节点的归属关系。树是一种特殊的图，但限制性更强一些</p>

<ul>
<li>定义：图G=(V,E)是由节点的集合V和边的集合E构成的。一个图的所有节点构成一个集合V。一个边可以表示为(v1,v2)，其中v1,v2∈V，即两个节点。如果(v1,v2)有序，即(v1,v2)与(v2,v1)不同，那么图是有向的(directed)。有序的边可以理解为单行道，只能沿一个方向行进。如果(v1,v2)无序，那么图是无向的(undirected)。无序的边可以理解成双向都可以行进的道路。一个无序的边可以看作连接相同节点的两个反向的有序边，所以无向图可以理解为有向图的一种特殊情况</li>
</ul>


<p>一种简单的实现图的方法是使用二维数组</p>

<blockquote><p>图的组织方式比较松散，自由度比较大，但也造成比较高的算法复杂度</p></blockquote>

<h2>队列</h2>

<blockquote><p>队列最大的特征是First In, First Out (FIFO，先进先出)</p></blockquote>

<p>队列(queue)是一个简单而常见的数据结构。队列也是有序的元素集合。</p>

<ul>
<li>队首的元素离开队列(dequeue)，和新元素加入队尾(enqueue)。</li>
</ul>


<p>应用</p>

<ul>
<li>一个经典的应用是消息队列(参考Linux进程间通信)，实际上就是利用队列来分配有限的进程。</li>
<li>还有FIFO文件(哦，你可以看到，这种文件叫做FIFO，肯定是和队列有关)，用以实现管道传输。</li>
<li>再比如，我们将多个打印任务发送给打印机，打印机也是使用队列来安排任务的顺序</li>
</ul>


<p>和栈相似，队列也可以有多种实现方式，这里是基于单链表的实现。</p>

<p>与表(list)中的实现方式略有不同的是，这里的head node有两个指针，一个(next)指向下一个元素，一个(end)指向队列的最后一个元素。这样做的目的是方便我们找到队尾，以方便的进行enqueue操作。我们依然可以使用之前定义的表，在需要找到队尾的时候遍历搜索到最后一个元素。</p>

<h2>表</h2>

<blockquote><p>内存中离散分布的有序节点</p></blockquote>

<p>表(list)是常见的数据结构。从数学上来说，表是一个有序的元素集合。在C语言的内存中，表储存为分散的节点(node)。每个节点包含有一个元素，以及一个指向下一个(或者上一个)元素的指针</p>

<p>图中的表中有四个节点。第一个节点是头节点(head node)，这个节点不用于储存元素，只用于标明表的起始。头节点可以让我们方便的插入或者删除表的第一个元素。整个表中包含有三个元素(5， 2， 15)。每个节点都有一个指针，指向下一个节点。最后一个节点的指针为NULL，我们用“接地”来图示该指针。</p>

<ul>
<li><p>表的功能与数组(array)很类似，数组也是有序的元素集合，但数组在内存中为一段连续内存，而表的每个节点占据的内存可以是离散的。在数组中，我们通过跳过固定的内存长度来寻找某个编号的元素。但在表中，我们必须沿着指针联系起的长链，遍历查询元素。此外，数组有固定的大小，表可以根据运行情况插入或者删除节点，动态的更改大小。表插入节点时需要从进程空间的堆中开辟内存空间，用以储存节点。删除节点可以将节点占据的内存归还给进程空间</p></li>
<li><p>表有多种变种。上面的表中，指针指向是从前向后的，称为单向链表(linked list)。</p></li>
<li>还有双向链表(double-linked list)，即每个节点增加一个指向前面一个元素的指针。</li>
<li>以及循环链表(tabular list)，最后一个元素的指针并不为NULL，而是指向头节点。不同类型的链表有不同的应用场景。</li>
</ul>


<p>一个数据结构的实现有两方面:</p>

<ol>
<li>数据结构的内存表达方式;</li>
<li>定义在该数据结构上的操作。</li>
</ol>


<p>我们这里实现最简单的单向链表</p>

<h2>哈希表</h2>

<p>哈希表(hash table)是从一个集合A到另一个集合B的映射(mapping)。映射是一种对应关系，而且集合A的某个元素只能对应集合B中的一个元素。但反过来，集合B中的一个元素可能对应多个集合A中的元素。如果B中的元素只能对应A中的一个元素，这样的映射被称为一一映射</p>

<p>hash只要求从A到B的对应为一个映射，它并没有限定该对应关系为一一映射。</p>

<ul>
<li>因此会有这样的可能：两个不同的键值对应同一个hash值。这种情况叫做hash碰撞(hash collision)。</li>
<li>比如网络协议中的checksum就可能出现这种状况，即所要校验的内容与原文并不同，但与原文生成的checksum(hash值)相同。</li>
<li>再比如，MD5算法常用来计算密码的hash值。已经有实验表明，MD5算法有可能发生碰撞，也就是不同的明文密码生成相同的hash值，这将给系统带来很大的安全漏洞</li>
</ul>


<p>hash表被广泛的用于搜索（区别去数组：遍历整数组，算法复杂度为n），算法复杂度为1</p>

<pre><code>数组虽然可以随机读取，但数组下标是随机的，它与元素值没有任何关系，所以我们要逐次访问各个元素。通过hash函数，我们限定了每个下标位置可能存储的元素。这样，我们利用键值和hash函数，就可以具备相当的先验知识，来选择适当的下标进行搜索。在没有hash碰撞的前提下，我们只需要选择一次，就可以保证该下标指向的元素是我们想要的元素
</code></pre>

<p>hash函数需要解决hash冲突的问题。</p>

<pre><code>比如，上面的hash函数中，"Obama"和"Oaamb"有相同的hash值一个方案是将发生冲突的记录用链表储存起来，让hash值指向该链表，这叫做open hashing:
</code></pre>

<ul>
<li><p>我们在搜索的时候，先根据hash值找到链表，再根据key值遍历搜索链表，直到找到记录。我们可以用其他数据结构代替链表。</p></li>
<li><p>open hashing需要使用指针。我们有时候想要避免使用指针，以保持随机存储的优势，所以采用closed hashing的方式来解决冲突。（closed hashing的关键在如何探测下一个位置）</p></li>
</ul>


<hr />

<p>说在最后
一、栈：</p>

<pre><code>1、后缀表达式的求值； 
2、中缀到后缀表达式的转换； 
3、深度优先搜索的非递归实现； 
4、动态规划的优化：用于维护一个凸序列，便于二分查找，如LIS问题的O(nlgn)算法。 
</code></pre>

<p>二、队列：</p>

<pre><code>1、树的层序遍历； 
2、广度优先搜索； 
3、Bellman-Ford算法的SPFA实现； 
4、网络流中FF算法的Edmonds-Karp实现，以及Preflow算法的队列优化实现。 
</code></pre>

<p>三、二叉搜索树：</p>

<pre><code>1、对大量的关键字的索引查找； 
2、有很多平衡策略以改善其平均性能： 
</code></pre>

<p>常用平衡树：AVL，红黑树，随机化BST，Splay Tree，Treap（或叫笛卡儿树）。</p>

<p>四、散列表（hash表）：</p>

<pre><code>1、一般针对值域较大但状态很稀疏的应用，比如状态压缩记忆化搜索； 
2、实现映射功能。 
</code></pre>

<p>五、检索树（Trie）：</p>

<pre><code>1、一般用于字符串索引算法，速度快，但占用空间较大（相对hash）； 
2、常用的改进结构：Patricia线索树，多叉检索树（TST）。 
</code></pre>

<p>六、优先队列：</p>

<pre><code>1、常用的是二叉堆的实现，具体应用如堆排序和Dijkstra算法； 
2、当需要快速合并两个优先队列时，常用二项式队列，实现简单。 
3、注意最大最小堆的配对使用。 
</code></pre>

<p>七、线段树和树状数组：</p>

<pre><code>1、两者都可以用于离散对象的统计； 
2、后者的步进函数的性质和应用值得注意； 
3、前者基本上适用于任何的区间操作，如求区间最值，改变区间的值等。 
4、线段树还可以用于优化状态的枚举，经常和动态规划结合。 
</code></pre>

<p>八、后缀树与后缀数组：</p>

<pre><code>1、总体规律是两者的实现都比较复杂，前者更甚，但是前者的功能也更强大； 
2、几乎可以解决所有常见的关于字符串的算法，如最长回文子串，最长重复子串，以及很多的模式匹配问题。 
</code></pre>

<p>九、并查集：</p>

<pre><code>1、解决无向图的连通性问题，如用于Kruskal算法； 
2、解决等价关系的查询（这是它的主要用武之地），如05年Baidu之星初赛的石头剪子布游戏； 
3、优点是实现异常简单，缺点是合并后无法分离，若需要可以选择用动态树。 
</code></pre>

<p>十、邻接表和边表：</p>

<pre><code>1、表示图的最直接的方法； 
2、后者更省空间，并且在一定程度上更好用，比如Bellman-Ford算法。 
</code></pre>

<p>ps:数组、链表太基础不在考虑之列。</p>

<hr />

<pre><code>Q Q：2211523682/790806573

微信：18370997821/13148454507

微博WB:http://weibo.com/u/3288975567?is_hot=1

git博文：http://al1020119.github.io/

github：https://github.com/al1020119
</code></pre>

<p><img src="http://al1020119.github.io/images/iCocosCoder.jpg" title="Caption" ></p>

<p><img src="http://al1020119.github.io/images/iCocosPublic.jpg" title="Caption" ></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[修行篇-探程序之精华]]></title>
    <link href="http://al1020119.github.io/blog/2016/08/08/oneday/"/>
    <updated>2016-08-08T23:53:19+08:00</updated>
    <id>http://al1020119.github.io/blog/2016/08/08/oneday</id>
    <content type="html"><![CDATA[<blockquote><p>做了这么久ios开发，由于最近发现自己在性能和底层相关方面，还有有待提高，一句话总结就是：知其然，而不知其所以然。</p></blockquote>

<p>最近也一直在研究相关方面的技术，包括ios相关技术的底层实现，但是这还是远远不够的，一个真正的程序员是必须做到“学无止境”。</p>

<p>经过这几年的开发与学习，包括和同行朋友的了解，作为一个程序员，必备的技术有以下四种。</p>

<ul>
<li>算法</li>
<li>数据结构

<ul>
<li>程序=算法+数据结构</li>
</ul>
</li>
<li>设计模式</li>
<li>数据库</li>
</ul>


<!--more-->


<p>当然可能还有其他的，比如操作系统，软件工程，当然C语音是不能再基础的基础，但是除了上面四点，笔者可能不会专门去研究，最多作为了解。</p>

<blockquote><p>从今天开始，我将从上面四点开始人生的第二次攀爬，希望能爬到一个属于我自己的高峰，也希望能对和我有意义心态的人有所帮助。</p></blockquote>

<h4>路线</h4>

<ol>
<li>算法，数据结构，设计模式，数据库，相关概念的介绍与理解(可能会有部分的软件工程和操作系统相关)</li>
<li>简单代码演示以便更加深刻理解</li>
<li>实际应用以便更加深入理解</li>
<li>举一反三</li>
<li>相关总结</li>
</ol>


<hr />

<p>更新中，敬请关注。。。。。。</p>

<pre><code>Q Q：2211523682/790806573

微信：18370997821/13148454507

微博WB:http://weibo.com/u/3288975567?is_hot=1

git博文：http://al1020119.github.io/

github：https://github.com/al1020119
</code></pre>

<p><img src="http://al1020119.github.io/images/iCocosCoder.jpg" title="Caption" ></p>

<p><img src="http://al1020119.github.io/images/iCocosPublic.jpg" title="Caption" ></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS开发各种底层实现--包你满意😘！]]></title>
    <link href="http://al1020119.github.io/blog/2016/08/01/gezhongdicenshixian/"/>
    <updated>2016-08-01T23:30:19+08:00</updated>
    <id>http://al1020119.github.io/blog/2016/08/01/gezhongdicenshixian</id>
    <content type="html"><![CDATA[<p>iOS开发常用技术底层实现（精简概述）</p>

<p>本章将对ios开发技术底层实现的总结，其实关于ios开发中各种底层的实现，网上相关文章多到数不过来，而不且非常不错，我也没有自信我能比他们做的更好，因为毕竟每个人专研的东西不一样，本文主要正对三类用户！</p>

<ol>
<li>资深的ios开发者，对底层做过专门研究，但是没有一个系统整理，或者说不能很清楚的表达。</li>
<li>ios开发初学者，没有专门研究过底层或者相关源码的初学者，但是不太建议一开始就看，因为如果你没有过一点接触，看了也看不懂，或者看了也白看，最多就是留个印象在脑子了，对初学者来说，切记不能靠背或者了解，而且细细研究每一个技术点，再慢慢深入挖掘。</li>
<li>ios开发待业程序员（面试）专用，不管你有没有接触过ios开发相关的底层，只要你是在准备找工作的程序员，我相信你看了绝对有用，但是并不能正面你就真的理解了，所以希望这对你来说只是短暂的，后续得花大量时间去专门研究才能在这条路上走得更远，不然你永远只是个码农！</li>
</ol>


<p>好了，废话也不多说了，我们开始吧。。。。。</p>

<h6>系统篇</h6>

<ul>
<li>内存管理</li>
<li>Runtime</li>
</ul>


<h6>事件篇</h6>

<ul>
<li>事件传递</li>
<li>事件响应</li>
</ul>


<h6>代码篇</h6>

<ul>
<li>Block</li>
<li>__Block</li>
</ul>


<!--more-->


<h6>实战</h6>

<ul>
<li>KVO</li>
<li>KVC</li>
</ul>


<h6>高级</h6>

<ul>
<li>GCD</li>
</ul>


<h6>全栈篇</h6>

<ul>
<li>JSPatch</li>
<li>React Native</li>
</ul>


<h6>必备篇</h6>

<ul>
<li>多线程</li>
<li>网络</li>
<li>数据持久化</li>
</ul>


<h6>通用篇</h6>

<ul>
<li>数组</li>
<li>字典</li>
<li>集合</li>
</ul>


<h6>#写在最后</h6>

<hr />

<h1>系统篇</h1>

<hr />

<h3>内存管理</h3>

<ul>
<li><p>黄金法则</p>

<ul>
<li>如果一个对象使用了alloc，[mutable] copy，retain，那么你必须使用相应的release或autonrelease</li>
</ul>
</li>
</ul>


<p>MRC:</p>

<pre><code> 手动管理内存（retain, release, autorelease,不多说） 持有对象,retain +1 ,引用计数加1, 释放对象:release -1, 引用计数减1,当引用计数为0时,会自动释放内存.  autorelease对象内存的管理放到autoreleasepool中, 当pool drain时,回收内存. (这是基于 objective-c的运行时特性和垃圾回收机制)
</code></pre>

<p>ARC:</p>

<pre><code> 手动管理内存, 这是xcode4.x版本的特性,(4.1及以前没有,我从4.6开始的), 原理是:在编译代码的时候为你自动在合适的位置插入release 和 autorelease, (运行时处理垃圾回收就如何MRC一样).
</code></pre>

<p>总结: ARC机制拥有和MRC一样的效率, ARC通过在部分优化和在最合适的地方完成引用计数的维护,所以支持使用ARC.</p>

<p>规则</p>

<p>规则：</p>

<ul>
<li><p>1、Objective-C类中实现了引用计数器，对象知道自己当前被引用的次数</p></li>
<li><p>2、最初对象的计数器为1</p></li>
<li><p>3、如果需要引用对象，可以给对象发送一个retain消息，这样对象的计数器就加1</p></li>
<li><p>4、当不需要引用对象了，可以给对象发送release消息，这样对象计数器就减1</p></li>
<li><p>5、当计数器减到0，自动调用对象的dealloc函数，对象就会释放内存</p></li>
<li><p>6、计数器为0的对象不能再使用release和其他方法</p></li>
</ul>


<h3>Runtime</h3>

<p>一套纯低层的C语言库
平时我们编写的OC代码都会转成Runtime去执行</p>

<p>特性：</p>

<pre><code>动态类型：程序直到执行时才能确定所属的类。

动态绑定：程序直到执行时才能确定实际要调用的方法。

动态加载：根据需求加载所需要的资源
</code></pre>

<p>Runtime消息机制</p>

<p>首先通过obj的isa指针找到obj对应的class。</p>

<ul>
<li>首先检测这个 selector 是不是要忽略。比如 Mac OS X 开发，有了垃圾回收就不理会 retain，release 这些函数。</li>
<li>检测这个 selector 的 target 是不是 nil，Objc 允许我们对一个 nil 对象执行任何方法不会 Crash，因为运行时会被忽略掉。</li>
<li>如果上面两步都通过了，那么就开始查找这个类的实现 IMP，</li>
<li>在Class中先去cache中 通过SEL查找对应函数method，找到就执行对应的实现。</li>
<li>若cache中未找到，再去methodList中查找，找到就执行对应的实现。</li>
<li>若methodlist中未找到，则取superClass中查找（重复执行以上两个步骤），直到找到最根的类为止。</li>
<li>若任何一部能找到，则将method加 入到cache中，以方便下次查找，并通过method中的函数指针跳转到对应的函数中去执行。</li>
<li>如果以上都不能找到，则会开始进行消息转发</li>
</ul>


<p>消息转发</p>

<ul>
<li>1.动态方法解析：向当前类发送 resolveInstanceMethod: 信号，检查是否动态向该类添加了方法。（迷茫请搜索：@dynamic）</li>
<li>2.快速消息转发：检查该类是否实现了 forwardingTargetForSelector: 方法，若实现了则调用这个方法。若该方法返回值对象非nil或非self，则向该返回对象重新发送消息。</li>
<li>3.标准消息转发：runtime发送methodSignatureForSelector:消息获取Selector对应的方法签名。返回值非空则通过forwardInvocation:转发消息，返回值为空则向当前对象发送doesNotRecognizeSelector:消息，程序崩溃退出</li>
</ul>


<p>总结就是：
在一个函数找不到时，OC提供了三种方式去补救：</p>

<ul>
<li>1、调用resolveInstanceMethod给个机会让类添加这个实现这个函数</li>
<li>2、调用forwardingTargetForSelector让别的对象去执行这个函数</li>
<li>3、调用forwardInvocation（函数执行器）灵活的将目标函数以其他形式执行。
如果都不中，调用doesNotRecognizeSelector抛出异常。</li>
</ul>


<hr />

<h1>事件篇</h1>

<h3>应用如何找到最合适的控件来处理事件？</h3>

<pre><code>1.首先判断主窗口（keyWindow）自己是否能接受触摸事件
2.判断触摸点是否在自己身上
3.子控件数组中从后往前遍历子控件，重复前面的两个步骤（所谓从后往前遍历子控件，就是首先查找子控件数组中最后一个元素，然后执行1、2步骤）
4.view，比如叫做fitView，那么会把这个事件交给这个fitView，再遍历这个fitView的子控件，直至没有更合适的view为止。
5.如果没有符合条件的子控件，那么就认为自己最合适处理这个事件，也就是自己是最合适的view
</code></pre>

<h2>事件的传递和响应的区别：</h2>

<ul>
<li>事件的传递是从上到下（父控件到子控件），事件的响应是从下到上（顺着响应者链条向上传递：子控件到父控件。</li>
</ul>


<h3>事件响应</h3>

<h5>响应者链的事件传递过程:</h5>

<pre><code>1&gt;如果当前view是控制器的view，那么控制器就是上一个响应者，事件就传递给控制器；如果当前view不是控制器的view，那么父视图就是当前view的上一个响应者，事件就传递给它的父视图
2&gt;在视图层次结构的最顶级视图，如果也不能处理收到的事件或消息，则其将事件或消息传递给window对象进行处理
3&gt;如果window对象也不处理，则其将事件或消息传递给UIApplication对象
4&gt;如果UIApplication也不能处理该事件或消息，则将其丢弃
</code></pre>

<h3>事件传递</h3>

<h5>事件处理的整个流程总结：</h5>

<pre><code>　　1.触摸屏幕产生触摸事件后，触摸事件会被添加到由UIApplication管理的事件队列中（即，首先接收到事件的是UIApplication）。
　　2.UIApplication会从事件队列中取出最前面的事件，把事件传递给应用程序的主窗口（keyWindow）。
　　3.主窗口会在视图层次结构中找到一个最合适的视图来处理触摸事件。（至此，第一步已完成)
　　4.最合适的view会调用自己的touches方法处理事件
　　5.touches默认做法是把事件顺着响应者链条向上抛。
</code></pre>

<hr />

<h1>代码篇</h1>

<hr />

<h3>Block的底层实现</h3>

<p>一句话:</p>

<pre><code>栈地址和对地址值的拷贝

block就是一个里面存储了指向函数体中包含定义block时的代码块的函数指针，以及block外部上下文变量等信息的结构体。
</code></pre>

<p>Block结构体中含有isa指针，这就证明了Block其实就是对象，并具有一般对象的所有功能。这个isa指针被初始化为 <em>NSConcreteStackBlock 或者 </em>NSConcreteGlobalBlock 类的地址。在没有开启ARC的情况下，如果Block中包含有局部变量则isa被初始化为前者，否则就被初始化为后者。而当ARC开启后，如果Block中包含有局部变量则isa被初始化为 <em>NSConcreteMallocBlock ，否则就被初始化为 </em>NSConcreteGlobalBlock 。invoke是一个函数指针，它指向的是Block被转换成函数的地址。最后的imported variables部分是Block需要访问的外部的局部变量，他们在编译就会被拷贝到Block中，这样一来Block就是成为一个闭包了。</p>

<h3>__block底层实现</h3>

<pre><code>一句话：传值 和传址
</code></pre>

<p><strong>block打印C++源码可以看到</strong>Block_byref_a_0结构体，这个结构体中含有isa指针，所以也是一个对象，它是用来包装局部变量a的。当block被copy到堆中时，<strong>Person</strong>test_block_impl_0的拷贝辅助函数<strong>Person</strong>test_block_copy_0会将__Block_byref_a_0拷贝至堆中，所以即使局部变量所在堆被销毁，block依然能对堆中的局部变量进行操作</p>

<pre><code>这样做是为了保证操作的值始终是堆中的拷贝，而不是栈中的值。（处理在局部变量所在栈还没销毁，就调用block来改变局部变量值的情况，如果没有__forwarding指针，则修改无效）
</code></pre>

<hr />

<h1>实战篇</h1>

<hr />

<h2>KVO/KVC</h2>

<p>VC/KVO是观察者模式的一种实现，在Cocoa中是以被万物之源NSObject类实现的NSKeyValueCoding/NSKeyValueObserving非正式协议的形式被定义为基础框架的一部分。从协议的角度来说，KVC/KVO本质上是定义了一套让我们去遵守和实现的方法。
当然，KVC/KVO实现的根本是Objective-C的动态性和runtime，这在后文的原理部分会有详述。
另外，KVC/KVO机制离不开访问器方法的实现，这在后文中也有解释。</p>

<p>1、KVC简介</p>

<pre><code>全称是Key-value coding，翻译成键值编码。顾名思义，在某种程度上跟map的关系匪浅。它提供了一种使用字符串而不是访问器方法去访问一个对象实例变量的机制。
</code></pre>

<p>2、KVO简介</p>

<pre><code>全称是Key-value observing，翻译成键值观察。提供了一种当其它对象属性被修改的时候能通知当前对象的机制。再MVC大行其道的Cocoa中，KVO机制很适合实现model和controller类之间的通讯。
</code></pre>

<h3>KVO的底层实现（基于KVC-》运行时）</h3>

<p>当某个类的对象第一次被观察时，系统就会在运行期动态地创建该类的一个派生类，在这个派生类中重写基类中任何被观察属性的 setter 方法。</p>

<pre><code>派生类在被重写的 setter 方法实现真正的通知机制，就如前面手动实现键值观察那样。这么做是基于设置属性会调用 setter 方法，而通过重写就获得了 KVO 需要的通知机制。当然前提是要通过遵循 KVO 的属性设置方式来变更属性值，如果仅是直接修改属性对应的成员变量，是无法实现 KVO 的。

同时派生类还重写了 class 方法以“欺骗”外部调用者它就是起初的那个类。然后系统将这个对象的 isa 指针指向这个新诞生的派生类，因此这个对象就成为该派生类的对象了，因而在该对象上对 setter 的调用就会调用重写的 setter，从而激活键值通知机制。此外，派生类还重写了 dealloc 方法来释放资源
</code></pre>

<p>isa指针指向的其实是类的元类，如果之前的类名为：Person，那么被runtime更改以后的类名会变成：NSKVONotifying_Person。
新的NSKVONotifying_Person类会重写以下方法：
增加了监听的属性对应的set方法，class，dealloc，_isKVOA</p>

<h3>KVC的底层实现</h3>

<p>KVC运用了一个isa-swizzling技术。isa-swizzling就是类型混合指针机制。KVC主要通过isa-swizzling，来实现其内部查找定位的。isa指针，如其名称所指，（就是is a kind of的意思），指向维护分发表的对象的类。该分发表实际上包含了指向实现类中的方法的指针，和其它数据。</p>

<p>一个对象在调用setValue的时候，</p>

<ul>
<li>（1）首先根据方法名找到运行方法的时候所需要的环境参数。</li>
<li>（2）他会从自己isa指针结合环境参数，找到具体的方法实现的接口。</li>
<li>（3）再直接查找得来的具体的方法实现。</li>
</ul>


<hr />

<h1>高级</h1>

<hr />

<h3>GCD底层实现</h3>

<p>GCD内部是怎么实现的</p>

<ul>
<li>1 IOS和OS X的核心是XNU内核，GCD是基于XUN内核实现的</li>
<li>2 GCD的API全部在libdispatch库中</li>
<li><p>3 GCD的底层实现主要有Dispatch Queue 和Dispatch Source</p>

<ul>
<li>Dispatch Queue ：管理block操作</li>
<li>Dispatch Source :处理事件(比如线程间通信)</li>
</ul>
</li>
</ul>


<p>NSOperationQueue 和GCD的区别和类似的地方</p>

<ul>
<li>1 GCD是纯C语言的API， NSOperationQueue是基于GCD的OC版本封装</li>
<li>2 GCD只支持FIFO的队列，NSOperationQueue可以很方便地调整执行顺序 设置最大并发数量</li>
<li>3 NSOperationQueue 可以轻松地在operation 间设置依赖关系，而GCD需要写很多的代码</li>
<li>4 NSOperationQueue支持KVO，可以监测operation是否正在执行(is Executed),是否结束(is finished),是否取消( is canceld);</li>
<li>5 GCD的执行速度比NSOperationQueue快</li>
</ul>


<hr />

<h1>全栈篇</h1>

<hr />

<h3>JSpatch底层实现</h3>

<p>JSPatch 能做到通过 JS 调用和改写 OC 方法最根本的原因是 Objective-C 是动态语言，OC 上所有方法的调用/类的生成都通过 Objective-C Runtime 在运行时进行，我们可以通过类名/方法名反射得到相应的类和方法：</p>

<pre><code>Class class = NSClassFromString("UIViewController");
id viewController = [[class alloc] init];
SEL selector = NSSelectorFromString("viewDidLoad");
[viewController performSelector:selector];
</code></pre>

<p>也可以替换某个类的方法为新的实现：</p>

<pre><code>static void newViewDidLoad(id slf, SEL sel) {}
class_replaceMethod(class, selector, newViewDidLoad, @"");
</code></pre>

<p>还可以新注册一个类，为类添加方法：</p>

<pre><code>Class cls = objc_allocateClassPair(superCls, "JPObject", 0);
objc_registerClassPair(cls);
class_addMethod(cls, selector, implement, typedesc);
</code></pre>

<p>对于 Objective-C 对象模型和动态消息发送的原理已有很多文章阐述得很详细，这里就不详细阐述了。理论上你可以在运行时通过类名/方法名调用到任何 OC 方法，替换任何类的实现以及新增任意类。所以 JSPatch 的基本原理就是：JS 传递字符串给 OC，OC 通过 Runtime 接口调用和替换 OC 方法。这是最基础的原理，实际实现过程还有很多怪要打，接下来看看具体是怎样实现的。</p>

<h6>总结：</h6>

<p>使用JS利用OC的动态特性，执行我们想要执行的代码</p>

<h3>React Native</h3>

<p>RN主要的通信在于java与js之间，平常我们写的jsx代码最终会调用到原生的View。上一篇博客我们也了解到了要新建一个原生模块需要在java层和js层分别写一个Module</p>

<p>特点：</p>

<ul>
<li><p>可以基于 React Native使用 JavaScript 编写应用逻辑，UI 则可以保持全是原生的。这样的话就没有必要就 HTML5 的 UI 做出常见的妥协；</p></li>
<li><p>React 引入了一种与众不同的、略显激进但具备高可用性的方案来构建用户界面。长话短说，应用的 UI 简单通过一个基于应用目前状态的函数来表达。</p></li>
</ul>


<p>RN总共分为三层，java层，C++层，js层</p>

<ul>
<li>Java层：java层就是app原生代码，它通过启动C++层的javascript解析器javascriptCore来执行js代码，从而构建原生UI等。java层依赖于众多优秀开源库，在图片处理使用的是Fresco，网络通信使用的是okhttp，Json解析工具用jackson,动画库用NineOldAndroids等，在java层原生的功能均封装为Module，如Toast和Log等。</li>
<li>C++层：c++层最主要是封装了JavaScriptCore，它是一个全新的支持ES6的webKit。Bridge连接了java与js之间的通信。解析js文件是通过JSCExectutor进行的。</li>
<li>Js层：主要处理事件分发及UI Layout，平常开发最常用的。通用jsx来写业务代码，通过flexbox来实现布局。不依赖DOM。由于react有 DOM diff这个算法，所以它的效率非常高。
通信机制</li>
</ul>


<p>在Java层与Js层的bridge分别存有相同一份模块配置表，Java与Js互相通信时，通过将里配置表中的moduleID，methodID转换成json数据的形式传递给到C++层，C++层传送到js层，通过js层的的模块配置表找到对应的方法进行执行，如果有callback，则回传给java层。这里只是大概介绍。</p>

<p>总结：</p>

<ul>
<li>在程序启动的时候，首先会调用ReactActivity的onCreate函数中，我们会去创建一个ReactInstanceManagerImpl对象。通过ReactRootView的startReactApplication方法开启整个RN世界的大门。</li>
<li>在这个方法中，我们会通过一个AsyncTask去创建ReactContext</li>
<li>在创建ReactContext中，我们把我们自己注入和CoreModulesPackage通过processPackage方法将其中的各个modules注入到了对应的Registry中。最后通过CatalystInstanceImpl中的ReactBridge将NativeModule和JSModule注册表通过jni传输到了JS层。</li>
<li>java调用js时，会在ReactApplicationContext创建的时候存入注册表类JavaScriptModuleRegistry中，同时通过动态代理生成代理实例，并在代理拦截类JavaScriptModuleInvocationHandler中统一处理发向Javascript的所有通信请求。</li>
<li>JSCExecutor将所有来自Java层的通信请求封装成Javascript执行语句。</li>
<li>接着在js层中的MessageQueue里匹配ModuleId和MethodId。找到调用模块。</li>
<li>如果是js层调用java层，js最终都会调用<em>_nativeCall方法，通过flushedQueue将this.</em>queue返回给Bridger。</li>
<li>C++层调用PlatformBridgeCallback对象的onCallNativeModules方法，执行makeJavaCall方法，里面最终通过env->CallVoidMethod调用了Java层的方法。</li>
<li>调用Java层NativeModulesReactCallback的call方法，通过moduleID从保存在其内部的NativeModule映射表，匹配到需要被执行的NativeModule对象，再通过methodID匹配到所要调用的方法。通过invoke反射方式执行NativeModule的方法。</li>
</ul>


<hr />

<h1>必备篇</h1>

<hr />

<h5>多线程</h5>

<h5>网络</h5>

<h5>数据持久化</h5>

<hr />

<hr />

<h1>通用篇</h1>

<hr />

<h5>数组</h5>

<h5>字典</h5>

<h5>集合</h5>

<hr />

<p>更新中，敬请关注。。。。。。</p>

<pre><code>Q Q：2211523682/790806573

微信：18370997821/13148454507

微博WB:http://weibo.com/u/3288975567?is_hot=1

git博文：http://al1020119.github.io/

github：https://github.com/al1020119
</code></pre>

<p><img src="http://al1020119.github.io/images/iCocosCoder.jpg" title="Caption" ></p>

<p><img src="http://al1020119.github.io/images/iCocosPublic.jpg" title="Caption" ></p>
]]></content>
  </entry>
  
</feed>
