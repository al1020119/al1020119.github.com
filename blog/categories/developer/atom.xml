<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Developer | iOS梦工厂]]></title>
  <link href="http://al1020119.github.io/blog/categories/developer/atom.xml" rel="self"/>
  <link href="http://al1020119.github.io/"/>
  <updated>2015-12-15T12:30:21+08:00</updated>
  <id>http://al1020119.github.io/</id>
  <author>
    <name><![CDATA[iCocos]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[够逼格的注释习惯]]></title>
    <link href="http://al1020119.github.io/blog/2015/09/13/you-xiu-cheng-xu-yuan-shi-zen-yao-xie-zhu-shi-de/"/>
    <updated>2015-09-13T02:59:30+08:00</updated>
    <id>http://al1020119.github.io/blog/2015/09/13/you-xiu-cheng-xu-yuan-shi-zen-yao-xie-zhu-shi-de</id>
    <content type="html"><![CDATA[<p>够逼格的注释习惯总结</p>

<p>首先关于注意这里就不说什么VVDocument了，来点新鲜的！</p>

<h6>也许你使用过#warning 警告提示</h6>

<h6>也许你也使用过#pragma marks。</h6>

<p>但是你见过或者使用过下面这个吗？</p>

<pre><code>Comments containing:
MARK:
TODO:
FIXME:
!!!:
???:
</code></pre>

<p>没有，那么你就快速的看看下面的内容，非常好用，也非常简单，不过具体使用看个人</p>

<!--more-->


<p> 首先说一下三个最常用的：</p>

<ul>
<li>1、TODO</li>
</ul>


<p> 等待实现的功能</p>

<ul>
<li>2、FIXME</li>
</ul>


<p> 需要修正的功能</p>

<ul>
<li>3、！！！</li>
</ul>


<p> 需要改进的功能</p>

<p>具体使用</p>

<pre><code>// FIXME:sss
/* FIXME: sss */


// MARK:sss
/* MARK:sss */


// !!!:sss
/* !!!: sss */


// ???:sss
/* ???: sss */


// TODO:sss
/* TODO: sss */


// Comments containing: sss
/* Comments containing: sss */
</code></pre>

<p>注意空格.</p>

<p> 最后你会发现下面的效果，虽然和#pragma marks没有什么区别，但是这就是装逼原因</p>

<p>关于最后一个/<em> Comments containing: sss </em>/，笔者还没照发对应的使用方法，如果你知道可以联系我哦！</p>

<!--more-->

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[网络请求疯（封）装]]></title>
    <link href="http://al1020119.github.io/blog/2015/08/25/wang-shang-qing-qiu-feng-(feng-)zhuang/"/>
    <updated>2015-08-25T09:37:30+08:00</updated>
    <id>http://al1020119.github.io/blog/2015/08/25/wang-shang-qing-qiu-feng-(feng-)zhuang</id>
    <content type="html"><![CDATA[<p>一直想总结一下关于iOS的离线数据缓存的方面的问题，然后最近也简单的对AFN进行了再次封装，所有想把这两个结合起来写一下。数据展示型的页面做离线缓存可以有更好的用户体验，用户在离线环境下仍然可以获取一些数据，这里的数据缓存首选肯定是SQLite，轻量级，对数据的存储读取相对于其他几种方式有优势，这里对AFN的封装没有涉及太多业务逻辑层面的需求，主要还是对一些方法再次封装方便使用，解除项目对第三方的耦合性，能够简单的快速的更换底层使用的网络请求代码。这篇主要写离线缓存思路，对AFN的封装只做简单的介绍。</p>

<p>关于XLNetworkApi</p>

<!--more-->


<p>XLNetworkApi的一些功能和说明：</p>

<p>使用XLNetworkRequest做一些GET、POST、PUT、DELETE请求，与业务逻辑对接部分直接以数组或者字典的形式返回。
以及网络下载、上传文件，以block的形式返回实时的下载、上传进度，上传文件参数通过模型XLFileConfig去存取。
通过继承于XLDataService来将一些数据处理，模型转化封装起来，于业务逻辑对接返回的是对应的模型，减少Controllor处理数据处理逻辑的压力。
自定义一些回调的block</p>

<pre><code>/**
请求成功block
*/
typedef void (^requestSuccessBlock)(id responseObj);
/**
请求失败block
*/
typedef void (^requestFailureBlock) (NSError *error);
/**
请求响应block
*/
typedef void (^responseBlock)(id dataObj, NSError *error);
/**
监听进度响应block
*/
typedef void (^progressBlock)(int64_t bytesWritten, int64_t totalBytesWritten, int64_t totalBytesExpectedToWrite);
XLNetworkRequest.m部分实现
#import "XLNetworkRequest.h"
#import "AFNetworking.h"
@implementation XLNetworkRequest
+ (void)getRequest:(NSString *)url params:(NSDictionary *)params success:(requestSuccessBlock)successHandler failure:(requestFailureBlock)failureHandler {
//网络不可用
  if (![self checkNetworkStatus]) {
      successHandler(nil);
      failureHandler(nil);
      return;
  }
  AFHTTPRequestOperationManager *manager = [self getRequstManager];
  [manager GET:url parameters:params success:^(AFHTTPRequestOperation * _Nonnull operation, id  _Nonnull responseObject) {
      successHandler(responseObject);
  } failure:^(AFHTTPRequestOperation * _Nullable operation, NSError * _Nonnull error) {
      XLLog(@"------请求失败-------%@",error);
      failureHandler(error);
  }];
}
</code></pre>

<p>下载部分代码</p>

<pre><code>    //下载文件，监听下载进度
    + (void)downloadRequest:(NSString *)url successAndProgress:(progressBlock)progressHandler complete:(responseBlock)completionHandler {
      if (![self checkNetworkStatus]) {
          progressHandler(0, 0, 0);
          completionHandler(nil, nil);
          return;
      }
      NSURLSessionConfiguration *sessionConfiguration = [NSURLSessionConfiguration defaultSessionConfiguration];
      AFURLSessionManager *manager = [[AFURLSessionManager alloc] initWithSessionConfiguration:sessionConfiguration];
      NSURLRequest *request = [NSURLRequest requestWithURL:[NSURL URLWithString:url]];
      NSProgress *kProgress = nil;
      NSURLSessionDownloadTask *downloadTask = [manager downloadTaskWithRequest:request progress:&amp;kProgress destination:^NSURL * _Nonnull(NSURL * _Nonnull targetPath, NSURLResponse * _Nonnull response) {
          NSURL *documentUrl = [[NSFileManager defaultManager] URLForDirectory :NSDocumentDirectory inDomain:NSUserDomainMask appropriateForURL:nil create:NO error:nil];
          return [documentUrl URLByAppendingPathComponent:[response suggestedFilename]];
      } completionHandler:^(NSURLResponse * _Nonnull response, NSURL * _Nonnull filePath, NSError * _Nonnull error){
          if (error) {
              XLLog(@"------下载失败-------%@",error);
          }
          completionHandler(response, error);
      }];
      [manager setDownloadTaskDidWriteDataBlock:^(NSURLSession * _Nonnull session, NSURLSessionDownloadTask * _Nonnull downloadTask, int64_t bytesWritten, int64_t totalBytesWritten, int64_t totalBytesExpectedToWrite) {
          progressHandler(bytesWritten, totalBytesWritten, totalBytesExpectedToWrite);
      }];
      [downloadTask resume];
    }
</code></pre>

<p>上传部分代码</p>

<pre><code>//上传文件，监听上传进度
+ (void)updateRequest:(NSString *)url params:(NSDictionary *)params fileConfig:(XLFileConfig *)fileConfig successAndProgress:(progressBlock)progressHandler complete:(responseBlock)completionHandler {
  if (![self checkNetworkStatus]) {
      progressHandler(0, 0, 0);
      completionHandler(nil, nil);
      return;
  }
  NSMutableURLRequest *request = [[AFHTTPRequestSerializer serializer] multipartFormRequestWithMethod:@"POST" URLString:url parameters:params constructingBodyWithBlock:^(id  _Nonnull formData) {
      [formData appendPartWithFileData:fileConfig.fileData name:fileConfig.name fileName:fileConfig.fileName mimeType:fileConfig.mimeType];
  } error:nil];
  //获取上传进度
  AFHTTPRequestOperation *operation = [[AFHTTPRequestOperation alloc] initWithRequest:request];
  [operation setUploadProgressBlock:^(NSUInteger bytesWritten, long long totalBytesWritten, long long totalBytesExpectedToWrite) {
      progressHandler(bytesWritten, totalBytesWritten, totalBytesExpectedToWrite);
  }];
  [operation setCompletionBlockWithSuccess:^(AFHTTPRequestOperation * _Nonnull operation, id  _Nonnull responseObject) {
      completionHandler(responseObject, nil);
  } failure:^(AFHTTPRequestOperation * _Nonnull operation, NSError * _Nonnull error) {
      completionHandler(nil, error);
      if (error) {
          XLLog(@"------上传失败-------%@",error);
      }
  }];
  [operation start];
}
</code></pre>

<p>XLDataService.m部分实现</p>

<pre><code>+ (void)getWithUrl:(NSString *)url param:(id)param modelClass:(Class)modelClass responseBlock:(responseBlock)responseDataBlock {
      [XLNetworkRequest getRequest:url params:param success:^(id responseObj) {
      //数组、字典转化为模型数组
      dataObj = [self modelTransformationWithResponseObj:responseObj modelClass:modelClass];
      responseDataBlock(dataObj, nil);
  } failure:^(NSError *error) {
      responseDataBlock(nil, error);
  }];
}
</code></pre>

<p>（关键）下面这个方法提供给继承XLDataService的子类重写，将转化为模型的代码写在这里，相似业务的网络数据请求都可以用这个子类去请求数据，直接返回对应的模型数组。
    /<em>*
    数组、字典转化为模型
    </em>/
    + (id)modelTransformationWithResponseObj:(id)responseObj modelClass:(Class)modelClass {
         return nil;
    }
关于离线数据缓存</p>

<p>当用户进入程序的展示页面，有三个情况下可能涉及到数据库存取操作，简单画了个图来理解，思路比较简单，主要是一些存取的细节处理。</p>

<p>进入展示页面</p>

<p><img src="/images/net001.png" title="Caption" ></p>

<p>下拉刷新最新数据</p>

<p><img src="/images/net002.png" title="Caption" ></p>

<p>上拉加载更多数据</p>

<p><img src="/images/net003.png" title="Caption" ></p>

<p>需要注意的是，上拉加载更多的时候，每次从数据库返回一定数量的数据，而不是一次性将数据全部加载，否则会有内存问题，直到数据库中没有更多数据时再发生网络请求，再次将新数据存入数据库。这里存储数据的方式是将服务器返回每组数据的字典归档成二进制作为数据库字段直接存储，这样存储在模型属性比较多的情况下更有好处，避免每一个属性作为一个字段，另外增加了一个idStr字段用来判断数据的唯一性，避免重复存储。
首先定义一个工具类XLDataBase来做数据库相关的操作，这里用的是第三方的FMDB。</p>

<pre><code>#import "XLDataBase.h"
#import "FMDatabase.h"
#import "Item.h"
#import "MJExtension.h"
@implementation XLDataBase
static FMDatabase *_db;
+ (void)initialize {
    NSString *path = [NSString stringWithFormat:@"%@/Library/Caches/Data.db",NSHomeDirectory()];
    _db = [FMDatabase databaseWithPath:path];
    [_db open];
    [_db executeUpdate:@"CREATE TABLE IF NOT EXISTS t_item (id integer PRIMARY KEY, itemDict blob NOT NULL, idStr text NOT NULL)"];
}
//存入数据库
+ (void)saveItemDict:(NSDictionary *)itemDict {
    //此处把字典归档成二进制数据直接存入数据库，避免添加过多的数据库字段
    NSData *dictData = [NSKeyedArchiver archivedDataWithRootObject:itemDict];
    [_db executeUpdateWithFormat:@"INSERT INTO t_item (itemDict, idStr) VALUES (%@, %@)",dictData, itemDict[@"id"]];
}
//返回全部数据
+ (NSArray *)list {
    FMResultSet *set = [_db executeQuery:@"SELECT * FROM t_item"];
    NSMutableArray *list = [NSMutableArray array];
    while (set.next) {
        // 获得当前所指向的数据
        NSData *dictData = [set objectForColumnName:@"itemDict"];
        NSDictionary *dict = [NSKeyedUnarchiver unarchiveObjectWithData:dictData];
        [list addObject:[Item mj_objectWithKeyValues:dict]];
    }
    return list;
}
//取出某个范围内的数据
+ (NSArray *)listWithRange:(NSRange)range {
    NSString *SQL = [NSString stringWithFormat:@"SELECT * FROM t_item LIMIT %lu, %lu",range.location, range.length];
    FMResultSet *set = [_db executeQuery:SQL];
    NSMutableArray *list = [NSMutableArray array];
    while (set.next) {
        NSData *dictData = [set objectForColumnName:@"itemDict"];
        NSDictionary *dict = [NSKeyedUnarchiver unarchiveObjectWithData:dictData];
        [list addObject:[Item mj_objectWithKeyValues:dict]];
    }
    return list;
}
//通过一组数据的唯一标识判断数据是否存在
+ (BOOL)isExistWithId:(NSString *)idStr
{
    BOOL isExist = NO;
    FMResultSet *resultSet= [_db executeQuery:@"SELECT * FROM t_item where idStr = ?",idStr];
    while ([resultSet next]) {
        if([resultSet stringForColumn:@"idStr"]) {
            isExist = YES;
        }else{
            isExist = NO;
        }
    }
    return isExist;
}
@end
</code></pre>

<p>一些继承于XLDataService的子类的数据库存储和模型转换的逻辑代码</p>

<pre><code>#import "GetTableViewData.h"
#import "XLDataBase.h"
@implementation GetTableViewData
//重写父类方法
+ (id)modelTransformationWithResponseObj:(id)responseObj modelClass:(Class)modelClass {
    NSArray *lists = responseObj[@"data"][@"list"];
    NSMutableArray *array = [NSMutableArray array];
    for (NSDictionary *dict in lists) {
        [modelClass mj_setupReplacedKeyFromPropertyName:^NSDictionary *{
            return @{ @"ID" : @"id" };
        }];
        [array addObject:[modelClass mj_objectWithKeyValues:dict]];
        //通过idStr先判断数据是否存储过，如果没有，网络请求新数据存入数据库
        if (![XLDataBase isExistWithId:dict[@"id"]]) {
            //存数据库
            NSLog(@"存入数据库");
            [XLDataBase saveItemDict:dict];
        }
    }
    return array;
}
</code></pre>

<p>下面是一些控制器的代码实现：</p>

<pre><code>#import "ViewController.h"
#import "GetTableViewData.h"
#import "Item.h"
#import "XLDataBase.h"
#import "ItemCell.h"
#import "MJRefresh.h"
#define URL_TABLEVIEW @"https://api.108tian.com/mobile/v3/EventList?cityId=1&amp;step=10&amp;theme=0&amp;page=%lu"
@interface ViewController () {
    NSMutableArray *_dataArray;
    UITableView *_tableView;
    NSInteger _currentPage;//当前数据对应的page
}
@end
@implementation ViewController
#pragma mark Life cycle
- (void)viewDidLoad {
    [super viewDidLoad];
    // Do any additional setup after loading the view, typically from a nib.
    [self createTableView];
    _dataArray = [NSMutableArray array];
}
- (void)viewWillAppear:(BOOL)animated {
    [super viewWillAppear:animated];
    NSRange range = NSMakeRange(0, 10);
    //如果数据库有数据则读取，不发送网络请求
    if ([[XLDataBase listWithRange:range] count]) {
        [_dataArray addObjectsFromArray:[XLDataBase listWithRange:range]];
        NSLog(@"从数据库加载");
    }else{
        [self getTableViewDataWithPage:0];
    }
}
#pragma mark UI
- (void)createTableView {
    _tableView = [[UITableView alloc] initWithFrame:self.view.bounds];
    _tableView.delegate = self;
    _tableView.dataSource = self;
    _tableView.rowHeight = 100.0;
    [self.view addSubview:_tableView];
    _tableView.mj_header = [MJRefreshNormalHeader headerWithRefreshingBlock:^{
        [self loadNewData];
    }];
    _tableView.mj_footer = [MJRefreshAutoNormalFooter footerWithRefreshingBlock:^{
        [self loadMoreData];
    }];
}
#pragma mark GetDataSoure
- (void)getTableViewDataWithPage:(NSInteger)page {
    NSLog(@"发送网络请求！");
    NSString *url = [NSString stringWithFormat:URL_TABLEVIEW, page];
    [GetTableViewData getWithUrl:url param:nil modelClass:[Item class] responseBlock:^(id dataObj, NSError *error) {
        [_dataArray addObjectsFromArray:dataObj];
        [_tableView reloadData];
        [_tableView.mj_header endRefreshing];
        [_tableView.mj_footer endRefreshing];
    }];
}
- (void)loadNewData {
    NSLog(@"下拉刷新");
    _currentPage = 0;
    [_dataArray removeAllObjects];
    [self getTableViewDataWithPage:_currentPage];
}
- (void)loadMoreData {
    NSLog(@"上拉加载");
    _currentPage ++;
    NSRange range = NSMakeRange(_currentPage * 10, 10);
    if ([[XLDataBase listWithRange:range] count]) {
        [_dataArray addObjectsFromArray:[XLDataBase listWithRange:range]];
        [_tableView reloadData];
        [_tableView.mj_footer endRefreshing];
        NSLog(@"数据库加载%lu条更多数据",[[XLDataBase listWithRange:range] count]);
    }else{
        //数据库没更多数据时再网络请求
        [self getTableViewDataWithPage:_currentPage];
    }
}
#pragma mark UITableViewDataSource
- (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section {
    return _dataArray.count;
}
- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath {
    ItemCell *cell = [ItemCell itemCellWithTableView:tableView];
    cell.item = _dataArray[indexPath.row];
    return cell;
}
@end
</code></pre>

<p>最后附上代码的下载地址，重要的部分代码中都有相应的注释和文字打印，运行程序可以很直观的表现。</p>

<p><a href="https://github.com/ShelinShelin/OffLineCache.git">Demo</a></p>

<p>希望大家能提出一些意见，很乐意与大家互相交流。</p>

<!--more-->

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[常用关键字汇总]]></title>
    <link href="http://al1020119.github.io/blog/2014/05/05/keyoc/"/>
    <updated>2014-05-05T13:53:19+08:00</updated>
    <id>http://al1020119.github.io/blog/2014/05/05/keyoc</id>
    <content type="html"><![CDATA[<p>在做iOS开发中，系统的各个关键字处处都是，但是未必每一个关键字都是那么的明白，所以罗列出一些关键字供大家互相学习，有不完善之处请指正，谢谢</p>

<!--more-->


<table>
<thead>
<tr>
<th> 关键字 </th>
<th style="text-align:center;"> 总结</th>
</tr>
</thead>
<tbody>
<tr>
<td> atomic    </td>
<td style="text-align:center;"> atomic是Objc使用的一种线程保护技术，基本上来讲，是防止在写未完成的时候被另外一个线程读取，造成数据错误。而这种机制是耗费系统资源的，所以在iPhone这种小型设备上，如果没有使用多线程间的通讯编程，那么nonatomic是一个非常好的选择。</td>
</tr>
<tr>
<td> super </td>
<td style="text-align:center;"> 调用父类的方法</td>
</tr>
<tr>
<td> readonly  </td>
<td style="text-align:center;"> 说明属性是只读的，默认的标记是读写</td>
</tr>
<tr>
<td> readwrite </td>
<td style="text-align:center;"> 说明属性会被当成读写的，这也是默认属性</td>
</tr>
<tr>
<td> retain    </td>
<td style="text-align:center;"> 释放旧的对象，将旧对象的值赋予输入对象，再提高输入对象的索引计数为1</td>
</tr>
<tr>
<td> self</td>
<td style="text-align:center;">     是隐藏参数，指向当前调用方法的类</td>
</tr>
<tr>
<td> setter    </td>
<td style="text-align:center;"> 设置指定的set方法</td>
</tr>
<tr>
<td> getter    </td>
<td style="text-align:center;"> 设置指定的get方法</td>
</tr>
<tr>
<td> property</td>
<td style="text-align:center;">     设置成员变量的属性（有读／写，赋值assign,retain,copy ,以及对多线程的支持 nonatomic）</td>
</tr>
<tr>
<td> end   </td>
<td style="text-align:center;"> 类的头文件或者实现文件的结束</td>
</tr>
<tr>
<td> copy</td>
<td style="text-align:center;">     建立一个索引计数为1的对象，然后释放旧对象 </td>
</tr>
<tr>
<td> assign    </td>
<td style="text-align:center;"> 简单赋值，不更改引用计数</td>
</tr>
<tr>
<td> synthesize    </td>
<td style="text-align:center;"> 根据@property设置，自动生成成员变量相应的存取方法，从而可以使用点操作符来方便的存取该成员变量</td>
</tr>
<tr>
<td> import    </td>
<td style="text-align:center;"> 告诉预处理器,将头文件的内容包含到本文件中</td>
</tr>
<tr>
<td> dynamic   </td>
<td style="text-align:center;"> 告诉编译器由我们自己来实现访问方法</td>
</tr>
<tr>
<td> nonatomic </td>
<td style="text-align:center;"> 非原子性访问，对属性赋值的时候不加锁，多线程并发访问会提高性能</td>
</tr>
<tr>
<td> implementation</td>
<td style="text-align:center;">   表明类的实现</td>
</tr>
<tr>
<td> strong    </td>
<td style="text-align:center;"> 强引用，只要最后一个strong型指针不再指向对象，那么对象就会被释放，同时所有的weak型指针都将会被清除</td>
</tr>
<tr>
<td> weak  </td>
<td style="text-align:center;"> 弱引用</td>
</tr>
<tr>
<td> __strong  </td>
<td style="text-align:center;"> 是缺省的关键词</td>
</tr>
<tr>
<td> __weak    </td>
<td style="text-align:center;"> 声明了一个可以自动nil化的弱引用</td>
</tr>
<tr>
<td> __unsafe_unretained</td>
<td style="text-align:center;">  声明一个弱应用，但是不会自动nil化，也就是说，如果所指向的内存区域被释放了，这个指针就是一个野指针了</td>
</tr>
<tr>
<td> __autoreleasing   </td>
<td style="text-align:center;"> 用来修饰一个函数的参数，这个参数会在函数返回的时候被自动释放</td>
</tr>
<tr>
<td> unsafe_unretained 弱引用，容易生成野指针，尽量少用unsafe_unretained关键字</td>
<td></td>
</tr>
<tr>
<td> synchronized  </td>
<td style="text-align:center;"> 方法加锁</td>
</tr>
</tbody>
</table>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[语法精选]]></title>
    <link href="http://al1020119.github.io/blog/2014/03/12/yufajingxuan/"/>
    <updated>2014-03-12T13:53:19+08:00</updated>
    <id>http://al1020119.github.io/blog/2014/03/12/yufajingxuan</id>
    <content type="html"><![CDATA[<h4>一、NSSet、NSMutableSet集合的介绍</h4>

<p>1）NSSet、NSMutableSet集合，元素是无序的，不能有重复的值。</p>

<p>2）用实例方法创建一个不可变集合对象</p>

<!--more-->


<p>例如：</p>

<pre><code>//宏定义
#define TOBJ(n) [NSNumber numberWithInt:n]
NSSet *set1=[[NSSet alloc]initWithObjects:TOBJ(2),TOBJ(3),TOBJ(3),TOBJ(1),TOBJ(5), nil];
</code></pre>

<p>2）用类方法创建一个不可变集合对象 例如：</p>

<p>1 NSSet *set2=[NSSet setWithObjects:TOBJ(2),TOBJ(4),TOBJ(6), nil];</p>

<p>3）NSSet 快速遍历方法（无序，所以没有下标）例如：</p>

<pre><code>1  for(id num in set1){
2     NSLog(@"%@",num);
3 }
</code></pre>

<p>4）setSet 用于修改集合内容 例如：[mSet setSet:set1];</p>

<p>5）intersectSet 用于获取两个集合的交集(返回两个集合中相同的元素)。例如：</p>

<pre><code>#define TOBJ(n) [NSNumber numberWithInt:n]
NSSet *set1=[[NSSet alloc]initWithObjects:TOBJ(2),TOBJ(3),TOBJ(3),TOBJ(1),TOBJ(5), nil];
NSSet *set2=[NSSet setWithObjects:TOBJ(2),TOBJ(4),TOBJ(6), nil];
[mSet intersectSet:set2];
NSLog(@"intersect:%@",mSet); //结果：2
</code></pre>

<p>6）unionSet 用于获取两个集合的并集(返回两个集合中所有的元素,如果重复只显示其中一个) 例如：</p>

<pre><code>1 #define TOBJ(n) [NSNumber numberWithInt:n]
2 NSSet *set1=[[NSSet alloc]initWithObjects:TOBJ(2),TOBJ(3),TOBJ(3),TOBJ(1),TOBJ(5), nil];
3 NSSet *set2=[NSSet setWithObjects:TOBJ(2),TOBJ(4),TOBJ(6), nil];
4 [mSet intersectSet:set2];
5 NSLog(@"intersect:%@",mSet); //结果：123456
</code></pre>

<p>7）minusSet 用于获取两个集合的差集 例如：</p>

<pre><code>1 #define TOBJ(n) [NSNumber numberWithInt:n]
2 NSSet * mSet =[[NSSet alloc]initWithObjects:TOBJ(2),TOBJ(3),TOBJ(3),TOBJ(1),TOBJ(5), nil];
3 NSSet *set2=[NSSet setWithObjects:TOBJ(2),TOBJ(4),TOBJ(6), nil];
4 [mSet minusSet:set2];
5 NSLog(@"intersect:%@",mSet); //结果：13456
</code></pre>

<p>8）allObjects 用于将集合转换为数组 例如：</p>

<pre><code>1 #define TOBJ(n) [NSNumber numberWithInt:n]
2 NSSet * mSet =[[NSSet alloc]initWithObjects:TOBJ(2),TOBJ(3),TOBJ(3),TOBJ(1),TOBJ(5), nil];
3 NSArray *array= [mSet allObjects];
</code></pre>

<p>9）anyObject 取set中任意一个元素（如果set中只有一个元素，取值）</p>

<pre><code>1 #define TOBJ(n) [NSNumber numberWithInt:n]
2 NSSet * mSet =[[NSSet alloc]initWithObjects:TOBJ(2),TOBJ(3),TOBJ(3),TOBJ(1),TOBJ(5), nil];
3 id value=[mSet anyObject];
</code></pre>

<h4>二、NSIndexSet、NSMutableIndexSet 可变索引集合的介绍</h4>

<p>1）索引集合，表示唯一的整数的集合,有可变和不可变之分。</p>

<p>2）initWithIndexesInRange 用指定的范围对应的索引创建索引对象 例如：</p>

<pre><code>1 NSIndexSet *indexSet1=[[NSIndexSet alloc]initWithIndexesInRange:
2 NSMakeRange(2,   3)];//结果 2,3,4
3）objectsAtIndexes 根据索引集合中的索引取出数组中对应的元素（返回数组） 例如：

1 NSIndexSet *indexSet1=[[NSIndexSet alloc]initWithIndexesInRange:NSMakeRange(2,   3)]; 
2 NSArray *array=@[@"one",@"two",@"three",@"four",@"five",@"sex"];
3 NSArray *array2=[array objectsAtIndexes:indexSet1];
4 NSLog(@"array2:%@",array2); //结果：array2:three four five
</code></pre>

<p>4）创建一个可变的集合索引(初始化时有一个索引）(可以存储不连续的索引值） 例如：</p>

<pre><code>1 NSMutableIndexSet *indexSet2=[NSMutableIndexSet indexSetWithIndex:2];
2 [indexSet2 addIndex:4];
3 [indexSet2 addIndex:1];
4 [indexSet2 addIndex:2];
5 NSLog(@"count:%ld",indexSet2.count);//获取个数
6 NSArray *array3=[array objectsAtIndexes:indexSet2];//结果：two three  five
</code></pre>

<p>5）NSNull:类表示空, 只有一个类方法[NSNull null]获取空对象，在数组中nil表示元素结束（不能用nil表示空元素</p>

<p>可采用[NSNull null]表示空元素） 例如：</p>

<pre><code>1 NSArray *array5=[NSArray arrayWithObjects:@"red",[NSNull null],@"yellow",@"blue", nil];
</code></pre>

<h4>三、Category 介绍</h4>

<p>1）Category 意为： 类别、分类、类目</p>

<p>1、可以在不改变类名的情况下，扩充类的功能（给类增加方法）</p>

<p>2、可以将类的功能拆成多个文件编译</p>

<p>3、类别中不能增加成员变量，可以访问原来类中的成员变量</p>

<p>4、类别中可以增加与原来类中同名的方法，调用时优先调用</p>

<p>5、添加文件时选择Objective-C File 那个文件同时注意选择要拓展的类名</p>

<p>2）类别的声明类似于类的声明，@interface要扩充功能的类名（类别名）</p>

<p>1、类别不能实例化对象</p>

<p>2、类别中不能增加成员变量。</p>

<p>3、类别中的方法可以访问原来类中的成员变量</p>

<p>4、类别可以调用原来类中的方法</p>

<p>5、类别中的方法可以被子类继承</p>

<p>6、类别可以添加与原来类中相同的方法，调用时类别中的方法优先调用，一般不建议这样操作（无法再调用原来类中的方法）</p>

<p>3）字符串、NSNumber是簇类，底层是由很多类组成的，不能有子类 ,因为子类调用不了父类中的方法</p>

<p>4）Category 文件名格式为：父类文件名+子类文件名 如：NSMutaleString+Resvrse.h</p>

<p>5）Category .m文件中的方法表现形式： 1 @implementation NSMutableString (Reverse)</p>

<h4>四、Extension 的介绍</h4>

<p>1）extension：相当于未命名的Category，可以扩展类的功能（增加方法），也可以增加成员变量。</p>

<p>2）extension：只有.h文件</p>

<p>3）extension  表现形式 @interface 类名（）例如： 1 @interface Person (){}</p>

<p>4）在.m文件中也可以声明成员变量，不会将其放在接口h文件中暴露给使用者。 例如：</p>

<pre><code>复制代码
1 @interface Person()
2 { 
3     int _num;
4 }
5 //将方法声明为私有的
6 -(void)print2;
7 @end
复制代码
</code></pre>

<h4>五、SEL的介绍</h4>

<p>1）SEL是一种类型，将方法名封装为sel的变量，通过SEL找到方法的地址，调用方法。</p>

<p>2）SEL 封装方法实例代码：</p>

<pre><code>复制代码
1  //将play方法名封装成SEL类型的数据
2 SEL sel=@selector(play);
3  //判断p1所属的类是否实现了sel中的方法
4 if([p1 respondsToSelector:sel]){
5  //p1查找sel中方法的地址，再调用对应的方法
6 [p1 performSelector:sel];
7  }
复制代码
</code></pre>

<p>3）performSelector 用于执行SEL封装的方法 例如： 1 [p1 performSelector:@selector(jump)];</p>

<p>4)SEL 封装带参数的方法实例代码：</p>

<pre><code>1  //将带一个参数的方法封装为SEL的变量，执行，参数是id类型
2  [p1 performSelector:@selector(print:) withObject:@"hello"];
</code></pre>

<p>5)NSSelectorFromString 用于将字符串形式的方法名封装成SEL的数据 实例代码：</p>

<pre><code>1  SEL sel2=NSSelectorFromString(@"study");
2  [p1 performSelector:sel2];
</code></pre>

<p>6）<em>cmd 表示当前执行的方法 例如： 1NSLog(@&ldquo;*****metheod:%@&rdquo;,NSStringFromSelector(</em>cmd));</p>

<p>7)在C语言中 <strong>func 表示获取当前执行方法 例如： 1 NSLog(@&ldquo;func=%s&rdquo;,</strong>func__);</p>

<pre><code>__DATE__ 表示获取当前系统时间  1 NSLog(@"date=%s",__DATE__); 
</code></pre>

<p>8）SEL实现数组排序 实例代码：</p>

<pre><code>复制代码
1 void testSel()
2 {
3     Person *p1;
4     Person *p2;
5     Person *p3;
6     NSMutableArray *array1=[[NSMutableArray alloc]initWithObjects:p1,p2,p3, nil];
7     [array1 sortUsingSelector:@selector(comparePerson:)];
8     
9 }
复制代码
</code></pre>

<h4>六、构造OC中的二维数组</h4>

<p>实例代码：</p>

<pre><code>复制代码
//创建一个空的外层数组
 2         NSMutableArray *bigArray=[NSMutableArray array];
 3         //创建一个存放4个数据对象的数组
 4         NSMutableArray *array1=[[NSMutableArray alloc]init];
 5         for(int i=0;i&lt;4;i++){
 6             [array1 addObject:[NSNumber numberWithInt:i]];
 7         }
 8         //创建一个存放3个字符串的数组
 9         NSMutableArray *array2=[[NSMutableArray alloc]init];
10         for(int i=0;i&lt;3;i++){
11             [array2 addObject:[NSString stringWithFormat:@"str%d",i+1]];
12         }
13         //将array1和array2两个数组对象存入外层数组（相当于创建了一个二维数组）
14         [bigArray addObject:array1];
15         [bigArray addObject:array2];
16         
17         //遍历，显示所有的元素
18         for(int i=0;i&lt;bigArray.count;i++){
19             for(int j=0;j&lt;[bigArray[i] count];j++){
20                 //取出数组中第i行第j列的元素（每行又是一个数组对象）
21                 if([bigArray[i][j] isKindOfClass:[NSNumber class]]){
22                     NSLog(@"number:%@",bigArray[i][j]);
23                 }
24                 else if ([[[bigArray objectAtIndex:i] objectAtIndex:j] isKindOfClass:[NSString class]]){
25                     NSLog(@"string:%@",[[bigArray objectAtIndex:i] objectAtIndex:j]);
26                 }
27             }
28         }
复制代码
</code></pre>

<h4>七、Class (类)的介绍</h4>

<p>1）类的本质也是一个对象，是Class类型的对象，获取类对象（可以通过实例方法或类方法获取）,</p>

<p>每个类只有一个类对象。</p>

<p>2）load 方法当程序启动时会加载所有的类和分类，调用load方法，先加载父类，再加载子类，然后是分类 例如：</p>

<pre><code>1  +(void)load
2  {
3      NSLog(@"Person---load");
4  }
</code></pre>

<p>3）initialize方法 当第一次使用类的时候，调用initialize方法，先调用父类的，再调用子类的 例如：</p>

<pre><code>1 +(void)initialize
2  {
3     NSLog(@"Person---initialize");
4  }
</code></pre>

<p>本博文由博主（iCocos）独立编写或者借鉴别人的好文章进行修改而成，如果不对的地方望指正，谢谢！ 如果您还有看到新浪博客关于IOS梦工厂的博文，麻烦请到这里找更完整更清晰的版本，博主已从<a href="http://blog.sina.com.cn/s/articlelist_3288975567_0_1.html%E8%BD%AC%E7%A7%BB%E5%88%B0%E5%8D%9A%E5%AE%A2%E5%9B%AD">http://blog.sina.com.cn/s/articlelist_3288975567_0_1.html%E8%BD%AC%E7%A7%BB%E5%88%B0%E5%8D%9A%E5%AE%A2%E5%9B%AD</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS生命周期]]></title>
    <link href="http://al1020119.github.io/blog/2013/11/30/iossheng-ming-zhou-qi/"/>
    <updated>2013-11-30T21:52:15+08:00</updated>
    <id>http://al1020119.github.io/blog/2013/11/30/iossheng-ming-zhou-qi</id>
    <content type="html"><![CDATA[<h3>控制器（View）生命周期</h3>

<p>当一个视图控制器被创建，并在屏幕上显示的时候。 代码的执行顺序</p>

<pre><code>1、 alloc                                   创建对象，分配空间
2、init (initWithNibName) 初始化对象，初始化数据
3、loadView                          从nib载入视图 ，通常这一步不需要去干涉。除非你没有使用xib文件创建视图
4、viewDidLoad                   载入完成，可以进行自定义数据以及动态创建其他控件
5、viewWillAppear              视图将出现在屏幕之前，马上这个视图就会被展现在屏幕上了
6、viewDidAppear               视图已在屏幕上渲染完成
</code></pre>

<!--more-->


<p>当一个视图被移除屏幕并且销毁的时候的执行顺序，这个顺序差不多和上面的相反</p>

<pre><code>1、viewWillDisappear            视图将被从屏幕上移除之前执行
2、viewDidDisappear             视图已经被从屏幕上移除，用户看不到这个视图了
3、dealloc                                 视图被销毁，此处需要对你在init和viewDidLoad中创建的对象进行释放
</code></pre>

<p>－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－</p>

<h3>app的启动过程</h3>

<pre><code>1.先执行main函数，main内部会调用UIApplicationMain函数

2.UIApplicationMain函数里面做了什么事情：

    1&gt; 创建UIApplication对象
    2&gt; 创建UIApplication的delegate对象—–PYAppDelegate
    3&gt; 开启一个消息循环

每监听到对应的系统事件时，就会通知MJAppDelegate

根据plist文件判断是否需要加载storyBoard
</code></pre>

<p>如果有storyBoard</p>

<pre><code>加载Info.plist文件，读取最主要storyboard文件的名称

加载最主要的storyboard文件，创建白色箭头所指的控制器对象

并且设置创建的控制器为UIWindow的rootViewController属性(根控制器)

初始化对应的子控件
</code></pre>

<p>如果没有storyBoard</p>

<pre><code>在代理的difinishLuaunchWithOPtions中为应用程序创建一个UIWindow对象(继承自UIView)，设置为PYAppDelegate的window属性

并且设置创建的控制器为UIWindow的rootViewController属性(根控制器)

初始化对应的子控件
</code></pre>

<p>－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－</p>

<h3>App的生命周期</h3>

<p>这里只是简单的总结，关于有些方法我们并没有解除过，所以就略过了。</p>

<pre><code> 1、application didFinishLaunchingWithOptions：当应用程序启动时执行，应用程序启动入口，只在应用程序启动时执行一次。若用户直接启动，lauchOptions内无数据,若通过其他方式启动应用，lauchOptions包含对应方式的内容。
 2、applicationWillResignActive：在应用程序将要由活动状态切换到非活动状态时候，要执行的委托调用，如 按下 home 按钮，返回主屏幕，或全屏之间切换应用程序等。

 3、applicationDidEnterBackground：在应用程序已进入后台程序时，要执行的委托调用。

 4、applicationWillEnterForeground：在应用程序将要进入前台时(被激活)，要执行的委托调用，刚好与applicationWillResignActive 方法相对应。

 5、applicationDidBecomeActive：在应用程序已被激活后，要执行的委托调用，刚好与applicationDidEnterBackground 方法相对应。

 6、applicationWillTerminate：在应用程序要完全推出的时候，要执行的委托调用，这个需要要设置UIApplicationExitsOnSuspend的键值。
</code></pre>
]]></content>
  </entry>
  
</feed>
