<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Apples | iOS梦工厂]]></title>
  <link href="http://al1020119.github.io/blog/categories/apples/atom.xml" rel="self"/>
  <link href="http://al1020119.github.io/"/>
  <updated>2016-08-03T14:38:08+08:00</updated>
  <id>http://al1020119.github.io/</id>
  <author>
    <name><![CDATA[iCocos]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Watch OS2 初探]]></title>
    <link href="http://al1020119.github.io/blog/2015/11/14/watch-os2-chu-tan/"/>
    <updated>2015-11-14T17:44:31+08:00</updated>
    <id>http://al1020119.github.io/blog/2015/11/14/watch-os2-chu-tan</id>
    <content type="html"><![CDATA[<blockquote><p>这一年的WWDC大会上,苹果公司推出了watchOS 2,这标志着Apple Watch的开发产生了巨大的变化。现在,你可以开发能运行在你手表上原生的app了。 在这篇watchOS 2教程中,你会开发一个简单但是功能齐全的watchOS 2的app。
在这个过程中,你会学到:</p></blockquote>

<ul>
<li>如何为iOS app添加watchOS 2的target</li>
<li>如何在两个target之间共享数据</li>
<li>如何添加一个watchOS 2界面控制器到Storyboard,并放置界面对象</li>
<li>如何创建WKInterfaceController的子类并连线</li>
</ul>


<!--more-->


<p>正式开始吧</p>

<p>首先下载教程的起始项目吧。</p>

<p>在Xcode中打开它然后编译运行。你应该会看到一个空白界面:</p>

<p><img src="/images/watchOS001.png" title="Caption" ></p>

<p>这个项目没有太多的文件,只包含一些你需要的最基本的文件。</p>

<p>添加WatchKit App</p>

<p>选择File\New\Target…,在出现的对话框中选择watchOS\Application\WatchKit App然后点击Next:</p>

<p><img src="/images/watchOS002.png" title="Caption" ></p>

<p>在接下来的界面中,设置项目名字为Watch,确保语言设置为Swift,然后取消选中任何复选框。点击Finish:</p>

<p><img src="/images/watchOS003.png" title="Caption" ></p>

<p>之后会询问你是否想要激活watch scheme,你需要这么做,所以确保选择了激活:</p>

<p><img src="/images/watchOS004.png" title="Caption" ></p>

<p>祝贺,你刚刚创建了你的第一个手表app!这真的很容易。</p>

<p>你会注意到,这个操作实际上创建了两个target,而不是一个,在项目导航中看到两个对应的组。这是因为手表app的代码实际是作为一个扩展形式存在的,类似iOS上的Today extensions。</p>

<p>当你在项目导航中点开Watch和Watch Extensions组的时候,你会看到所有storyboard放在Watch组,当前target创建的所有的类文件放在Watch Extensions组中:</p>

<p><img src="/images/watchOS005.png" title="Caption" ></p>

<p>你需要遵循如下的原则:任何你添加的代码必须放在Watch Extension组中然后添加到Watch Extension target,而所有的assets或者storyboards需要放在Watch组里。</p>

<p><img src="/images/watchOS006.png" title="Caption" ></p>

<p>在继续前,你需要删掉一些target模板添加的你不需要的文件。</p>

<p>在项目导航里面右键点击InterfaceController.swift然后选择删除。 当弹出提示,选择Move to Trash来确保文件确实从项目中删掉了:</p>

<p><img src="/images/watchOS007.png" title="Caption" ></p>

<p>下一步,打开Interface.storyboard,选择其中仅有的界面控制器,按下backspace键来删除它。现在就剩下一个空storyboard,或者是我认为的,一个空白画布。</p>

<p>共享数据和代码</p>

<p>起始项目包含一个记录所有Aber航空公司航班信息的JSON文件,一个模型类表示飞行数据。这正是应该共享的数据,因为iOS app和手表app使用相同的模型类和数据-你记得DRY(不要写重复的代码)原则吗?</p>

<p>在项目导航中点开Shared组然后选择Flights.json。之后,在File Inspector中找到Target Membership区域,选中Watch Extension</p>

<p><img src="/images/watchOS008.png" title="Caption" ></p>

<p>文件现在应该被AirAber和Watch Extensions这两个target所包含。 为其他Shared组的文件重复这个步骤,比如说Flight.swift。 这些都做完后,你可以开始开发航班详情界面了!</p>

<p>构造界面</p>

<p>打开 Watch\Interface.storyboard,从对象库拖一个界面控制器到storyboard里面.选中这个界面控制器,打开属性检查器设置它的Identificer为Flight,然后勾选Is Initial Controller:</p>

<p><img src="/images/watchOS009.png" title="Caption" ></p>

<p>你设置的这个Identifier让你可以在代码中引用这个界面控制器。选中Is Initial Controller简单告诉WatchKit你希望当应用程序启动的时候首先显示这个界面。</p>

<p>下一步,从对象库中拖动一个组到界面控制器:</p>

<p><img src="/images/watchOS010.png" title="Caption" ></p>

<p>之后这个组会包含Aber公司的logo,航班号和路线。</p>

<p>选中这个组,在属性检查器的顶部改变它的Insets为Custom。这会显示四个额外的文本框让你可以手动的设置组的上下左右。设置Top为6:</p>

<p><img src="/images/watchOS011.png" title="Caption" ></p>

<p>这仅仅让你的组到顶部有个额外的空隙。</p>

<p>下一步,拖动Image到组中。组会相应的收缩来改变Top inset(感谢Xcode!),之后在文档大纲中检查来确保Image是组的子节点,而不是同级:</p>

<p><img src="/images/watchOS012.png" title="Caption" ></p>

<p>现在需要显示一张图片,下载logo图片然后把它拖动到Watch\Assets.xcassets中。这会创建一个新的logo图片,存放在2x的部分。</p>

<p><img src="/images/watchOS013.png" title="Caption" ></p>

<p>为了给图片染色,选中这张图片,在属性检查器中修改Render As为Template Image。</p>

<p>重新打开 Watch\Interface.storyboard 选中之前的image.使用属性检查器,做如下的改变:</p>

<ul>
<li>设置图片为Logo - 当下拉列表没有出现,你可以自己输入;</li>
<li>设置Tint为#FA114F(也可以在颜色面板中输入值);</li>
<li>设置Width为Fixed,值为40;</li>
<li>设置Height为Fixed,值为40。</li>
</ul>


<p>属性检查器现在应该像下面这样:</p>

<p><img src="/images/watchOS014.png" title="Caption" ></p>

<p>不要担心看不到logo,因为Xcode设计时无法给模板图片染色!</p>

<p>下一步,往已经存在的组中拖动另外一个组,确保它出现在image的右侧,使用属性检查器设置Layout属性为Vertical.同样修改Spacing为0、Width为Size to Fit Content。然后拖动两个label到新的组中,放置一个到另一个的下面。</p>

<p><img src="/images/watchOS015.png" title="Caption" ></p>

<p>选择上面的label,使用属性检查器,设置文本为Flight 123,文字颜色为#FA114F。</p>

<p>选择下面的label,设置文本为MAM to SFO。界面控制器最后看起来像下面这样:</p>

<p><img src="/images/watchOS016.png" title="Caption" ></p>

<p>这些文本仅仅充当占位符,之后会被控制器中设置的文本取代。</p>

<p>下一步,拖动另一个组到界面控制器中,但是这次确保与第一个组同级。当不能设置组级别关系请使用文档大纲(Document Outline)。</p>

<p><img src="/images/watchOS017.png" title="Caption" ></p>

<p>选中新的组,设置它的Layout为Vertical、Spacing为0。</p>

<p>现在,拖动三个label到新的组中:</p>

<p><img src="/images/watchOS018.png" title="Caption" ></p>

<p>确保label都在group中,而不是与group同级!</p>

<p>选择顶部的label使用属性检查器修改它的文本为AA123 Boards。</p>

<p>选中中间的label,修改文本颜色为#FA114F,字体选择System,Regulaer样式和54.0的size.最后,修改Height为Fixed,值是44。</p>

<p>选中底部的label修改文本为On time,文本颜色为#04DE71。 你的界面控制器应该现在像下面这样:</p>

<p><img src="/images/watchOS019.png" title="Caption" ></p>

<p>从对象库中拖动一个新的组到下面的组,这次确保它是在子节点而不是在同级,之后向其中添加两个label,你完全的界面对象关系应该像这样:</p>

<p><img src="/images/watchOS020.png" title="Caption" ></p>

<p>使用属性检查器,设置左边的label文本为Gate 1A。右边的label设置为Seat 64A,之后设置它的Horizontal alignment为Right 完全的界面应该像如下这样:</p>

<p><img src="/images/watchOS021.png" title="Caption" ></p>

<p>恭喜,你已经完成你的第一个watch app界面的布局了,现在是时候给它填充一些真实的数据然后在模拟器上运行。</p>

<p>创建控制器</p>

<p>在项目导航中右击Watch Extensions组,选择New File,在出现的对话框中选择watchOS\Source\WatchKit Class然后点击Next。命名新的类为FlightInterfaceController,确保它为WKInterfaceController的子类,语言设置为Swift:</p>

<p><img src="/images/watchOS022.png" title="Caption" ></p>

<p>点击Next,之后是Create</p>

<p>可以看到新的文件在代码编辑器中打开了,删除其中的三个空方法,只剩下import语句和类定义。</p>

<p>添加这些Outlets到FlightInterfaceController的顶部:</p>

<pre><code>@IBOutlet var flightLabel: WKInterfaceLabel!
@IBOutlet var routeLabel: WKInterfaceLabel!
@IBOutlet var boardingLabel: WKInterfaceLabel!
@IBOutlet var boardTimeLabel: WKInterfaceLabel!
@IBOutlet var statusLabel: WKInterfaceLabel!
@IBOutlet var gateLabel: WKInterfaceLabel!
@IBOutlet var seatLabel: WKInterfaceLabel!
</code></pre>

<p>这里仅仅为之前的每个label添加一个Outlet。稍后会把他们连接起来。</p>

<p>下一步,在outlets下面添加flight属性和对应的属性观察器:</p>

<pre><code>// 1
var flight: Flight? {
  // 2
  didSet {
    // 3
    if let flight = flight {
      // 4
      flightLabel.setText("Flight \(flight.shortNumber)")
      routeLabel.setText(flight.route)
      boardingLabel.setText("\(flight.number) Boards")
      boardTimeLabel.setText(flight.boardsAt)
      // 5
      if flight.onSchedule {
        statusLabel.setText("On Time")
      } else {
        statusLabel.setText("Delayed")
        statusLabel.setTextColor(UIColor.redColor())
      }
      gateLabel.setText("Gate \(flight.gate)")
      seatLabel.setText("Seat \(flight.seat)")
    }
  }
}
</code></pre>

<p>会一步步讲解发生的事情:</p>

<ul>
<li><p>1.你定义了一个可选的属性类型为Flight。这个类在Flight.swift中定义;</p></li>
<li><p>2.你添加了一个属性观察器,当属性设值时候会触发它;</p></li>
<li><p>3.在可选属性中确保有一个真的flight而不是nil,当flight存在才会去设置labels的值;</p></li>
<li><p>4.使用flight的相关属性去设置labels</p></li>
<li><p>5.如果航班被延误，那么你就将标签的文本颜色改为红色</p></li>
</ul>


<p>在控制器第一次显示时候设置航班。添加以下声明：</p>

<pre><code>override func awakeWithContext(context: AnyObject?) {
  super.awakeWithContext(context)
  flight = Flight.allFlights().first!
}
</code></pre>

<p>本后面的教程会修改为在上下文中传递值给它,但现在你只需要从共享的JSON文件中加载所有的航班,然后使用数组中的第一个。</p>

<p>在后面的教程你将学到更多关于awakeWithContext（_：)的知识,但是现在你仅仅需要知道它是界面控制器生命周期第一环节,一个设置flight值的地方。 现在仅剩最后一步你就可以编译运行了,就是去连接outlets</p>

<p>连接outlets</p>

<p>打开 Watch\Interface.storyboard 选择界面控制器,使用Identity Inspector,设置Class\Custom Class为FlightInterfaceController</p>

<p>下一步,右击界面控制器顶部的黄色图片弹出窗口:</p>

<p><img src="/images/watchOS023.png" title="Caption" ></p>

<p>现在,按下面的列表连接outlets:</p>

<pre><code>boardingLabel: AA123 Boards
boardTimeLabel: 15:06
flightLabel: Flight 123
gateLabel: Gate 1A
routeLabel: MAN to SFO
seatLabel: Seat 64A
statusLabel: On time
</code></pre>

<p>在运行之前,有一件事情要做。本教程的实例app专为42mm的Apple Watch开发的,所以你需要确保正确设置了模拟器,否则界面元素看起来会有点小。对于一个现实app,需要确保界面能很好运行在两种大小的手表上,但这在本教程的范围之外。</p>

<p>在Xcode中,选择Window\Devices打开设备管理器,点击右下角的 + 图标.在弹出的对话框中,命名模拟器为iPhone 6 - 42mm,设置设备类型为iPhone 6,修改配对的Apple watch为Apple Watch - 42mm (WatchOS 2.0)然后点击Create:</p>

<p><img src="/images/watchOS024.png" title="Caption" ></p>

<p>关闭设备管理器,选择Watch Scheme,然后选中新的模拟器:</p>

<p><img src="/images/watchOS025.png" title="Caption" ></p>

<p>编译运行。一段模拟器启动完成你会看到下面界面:</p>

<p><img src="/images/watchOS026.png" title="Caption" ></p>

<blockquote><p>注意:如果收到一条错误消息,说明安装失败,然后你可以再次尝试使用Xcode,或者在手表模拟器上手动安装app。为此,打开iOS模拟器中的手表app,点击AirAber,在Apple Watch弹出我们的app。一旦这么做了,返回手表模拟器,按Shift + Ctrl + H导航到主界面, 然后点击AirAber图片来启动手表app。</p></blockquote>

<p>恭喜!你已经完成WatchKit初始界面,并使用真实的数据使它很好运行在手表模拟器上。</p>

<p>稍后会做什么?</p>

<p>下面是这个系列教程完整示例项目。</p>

<p>在这个练习中你已经学会了如何往现有的iOS app中添加手表app，如何创建一个界面控制器和使用嵌套组构造一个非常复杂的界面，以及使用WKInterfaceController类来配合这项工作。那么，接下来呢？</p>

<p>本教程系列的第二部分，你将学习所有关于表和导航WatchKit的使用。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[苹果审核指南]]></title>
    <link href="http://al1020119.github.io/blog/2013/10/17/pingguoshenhe/"/>
    <updated>2013-10-17T13:53:19+08:00</updated>
    <id>http://al1020119.github.io/blog/2013/10/17/pingguoshenhe</id>
    <content type="html"><![CDATA[<p>审核指南(修改部分红色字体标出)：</p>

<h3>1.条款和条件</h3>

<ul>
<li>1.1为App Store开发程序，开发者必须遵守Program License Agreement (PLA)、人机交互指南(HIG)以及开发者和苹果签订的任何其他协议和合同。以下规则和例证旨在帮助开发者的程序能获得App Store的认可，而不是修改或删除任何其他协议中的条款。</li>
</ul>


<h3>2.功能</h3>

<!--more-->


<ul>
<li><p>2.1 崩溃的程序将会被拒绝。</p></li>
<li><p>2.2 存在错误的程序将会被拒绝。</p></li>
<li><p>2.3 跟开发者宣传不符的程序将会被拒绝。</p></li>
<li><p>2.4 无应用文档或隐藏功能与描述不符的程序将会被拒绝。</p></li>
<li><p>2.5 使用非公开API的程序将会被拒绝。</p></li>
<li><p>2.6 在指定容器范围外读写数据的程序将会被拒绝。</p></li>
<li><p>2.7 以任何方式或形式下载代码的程序将会被拒绝。</p></li>
<li><p>2.8 安装或运行其他可执行代码的程序将会被拒绝。</p></li>
<li><p>2.9 Demo版、trial版和test版的程序将会被拒绝。Beta版应用程序可通过TestFlight提交，并且必须遵守相关指南。(此前并未允许Beta版通过TestFlight提交)</p></li>
<li><p>2.10 iPhone程序必须不经修改就能以iPhone分辨率和2倍iPhone 3GS的分辨率在iPad上运行。</p></li>
<li><p>2.11 与App Store已有程序重复的应用可能会被拒绝，特别是数量很多的情况下，比如手电筒应用和爱经应用。</p></li>
<li><p>2.12 没有显著用途、不独特的应用程序或者与网站简单捆绑的应用有可能被拒;不提供任何持久娱乐价值的程序可能会被拒绝。</p></li>
<li><p>2.13 内容主要是营销材料或广告的程序将会被拒绝。</p></li>
<li><p>2.14 包含欺骗或虚假功能，却有没有标明的应用程序将会被拒绝。</p></li>
<li><p>2.15 大于100MB无法通过蜂窝网络下载的应用(App Store会自动禁止)。</p></li>
<li><p>2.16 多任务程序使用后台服务仅限于几种目的：VoIP、音频播放、地理位置、完成任务以及本地提醒等。</p></li>
<li><p>2.17 应用程序只允许使用iOS WebKit框架和WebKit Javascript浏览web内容。</p></li>
<li><p>2.18 鼓励酗酒或使用违禁药物，或引诱青少年饮酒或吸烟的程序将会被拒绝。</p></li>
<li><p>2.19 提供错误的系统诊断或不精确的设备数据的应用将会被拒绝。</p></li>
<li><p>2.20 向App Store上传大量相似版本程序的开发者将会从iOS开发者计划中除名。</p></li>
<li><p>2.21 简单一首歌曲或者一部影片应用要提交到iTunes store，书籍类应用应该提交到iBookstore。</p></li>
<li><p>2.22 随意根据环境(如定位或者运营商)限制用户使用的应用会被拒。</p></li>
<li><p>2.23 应用必须遵守iOS数据储存指导方针(iOS Data Storage Guidelines )，否则应用将被拒。</p></li>
<li><p>2.24 存放在Newsstand的应用必须遵守开发者项目许可协议(Program License Agreement)的表1、表2以及表3，否则应用将会被拒。</p></li>
<li><p>2.25 类似App store，或者基于购买或者促销的目的而展示其他应用的应用将会被拒绝</p></li>
</ul>


<p>(限制更加严格，此前经过特殊审核批准(比如健康管理、航空以及其他无障碍需求等)，或者为特殊群体用户提供具有重大意义的附加值的应用是可以通过的)</p>

<ul>
<li>2.26 只有当app是出于特殊审核需要(比如健康管理、航空以及无障碍需求等)或为特殊群体用户提供具有重大意义的附加值时，才可以展示和推荐自身以外的其他应用程序，否则应用程序将会被拒绝。</li>
</ul>


<h3>3.元数据(名称、描述、评级、排名等)</h3>

<p>近来厂商踩雷屡见不鲜，此部分请详细阅读</p>

<ul>
<li><p>3.1 应用或者元数据中提到其他任何移动平台将会被拒。</p></li>
<li><p>3.2 带有占位符文本的程序将会被拒绝</p></li>
<li><p>3.3 应用程序的名称、描述、截图或者预览与应用的内容和功能不相关将会被拒绝。</p></li>
</ul>


<p>(此前仅对描述有所限制)</p>

<ul>
<li><p>3.4 为了不混淆用户，iTunes Connect中的应用名称应该和展示在设备上的应用名称一致。</p></li>
<li><p>3.5 不同尺寸的app icon要一致，否则会造成混淆。</p></li>
<li><p>3.6 图标、截图以及预览不符合4+年龄评级的程序将会被拒绝。</p></li>
</ul>


<p>(增加了对预览的限制)</p>

<ul>
<li><p>3.7 目录与类型不适合于程序内容的程序将会被拒绝。</p></li>
<li><p>3.8 开发者有责任为其程序指定适合的评级。不相称的评级可能会由苹果公司修改。</p></li>
<li><p>3.9 开发者有责任为其程序指定恰当的关键字。不恰当的关键词可能会被苹果公司修改/删除。</p></li>
<li><p>3.10 试图通过伪造评论或者付费评论的方式在AppStore中操纵或者其欺骗用户评论(或者采用其他不正当方式)以提升排名的开发者将会被苹果从iOS开发者计划中除名。</p></li>
<li><p>3.11 在安装或打开应用之前，推荐用户重启iOS设备的应用将会被拒。</p></li>
<li><p>3.12 提交审核的应用程序应包含能正常运行的URL，比如支持服务URL和隐私政策URL。</p></li>
<li><p>3.13 应用程序的截图、预览或者营销文本没有清晰地指出附加内容或项目需要额外单独购买(比如使用IAP)将会被拒绝。</p></li>
<li><p>3.14 App预览仅能使用从应用程序捕获的视频屏幕、旁白、文本以及design overlays，否则应用程序将会被拒绝。</p></li>
<li><p>3.15 添加App预览的应用程序，未经许可展示真人个人信息将会被拒绝。</p></li>
<li><p>3.16 App预览仅能使用在所有选定地区内经过授权许可、用于此目的的音乐。</p></li>
<li><p>3.17 App预览包含未经授权的通过app播放的内容(比如iTunes playlist和YouTube流媒体)的应用将会被拒绝。</p></li>
</ul>


<h3>4.位置</h3>

<ul>
<li><p>4.1 在收集、传输或使用位置数据之前未通知并获得用户同意的程序将会被拒绝。</p></li>
<li><p>4.2 将基于位置的API用于车辆、飞机或其他设备的自动控制或自主控制的应用程序将会被拒绝。</p></li>
<li><p>4.3 使用基于位置的API用于应急服务的应用程序将会被拒绝。</p></li>
</ul>


<p>(此处进行了描述修改，未着重指出调度和车队管理)</p>

<ul>
<li>4.4 当与提供的功能或服务密切相关，或者为支持经过授权的广告时，应用程序才可以使用位置数据。</li>
</ul>


<h3>5.推送通知</h3>

<ul>
<li><p>5.1 不使用苹果推送通知(APN)应用接口提供推送通知的程序将会被拒绝。</p></li>
<li><p>5.2 未从苹果获得Push Application ID便擅自使用APN服务的程序将会被拒绝。</p></li>
<li><p>5.3 在首次推送消息或者要求运行推送通知之前未获得用户许可的应用将会被拒绝。</p></li>
<li><p>5.4 使用推送通知发送敏感个人信息或机密信息的程序将会被拒绝。</p></li>
<li><p>5.5 使用推送通知发送非请求消息，或用于钓鱼或群发垃圾信息用途的程序将会被拒绝。</p></li>
<li><p>5.6 应用程序不可使用推送通知发送广告、促销或任何类型的直销信息。</p></li>
<li><p>5.7 应用程序不能向使用推送通知服务的用户收取费用。</p></li>
<li><p>5.8 使用推送通知会过多利用APN服务的网络流量或带宽或给设备带来过度负担的程序将会被拒绝。</p></li>
<li><p>5.9 如果应用程序传送病毒、文件、计算机代码或程序，并且对APN服务的正常运行造成损害或中断，那么该程序将会被拒绝。</p></li>
</ul>


<h3>6.游戏中心</h3>

<ul>
<li><p>6.1 向终端用户或任意第三方显示玩家ID的程序将会被拒绝。</p></li>
<li><p>6.2 将玩家ID用于任何未经游戏中心条款批准用途的程序将会被拒绝。</p></li>
<li><p>6.3 试图进行反向搜索、跟踪、关联、挖掘、获得或利用玩家ID、别名或通过游戏中心获得其他信息的开发者将会iOS开发者计划除名。</p></li>
<li><p>6.4 游戏中心信息(例如排行榜分数)，只能用于游戏中心批准的应用程序中。</p></li>
<li><p>6.5 利用游戏中心服务发送非请求信息，或用于钓鱼或群发垃圾邮件的程序将会被拒绝。</p></li>
<li><p>6.6 过多使用游戏中心网络流量或带宽的应用程序将会被拒绝。</p></li>
<li><p>6.7 如果程序能够传送病毒、文件、计算机代码或程序，并且对游戏中心服务的正常运行造成损害或中断，该程序将会被拒绝。</p></li>
</ul>


<h3>7.广告</h3>

<ul>
<li><p>7.1 人工刷广告浏览量或者广告点击率的应用程序将会被拒绝。</p></li>
<li><p>7.2 包含空iAd广告的应用程序将会被拒绝。</p></li>
<li><p>7.3 主要设计目的在于显示广告的应用程序将会被拒绝。</p></li>
</ul>


<h3>8.商标与商品外观</h3>

<ul>
<li><p>8.1 应用程序必须遵守”Guidelines for Using Apple Trademarks and Copyrights”和”Apple Trademark List”中说明的所有条款与条件。</p></li>
<li><p>8.2 任何误导和暗示苹果公司是该应用程序来源或提供商，或者苹果公司以任何形式表示认可其质量或功能的应用程序将会被拒绝。</p></li>
<li><p>8.3 与目前已有苹果产品或者广告主题外观相似或混淆的应用程序将会被拒绝。</p></li>
<li><p>8.4 在应用程序名称中将苹果产品名拼错的应用程序(例如，GPS for iPhone，iTunz)将会被拒绝。</p></li>
<li><p>8.5 应用程序不得使用受保护的第三方材料(比如商标、版权以及专利)，不能违反第三方使用条款。必须提供使用这些材料的授权许可。</p></li>
<li><p>8.6 若无明确授权许可，从第三方来源处(比如YouTube、SoundCloud以及Vimeo等)下载音乐或者视频内容的应用程序将会被拒绝。</p></li>
</ul>


<h3>9.媒体内容</h3>

<ul>
<li><p>9.1 不使用媒体播放器框架(MediaPlayer Framework)获取音乐库中媒体内容的应用程序将会被拒绝。</p></li>
<li><p>9.2 用户界面模仿任何iPod或者iTunes界面的应用程序将会被拒绝。</p></li>
<li><p>9.3 通过蜂窝网络传输的音频流内容每5分钟不得超过5MB。</p></li>
<li><p>9.4 通过蜂窝网络传输超过10分钟的视频流内容必须使用HTTP Live Streaming协议，并且要包含一个基线为192kbps或者更低的HTTP实时流。</p></li>
</ul>


<h3>10.用户界面</h3>

<ul>
<li><p>10.1 应用程序必须遵守苹果的《iOS Human Interface Guidelines》中所有的条款和条件。</p></li>
<li><p>10.2 外观与iPhone自带应用(比如App Store、iTunes Store和iBookstore)相似的应用程序将会被拒绝。</p></li>
<li><p>10.3 未能按苹果《iOS Human Interface Guidelines》描述正确使用系统提供的项目(比如按钮、图标)的应用将会被拒绝。</p></li>
<li><p>10.4 创建桌面/主屏幕环境或者模拟multi-App插件体验的应用程序将会被拒绝。</p></li>
<li><p>10.5 修改音量大小和铃声/静音等标准开关功能的应用程序将会被拒绝。</p></li>
<li><p>10.6 苹果和我们的客户高度推崇简单、精致、富有创造性以及经过精心设计的界面。虽然需要付出更多，但却非常值得。苹果设立了很高的门槛。如果你的用户界面太过复杂或者水准不高，可能会被拒绝。</p></li>
</ul>


<h3>11.购买与货币流通</h3>

<ul>
<li><p>11.1 使用App Store以外的渠道解锁或开启附加属性和功能的应用程序将会被拒绝。</p></li>
<li><p>11.2 使用应用内支付系统(IAP)以外的系统购买内容、功能或服务的应用软件将会被拒绝。</p></li>
<li><p>11.3 使用IAP购买实物商品或者用于该软件之外的商品和服务的应用软件将会被拒绝。</p></li>
<li><p>11.4 使用IAP购买积分(信用点)或者其他货币必须在本应用中消费。</p></li>
<li><p>11.5 使用IAP购买已过期积分或其他货币的应用软件将会被拒绝。</p></li>
<li><p>11.6 使用IAP订阅的内容至少要持续7天，而且允许在用户的其他iOS设备间共享。</p></li>
<li><p>11.7 使用IAP购买项目的应用程序必须指派正确的购买类型。</p></li>
<li><p>11.8 使用IAP购买iOS内置功能(如照相机，陀螺仪)的应用程序将会被拒绝。</p></li>
<li><p>11.9 含有超过限定时间的内容或服务的应用程序将会被拒绝，除经特定批准的内容(比如电影、电视节目音乐以及书籍)。</p></li>
<li><p>11.10 保险类应用程序必须免费，要遵守发布地区的法律，并且不能使用IAP。</p></li>
<li><p>11.11 一般而言，你的应用程序越贵，我们的评审会越深入。(对不起，我们国产大部分是免费网游)</p></li>
<li><p>11.12 提供订阅功能的应用必须使用IAP，苹果将会按照Developer Program License Agreement中的约定与开发者按30/70比例分成。</p></li>
<li><p>11.13 在应用内使用跳转至外部购买或订阅链接的应用将会被拒，比如”buy”按钮跳转至一个购买电子书的web页面。</p></li>
<li><p>11.14 只要应用内没有跳转至外部购买、订阅的按钮或链接，苹果允许这些应用读取或展示经批准的、在应用外购买或订阅内容(特别是杂志、报纸、书籍、音频、音乐、视频以及云存储内容)。苹果只能通过应用程序内的购买获得一部分收益。</p></li>
<li><p>11.15 应用程序可以只使用自动更新订阅期刊(报纸、杂志)、商业应用程序(企业类、效率类、专业创意类以及云存储类)和媒体类应用程序(视频、音频、声音)，否则应用程序将被拒绝。</p></li>
<li><p>11.16 当与特定的经过审核的实体产品(比如玩具)结合使用时，应用程序可以使用获得批准的附加特性和功能，只要附加功能完全依赖于该硬件产品(比如一款用于控制望远镜的应用程序)或者也可以在不使用实物产品的情况下使用应用程序，比如成就奖励或者使用IAP。</p></li>
<li><p>11.17 如果应用功能遵照各州和联邦法律，那么应用可以用来促进被认可的虚拟货币的流通。</p></li>
</ul>


<h3>12.抓取和聚合</h3>

<ul>
<li><p>12.1 从苹果网站(例如apple.com、iTunes Store、App Store、iTunes Connect以及Apple Developer Programs等)抓取任何信息或者使用苹果网站内容和服务进行排名的应用程序将会被拒绝。</p></li>
<li><p>12.2 应用软件可以使用获得批准的苹果RSS feeds，例如iTunes Store RSS feeds。</p></li>
<li><p>12.3 只是简单的网页剪切、内容整合或者收集链接的应用程序可能会被拒绝。</p></li>
</ul>


<h3>13.损害设备</h3>

<ul>
<li><p>13.1 怂恿用户以可能造成损害的方式使用苹果设备的应用软件将会被拒绝。</p></li>
<li><p>13.2 快速耗光设备电量或产生过多热量的应用软件将会被拒绝。</p></li>
<li><p>13.3 能导致用户人身伤害的app将会被拒绝。</p></li>
</ul>


<h3>14.人身攻击</h3>

<ul>
<li><p>14.1 涉及诽谤、人身攻击性质以及内容狭隘卑鄙的应用软件或者打击特定个人或组织的应用软件将会被拒绝。</p></li>
<li><p>14.2 职业政治讽刺家和幽默作家不受这一条款约束。(开门，查水表)</p></li>
<li><p>14.3 展示用户创作内容(UGC)的应用程序必须提供一个过滤不良资讯的方法，一个用户可以标记侵犯性内容的机制，以及可以阻止辱骂用户的能力。</p></li>
<li><p>15.暴力(此前传禁枪的消息并未在条款中明确指出)</p></li>
<li><p>15.1 应用程序中出现人或动物被杀、致残以及枪击、刺伤、拷打等受伤情形的真实画面将会被拒绝。</p></li>
<li><p>15.2 出现描绘暴力或虐待儿童等内容的应用程序将会被拒绝。</p></li>
<li><p>15.3 游戏中出现的”敌人”不可指向一个特定种族、文化、一个真实存在的政府、企业或者其他任何现实中的实体。</p></li>
<li><p>15.4 对武器进行真实描述以怂恿非法使用或滥用这些武器的应用程序将会被拒绝。</p></li>
<li><p>15.5 包含俄罗斯轮盘赌博内容的游戏将会被拒。</p></li>
<li><p>16.令人反感的内容</p></li>
<li><p>16.1 应用程序中出现过于令人反感或者低俗的内容将会被拒绝。</p></li>
<li><p>16.2 在设计上激怒用户或令人感到厌恶的应用程序将会被拒绝。</p></li>
</ul>


<h3>17.隐私</h3>

<ul>
<li><p>17.1 在未经用户事先许可，或未告知用户如何使用信息以及在何处使用信息的情况下，应用程序不能传输用户数据。</p></li>
<li><p>17.2 要求用户共享电子邮箱地址和出生日期等私人信息才可使用其功能的应用程序将会被拒绝。</p></li>
<li><p>17.3 仅出于遵守适用的儿童隐私法规的目的，应用程序可以要求用户的出生日期(或者使用其他年龄评级机制)，但是必须包括一些有用的功能或者娱乐价值，不管用户年龄大小。</p></li>
<li><p>17.4 收集、传输以及分享未成年用户个人信息(比如名字、地址、邮件、位置、照片、视频、绘画、聊天信息以及其他个人数据，或者与以上所述相关的永久性标示符)的应用程序必须遵守应用儿童隐私法规，并且必须包含隐私条款。</p></li>
<li><p>17.5 包含账号注册或者访问用户现有账号的应用程序必须包含隐私策略，否则将会被拒绝。</p></li>
</ul>


<h3>18.色情</h3>

<ul>
<li><p>18.1 含有色情素材，也就是《韦氏词典》中定义的”旨在激发情欲，对性器官或性行为的明确描述或展示，而无关美学或情绪感受”的程序将会被拒绝。</p></li>
<li><p>18.2 包含用户频繁提供的色情内容的应用程序(比如以前的“Chat Roulette”程序)将会被拒绝。</p></li>
</ul>


<h3>19.宗教，文化与种族</h3>

<ul>
<li><p>19.1 涉及宗教、文化或种族群体的引用或评论包含诽谤性、攻击性或狭隘内容，或会使特定群体遭受伤害或暴力的应用程序将会被拒绝。</p></li>
<li><p>19.2 程序可以包含或引用宗教经文，程序所提供的引用或翻译必须准确且不会引起误导。评论应该有教育意义，可以令人开阔眼界，而不应有煽动性。</p></li>
</ul>


<h3>20. 竞赛、赌博、彩票以及抽奖</h3>

<ul>
<li><p>20.1 彩票抽奖和竞赛必须由应用程序的开发者或者app所属公司发起。</p></li>
<li><p>20.2 应用程序必须展示彩票抽奖和竞赛的正式规则，并声明苹果不是发起者，也没有以任何方式参与活动。</p></li>
<li><p>20.3 开发者运营一款具有抽奖性质的应用必须经过法律允许，并且抽奖应用必须具备以下特征：报酬、运气以及奖品。</p></li>
<li><p>20.4 允许用户在应用中直接购买彩票或彩券的应用将会被拒。</p></li>
<li><p>20.5 提供真钱游戏(比如体育博彩、扑克牌、赌场游戏、赛马以及彩票)的应用程序必须有应用程序适用地区当地必要的许可和允许，必须限制在这些区域，必须可以从App Store免费下载。</p></li>
<li><p>20.6 使用IAP购买信誉或者货币，且结合真钱游戏的应用将会被拒绝。</p></li>
</ul>


<h3>21.慈善与援助</h3>

<ul>
<li><p>21.1 包含可以向已认证的慈善组织捐赠功能的应用程序必须是免费的。</p></li>
<li><p>21.2 捐赠款项的募集必须通过Safari浏览器访问web页面或是手机短消息完成。</p></li>
</ul>


<h3>22.法律要件</h3>

<ul>
<li><p>22.1 应用程序必须遵守所有发布地区当地法律，开发者有义务了解并遵守所有当地法律。</p></li>
<li><p>22.2 包含虚假，欺诈或误导性陈述的程序将会被拒绝。</p></li>
<li><p>22.3 任何用于招徕、促进或鼓励犯罪或明显鲁莽行为的应用程序将会被拒绝。</p></li>
<li><p>22.4 支持非法文件共享的程序将会被拒绝。</p></li>
<li><p>22.5 被设计用以非法赌博工具的应用程序(包括点算牌)将会被拒绝。</p></li>
<li><p>22.6 具有匿名或恶作剧拨打电话或发送类似短信/彩信功能的程序将会被拒绝。</p></li>
<li><p>22.7 任何开发暗中收集用户密码或用户私人数据程序的开发者将会从iOS开发者计划中除名。</p></li>
<li><p>22.8 包含非执法机构发布的DUI检查点信息，或者怂恿/协助酒后驾车的应用将会被拒绝。</p></li>
<li><p>22.9 计算药剂用量的应用程序必须由药品制造商或者认可机构发布，比如医院、保险公司以及高校。</p></li>
<li><p>22.10 在未授权的情况下使用iTunes音乐预览的应用程序将会被拒绝。</p></li>
</ul>


<h3>23. Passbook</h3>

<ul>
<li><p>23.1 Passbook Passes可被用来支付或者接收支付，传递商业信息或者提供验证(比如电影票、飞机票、优惠券以及其他)，但把Passbook Passes用于其他用途的应用程序可能会遭到拒绝，并且会被撤销Passbook证书。</p></li>
<li><p>23.2 Passes必须包含有效的pass发行人有效的联系资料，否则app将会被拒绝，并且Passbook证书也会被取消。</p></li>
<li><p>23.3 Passes必须经过实体签名，并基于其名字、商标或者品牌进行分发，否则应用程序将会被拒绝，而Passbook证书也可能会被撤销。</p></li>
</ul>


<h3>24.儿童类别</h3>

<ul>
<li><p>24.1 儿童类别中的应用程序必须包含隐私政策，必须遵守适用的儿童隐私法规。</p></li>
<li><p>24.2 儿童类别中的应用程序不允许包括行为广告(比如app内部基于用户行动的服务广告)，任何在应用程序中展示的上下文广告必须适合儿童。</p></li>
<li><p>24.3 儿童类别中的应用程序必须得到家长许可或使用parental gate才能链接至应用程序外部或进行交易。</p></li>
<li><p>24.4 儿童类别中的应用程序必须标明”5岁以下，6-8岁或者9-11岁”。</p></li>
</ul>


<h3>25.扩展</h3>

<ul>
<li><p>25.1 包含扩展的应用程序必须遵照App Extension Programming Guide要求。</p></li>
<li><p>25.2 包含扩展的应用程序必须提供某些功能(辅助屏幕，附加设置)，否则将会被拒绝。</p></li>
<li><p>25.3 如果扩展的视图中包含营销推广、广告或者IAP内容，那么包含该扩展的应用将会被拒绝。</p></li>
<li><p>25.4 键盘扩展必须提供一个切换至下个键盘的方法。</p></li>
<li><p>25.5 键盘扩展必须具有离线访问功能，否则将会被拒绝。</p></li>
<li><p>25.6 键盘扩展必须提供和App Extension Programming Guide描述一致的数字和十进键盘类型，否则将会被拒绝。</p></li>
<li><p>25.7 提供键盘扩展的应用必须拥有基本的功能分类和隐私政策，否则将会被拒绝。</p></li>
<li><p>25.8 提供键盘扩展的应用程序只允许收集用户活动以增强键盘扩展在iOS设备上的功能，否则将会被拒绝。</p></li>
</ul>


<h3>26.HomeKit</h3>

<ul>
<li><p>26.1 使用HomeKit框架的应用程序必须有提供家庭自动化服务的主要目的。</p></li>
<li><p>26.2 使用HomeKit框架的应用程序必须在营销文本中说明用途，同时必须提供隐私政策，否则将会被拒绝。</p></li>
<li><p>26.3 应用程序不允许将从HomeKit API收集的数据用于广告宣传或者其他基于使用的数据挖掘。</p></li>
<li><p>26.4 出于其他目的使用从HomeKit API收集的数据，而不是用于提高用户体验或者家庭自动化功能中硬件/软件性能，这类应用将会被拒绝。</p></li>
</ul>


<h3>27.HealthKit</h3>

<ul>
<li><p>27.1 使用HealthKit或者ResearchKit框架(出于健康目的用于进行人体生物学研究的框架)的应用程序，必须遵守其所有适用区域的法律，以及iOS Developer Program License Agreement中的3.3.28和3.39条款。(增加了对于ResearchKit框架的支持)</p></li>
<li><p>27.2 将虚假或者错误的数据写入HealthKit的应用程序将会被拒绝。</p></li>
<li><p>27.3 使用HealthKit框架的应用程序在iCloud中储存用户健康信息将会被拒绝。</p></li>
<li><p>27.4 应用程序不允许将通过HealthKit API收集的用户数据用作广告宣传或者基于使用的数据挖掘目的，除了改善健康、医疗、健康管理以及医学研究目的。</p></li>
<li><p>27.5 未经用户许可与第三方分享通过HealthKit API获得的用户数据的应用程序将会被拒绝。</p></li>
<li><p>27.6 使用HealthKit框架的应用程序必须在营销文本中说明集成了Health app，同时必须在app用户界面清楚阐释HealthKit的功能。</p></li>
<li><p>27.7 使用HealthKit框架的应用程序必须提供隐私政策，否则将会被拒绝。</p></li>
<li><p>27.8 提供诊断、治疗建议，或者控制诊断疾病的硬件，或者治疗疾病的应用程序，若没有根据要求提供书面的监管审批，将会被拒绝。</p></li>
<li><p>27.9 收集人体生物学研究相关数据的应用程序必须要获得参与者的许可，对于未成年人，应用程序要得到其父母或者监护人的许可。许可内容必须包括：(a)研究的性质、目的以及持续性;(b)参与流程、风险以及受益(福利);&copy;信息的机密性和数据处理(包括与任何与第三方的共享);(d)参与者问题切入点;(e)取消方法(新增)</p></li>
</ul>


<h3>28.TestFlight</h3>

<ul>
<li><p>28.1 应用程序仅能使用TestFlight对以公开发布为目的的应用进行beta版测试，且必须遵守完整的App Review Guidelines。</p></li>
<li><p>28.2 当版本中包含的内容或功能有重大变化时，使用TestFlight的应用程序必须提交审核。</p></li>
<li><p>28.3 使用TestFlight的应用程序不允许分发给测试者，以作为任何形式的补偿。</p></li>
</ul>


<h3>29. Apple Pay</h3>

<ul>
<li><p>29.1 使用Apple Pay的应用程序必须在出售任何商品或者服务之前为用户提供所有材料的购买信息，否则将会被拒绝。使用Apple Pay进行定期付款的应用程序必须提供最低限度续费期限，付费将持续直至被取消，每个阶段所付款额，费用付款归属，以及如何取消等。(增加了对于定期付款的规定)</p></li>
<li><p>29.2 使用Apple Pay的应用程序必须正确使用Apple Pay Human Interface Guidelines中的Apple Pay标识和用户界面元素，否则将会被拒绝。</p></li>
<li><p>29.3 使用Apple Pay作为购买机制的应用程序所提供的商品或服务不能触犯任何交付地范围内的法律，也不能用作任何非法目的。</p></li>
<li><p>29.4 使用Apple Pay的应用程序必须提供隐私政策，否则将会被拒绝。</p></li>
<li><p>29.5 只有为了促进或提高商品和服务的交付，或者依照法律要件，使用Apple Pay的应用程序才能与第三方分享通过Apple Pay获得的数据。</p></li>
</ul>

]]></content>
  </entry>
  
</feed>
