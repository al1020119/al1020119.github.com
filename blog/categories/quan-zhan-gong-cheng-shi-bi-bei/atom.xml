<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 全栈工程师必备 | iOS梦工厂]]></title>
  <link href="http://al1020119.github.io/blog/categories/quan-zhan-gong-cheng-shi-bi-bei/atom.xml" rel="self"/>
  <link href="http://al1020119.github.io/"/>
  <updated>2015-12-08T13:58:18+08:00</updated>
  <id>http://al1020119.github.io/</id>
  <author>
    <name><![CDATA[iCocos]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[H5初探]]></title>
    <link href="http://al1020119.github.io/blog/2015/09/29/h5chu-tan/"/>
    <updated>2015-09-29T15:51:33+08:00</updated>
    <id>http://al1020119.github.io/blog/2015/09/29/h5chu-tan</id>
    <content type="html"><![CDATA[<h2>H5精华</h2>

<blockquote><p>标准通用标记语言下的一个应用HTML标准自1999年12月发布的HTML4.01后，后继的HTML5和其它标准被束之高阁，为了推动Web标准化运动的发展，一些公司联合起来，成立了一个叫做 Web Hypertext Application Technology Working Group （Web超文本应用技术工作组 -WHATWG） 的组织。WHATWG 致力于 Web 表单和应用程序，而W3C（World Wide Web Consortium，万维网联盟） 专注于XHTML2.0。在 2006 年，双方决定进行合作，来创建一个新版本的 HTML。</p></blockquote>

<!--more-->


<h6>1：链接</h6>

<p>图像标签</p>

<pre><code>相对路径 ../../

绝对路径  https:// http://  ftp://  file://
</code></pre>

<ul>
<li><p> href: 引用 不是必须的</p></li>
<li><p> src: 引入  必需的</p></li>
</ul>


<hr />

<pre><code>&lt;!--超链接标签  javascript:void(0) --&gt;
&lt;a href="#"&gt;我是超链接&lt;/a&gt;
&lt;a href="http://baidu.com" target="_blank"&gt;百度一下,你就知道&lt;/a&gt;


&lt;img src="https://www.baidu.com/img/bd_logo1.png" alt="百度logo" width="200"&gt;
&lt;img src="images/img_01.jpg"&gt;
</code></pre>

<h6>2：列表&lt;&ndash;列表标签&ndash;></h6>

<p>无序：</p>

<pre><code>&lt;ul&gt;
  &lt;li&gt;我是列表1&lt;/li&gt;
  &lt;li&gt;我是列表2&lt;/li&gt;
  &lt;li&gt;我是列表3&lt;/li&gt;
  &lt;li&gt;我是列表4&lt;/li&gt;
&lt;/ul&gt;
</code></pre>

<p>有序：</p>

<pre><code>&lt;Ol&gt;
    &lt;li&gt;我是列表1&lt;/li&gt;
    &lt;li&gt;我是列表2&lt;/li&gt;
    &lt;li&gt;我是列表3&lt;/li&gt;
    &lt;li&gt;我是列表4&lt;/li&gt;
&lt;/Ol&gt;
</code></pre>

<h6>3:文章：</h6>

<pre><code>&lt;article&gt;

    &lt;header&gt;

    &lt;/header&gt;

    &lt;section&gt;&lt;/section&gt;

    &lt;section&gt;&lt;/section&gt;

    &lt;footer&gt;

    &lt;/footer&gt;

&lt;/article&gt;
</code></pre>

<h6>4：高级:</h6>

<pre><code>   &lt;!--进度条--&gt;
   &lt;progress max="100" value="50"&gt;&lt;/progress&gt;
   &lt;!--音频--&gt;
   &lt;audio src="sources/music.m4a" controls="controls"&gt;&lt;/audio&gt;
   &lt;!--视频--&gt;
   &lt;video src="sources/BigBuck.m4v" controls="controls"&gt;&lt;/video&gt;
</code></pre>

<blockquote><h6>其他请参考相关文档</h6></blockquote>

<hr />

<h2>CSS3</h2>

<h4>一:样式</h4>

<blockquote><p>CSS即层叠样式表（Cascading StyleSheet）。 在网页制作时采用层叠样式表技术，可以有效地对页面的布局、字体、颜色、背景和其它效果实现更加精确的控制。 只要对相应的代码做一些简单的修改，就可以改变同一页面的不同部分，或者页数不同的网页的外观和格式。CSS3是CSS技术的升级版本，CSS3语言开发是朝着模块化发展的。以前的规范作为一个模块实在是太庞大而且比较复杂，所以，把它分解为一些小的模块，更多新的模块也被加入进来。这些模块包括： 盒子模型、列表模块、超链接方式 、语言模块 、背景和边框 、文字特效 、多栏布局等。</p></blockquote>

<h6>1.行内：</h6>

<p>&lt;&ndash;style=&ldquo;background-color: red;&rdquo;&ndash;></p>

<p><--
   单值属性: 后面只有一个属性值
   复合属性: 后面有多个属性值
--></p>

<pre><code>   &lt;div style="color: purple; font-size: 40px; background-color: yellowgreen;"&gt;我是容器div&lt;/div&gt;
   &lt;p style="color: blue; font-size: 100px; border:3px solid red;"&gt;我是段落&lt;/p&gt;
</code></pre>

<h6>2.页内：</h6>

<pre><code>&lt;--
  网站 = N个网页 + 服务器 + 数据库 + ....

--&gt;

&lt;!--
  css遵循的规律:
  1&gt; 就近原则
  2&gt; 叠加原则
--&gt;
</code></pre>

<hr />

<pre><code>    &lt;style&gt;
        div{
            color: chartreuse;
            border: 3px dashed blueviolet;
            font-size: 90px;
        }
    &lt;/style&gt; 
&lt;/head&gt;
&lt;body&gt;
  &lt;div&gt;我是div&lt;/div&gt; 
</code></pre>

<h6>3.外部</h6>

<pre><code>    &lt;!--引入--&gt;
    &lt;link href="css/index.css" rel="stylesheet"&gt;
&lt;/head&gt;
&lt;body&gt;
   &lt;div&gt;哈哈哈哈哈&lt;/div&gt;
</code></pre>

<hr />

<pre><code>div{
    color: darkgoldenrod;
    background-color: mediumvioletred;
    font-size: 5px;
}
</code></pre>

<h4>二：选择器</h4>

<pre><code>    /** 标签选择器*/
    div{
        color: red;
    }
    /*类选择器*/
    .test1{
        color: green;
    }
    /*id选择器*/
    #main{
        font-size: 90px;
    }
    /*并列选择器*/
    #main,.test1{
        border: 5px double darkviolet;
    }
    /*复合选择器*/
    p.test2{
       background-color: red;
    }
    /*后代选择器*/
    #first p a{
        font-size: 90px;
    }
    /*伪类*/
    input:focus{
       width: 500px;
       height: 60px;
       font-size: 55px;
       /*去除外边框*/
       outline: none;
    }

    div#main:hover{
       background-color: yellow;
       width: 500px;
       height: 250px;
    }
    /*伪元素*/
    p:first-letter{
        color: goldenrod;
        font-size: 60px;
    }
</code></pre>

<hr />

<pre><code>   &lt;div id="main"&gt;bjbjwefbjb&lt;/div&gt;
   &lt;div&gt;bjbjwefbjb&lt;/div&gt; 
   &lt;p&gt;我是段落&lt;/p&gt; 
   &lt;div class="test1"&gt;bjbjwefbjb&lt;/div&gt;
   &lt;div id="first"&gt;
       &lt;p&gt;
           &lt;a href="#"&gt;我是超链接&lt;/a&gt;
       &lt;/p&gt;
   &lt;/div&gt;
</code></pre>

<h4>三：优先级：</h4>

<pre><code>    &lt;--
      CSS遵循的规律:
      1.相同级别的选择器: a.就近原则  b.叠加原则
      2.不同选择器:
        important &gt; 内联 &gt; id &gt; 类 &gt; 标签 | 伪类 | 属性选择 &gt; 伪元素 &gt; 通配符 &gt; 继承
      3. 选择器的针对性越强，它的优先级就越高
    --&gt;
</code></pre>

<blockquote><h6>其他请参考相关文档</h6></blockquote>

<hr />

<h2>编写 JScript</h2>

<blockquote><p>与其他许多编程语言一样， Microsoft JScript 是用文本方式编写的，并被组织成为语句、由相关的语句集组成的块、以及注释。在一条语句内可以使用变量、比如字符串和数字（称为“文字”）的立即数、以及表达式。</p></blockquote>

<h5>一：语句</h5>

<p>JScript 程序是语句的集合。一条 Jscript 语句相当于英语中的一个完整句。Jscript 语句将表达式组合起来，完成一个任务。</p>

<p>一条语句由一个或多个表达式、关键字或者运算符（符号）组成。典型地，一条语句写一行，尽管一条语句可以超过两行或更多行。两条或更多条语句也可以写在同一行上，语句之间用分号“;”隔开。通常，每一新行开始一条新语句。不过显式地终止语句是一个好方法。这是用分号 (;)来实现的，分号是 JScript 语句的终止字符。下面给出 Jscript 语句的两隔示例。</p>

<pre><code>aBird = "Robin"; //将文本“Robin”赋值给变量 aBird
var today = new Date(); // 将今天的日期赋值给变量 today
</code></pre>

<p>用大括号（{}）括起来的一组 JScript 语句称为一个语句块。分组到一个语句块中的语句通常可当作单条语句处理。这就是说在 JScript 期望有一条单个语句的大多数地方可以使用语句块。应该注意以 for 和 while 打头的循环语句是例外情况。注意，语句块中的原始语句以分号结束，但语句块本身并不以分号结束。</p>

<p>通常，在函数和条件语句中使用语句块。</p>

<blockquote><p>注意，Jscript 与 C++ 以及其他某些语言不同，它不认为语句块是一个新的范围；只有函数创建新范围。在下面的示例中，第一条语句开始定义一个函数，该函数包含一个五条语句组成的语句块。语句块后的三条语句没有用大括号括起来；这些语句不是一个语句块，所以就不是函数定义的一部分。</p></blockquote>

<pre><code>function convert(inches)  {
   feet = inches / 12;  //  这五条语句属于一个语句块。
   miles = feet / 5280;
   nauticalMiles = feet / 6080;
   cm = inches * 2.54;
   meters = inches / 39.37;
}
km = meters / 1000;  //  这三条语句不在语句块内。
kradius = km;
mradius = miles;
</code></pre>

<h5>二：注释</h5>

<p>单行的 JScript 注释以一对正斜杠(//)开始。下面给出一个单行注释的示例。</p>

<pre><code>aGoodIdea = "Comment your code thoroughly.";  //  这是一个单行注释。
</code></pre>

<p>多行注释以一个正斜杠加一个星号的组合(/<em>)开始,并以其逆向顺序 (</em>/)结束。</p>

<pre><code>/*
这是一个用来解释前面的代码语句的多行注释。

该语句将一个值赋给 aGoodIdea 变量。
用引号包含的这种值称为一个文字。
文字显式并直接包含信息；
而不是简接地引用信息。
（引号不属于该文字的内容。）
*/
</code></pre>

<blockquote><p>注意   如果您试图将一个多行注释插入到另一个中，JScript 不能按正常的方式解释生成的多行注释。标明嵌入的多行注释结束的 */ 被认为是整个多行注释的结尾。这就意味着嵌入多行注释之后的文本不再被认为是注释；相应地，它将被解释为 JScript 代码，并会产生语法错误。</p></blockquote>

<p>建议将所有的注释写为单行注释的语句块。这样您以后就能够将大段的代码与多行注释区分开。</p>

<pre><code>//这是另一种多行注释，写成一系列单行注释。

//  在执行完该语句后，可以使用 aGoodIdea 变量的名字来引用其内容，
//  如下一条语句那样，即采用连接操作将字符串文字添加到
//  aGoodIdea 变量，以创建一个新的变量。

var extendedIdea = aGoodIdea + " You never know when you'll have to figure out what it does.";
</code></pre>

<p>赋值和相等</p>

<p>JScript 语句中使用等号 (=)给变量赋值：等号是赋值运算符。= 运算符左边的操作项总是一个 Lvalue。Lvalue 可以是：</p>

<h5>三：变量，</h5>

<p>数组元素，
对象属性。
= 运算符右边的操作项总是一个 Rvalue。Rvalues 可以是任何类型的一个任意值，包括表达式的值。下面给出一个 JScript 赋值语句的示例。</p>

<pre><code>anInteger = 3;
</code></pre>

<p>Jscript 编译器解释本语句的意义为：“将 3 赋给变量 anInteger”或“anInteger 的值为 3”。</p>

<p>确定您理解了 = 运算符（赋值）和 == 运算符（相等）的差异。在比较两个值是否相等时，应使用两个等于号 (==)。这些内容将在 控制程序的流程 中详细介绍。</p>

<h5>四：表达式</h5>

<p>JScript 表达式是指 JScript 解释器能够计算生成值的 JScript “短语”。这个值可以是任何有效的 JScript 类型 — 数字、字符串、对象，等等。最简单的表达式是文字。下面给出 JScript 文字表达式的一些示例。</p>

<pre><code>3.9                       // 数字文字
"Hello!"                  // 字符串文字
false                     // 布尔文字
null                      // 文字空值
{x:1, y:2}                // 对象文字
[1,2,3]                   // 数组文字
function(x){return x*x;}  // 函数文字
</code></pre>

<p>更多复杂的表达式中包含变量、函数、函数调用以及其他表达式。可以用运算符将表达式组合，创建复合表达式。运算符可以是：</p>

<pre><code>+  // 加法
-  // 减法
*  // 乘法
/  // 除法
</code></pre>

<p>下面给出 JScript 复合表达式的一些示例。</p>

<pre><code>var anExpression = 3 * (4 / 5) + 6;
var aSecondExpression = Math.PI * radius * radius;
var aThirdExpression = aSecondExpression + "%" + anExpression;
var aFourthExpression = "(" + aSecondExpression + ") % (" + anExpression + ")";
</code></pre>

<blockquote><h6>其他请参考相关文档</h6></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[排序算法精髓]]></title>
    <link href="http://al1020119.github.io/blog/2014/05/20/paixu/"/>
    <updated>2014-05-20T13:53:19+08:00</updated>
    <id>http://al1020119.github.io/blog/2014/05/20/paixu</id>
    <content type="html"><![CDATA[<h2>1、序言</h2>

<p>ios开发中涉及到算法的地方还真不多，除非你的应用程序真的非常大，或者你想你的应用程序性能非常好才会去想到关于算法方面的性能优化，而在ios开发中真的能用得到的也就是关于排序的，当然如果你是做游戏的话那么你可能会涉及到不少的算法或者优化问题，但是这不是本篇文章讨论的范围。</p>

<p>后面的文章中，我将会给大家详细介绍八大算法。</p>

<!--more-->


<h2>2、冒泡排序</h2>

<h5>2.1 引出</h5>

<p>前面的两篇博客里讲的插入排序是基于“逐个记录插入”，选择排序是基于“选择”，那么冒泡排序其实是基于“交换”。每次从第一个记录开始，一、二两个记录比较，大的往后放，二三两个记录比较&hellip;依次类推，这就是一趟冒泡排序。每一趟冒泡排序后，无序序列中值最大的记录冒到序列末尾，所以称之为冒泡排序。</p>

<h5>2.2 代码</h5>

<pre><code>//冒泡排序
void bubbleSort(int *a,int n)
{
    int i,j;
    for(i=1;i&lt;n;i++)
        for(j=1;j&lt;n-i+1;j++){
            if(a[j+1]&lt;a[j]){
                a[j]=a[j]+a[j+1];
                a[j+1]=a[j]-a[j+1];
                a[j]=a[j]-a[j+1];
            }
        }
}
</code></pre>

<p> 冒泡排序算法：
冒泡排序代码</p>

<pre><code> static void Main(string[] args)
        {
            ////五次比较
             for (int i = 1; i &lt;= 5; i++)
            {
                List&lt;int&gt; list = new List&lt;int&gt;();
                //插入2k个随机数到数组中
                for (int j = 0; j &lt; 2000; j++)
                {
                    Thread.Sleep(1);
                    list.Add(new Random((int)DateTime.Now.Ticks).Next(0, 100000));
                }
                Console.WriteLine("\n第" + i + "次比较：");
                Stopwatch watch = new Stopwatch();
                watch.Start();
                var result = list.OrderBy(single =&gt; single).ToList();
                watch.Stop();
                Console.WriteLine("\n快速排序耗费时间：" + watch.ElapsedMilliseconds);
                Console.WriteLine("输出前是十个数:" + string.Join(",", result.Take(10).ToList()));
                watch.Start();
                result = BubbleSort(list);
                watch.Stop();
                Console.WriteLine("\n冒泡排序耗费时间：" + watch.ElapsedMilliseconds);
                Console.WriteLine("输出前是十个数:" + string.Join(",", result.Take(10).ToList()));
                Console.ReadKey();
            }

      }

 //冒泡排序算法
        private static List&lt;int&gt; BubbleSort(List&lt;int&gt; list)
        {
            int temp;
            //第一层循环： 表明要比较的次数，比如list.count个数，肯定要比较count-1次
            for (int i = 0; i &lt; list.Count - 1;i++ ) 
            {
                //list.count-1：取数据最后一个数下标，47 
                //j&gt;i: 从后往前的的下标一定大于从前往后的下标，否则就超越了。
                for (var j = list.Count-1; j &gt; i;j-- )
                {
                    //如果前面一个数大于后面一个数则交换
                    if (list[j - 1] &gt; list[j])
                    {
                        temp = list[j - 1];
                        list[j - 1] = list[j];
                        list[j] = temp;
                    }
                }

            }
            return list;
        } 
</code></pre>

<h5>2.3 效率分析</h5>

<p>相对于简单选择排序，冒泡排序交换次数明显更多。它是通过不断地交换把最大的数冒出来。冒泡排序平均时间和最坏情况下（逆序）时间为o（n<sup>2</sup>）。最佳情况下虽然不用交换，但比较的次数没有减少，时间复杂度仍为o（n<sup>2</sup>）。此外冒泡排序是稳定的。</p>

<h2>3、快速排序</h2>

<h5>3.1 引出</h5>

<pre><code>快速排序是冒泡排序的一种改进，冒泡排序排完一趟是最大值冒出来了，那么可不可以先选定一个值，然后扫描待排序序列，把小于该值的记录和大于该值的记录分成两个单独的序列，然后分别对这两个序列进行上述操作。这就是快速排序，我们把选定的那个值称为枢纽值，如果枢纽值为序列中的最大值，那么一趟快速排序就变成了一趟冒泡排序。
</code></pre>

<h5>3.2 代码</h5>

<pre><code>两种版本，第一种是参考《数据结构》，在网上这种写法很流行。第二种是参考《算法导论》，实现起来较复杂。

//快速排序（两端交替着向中间扫描）
void quickSort1(int *a,int low,int high)
{
    int pivotkey=a[low];//以a[low]为枢纽值
    int i=low,j=high;
    if(low&gt;=high)
        return;
    //一趟快速排序
    while(i&lt;j){//双向扫描
        while(i &lt; j &amp;&amp; a[j] &gt;= pivotkey)
            j--;
        a[i]=a[j];
        while(i &lt; j &amp;&amp; a[i] &lt;= pivotkey)
            i++;
        a[j]=a[i];
    }
    a[i]=pivotkey;//放置枢纽值
    //分别对左边、右边排序
    quickSort1(a,low,i-1); 
    quickSort1(a,i+1,high); 
}

//快速排序（以最后一个记录的值为枢纽值，单向扫描数组）
void quickSort2(int *a,int low,int high)
{
    int pivotkey=a[high];//以a[high]为枢纽值
    int i=low-1,temp,j;
    if(low&gt;=high)
        return;
    //一趟快速排序
    for(j=low;j&lt;high;j++){
        if(a[j]&lt;=pivotkey){
            i++;
            temp=a[i];
            a[i]=a[j];
            a[j]=temp;
        }
    }
    i++;
    //放置枢纽值
    temp=a[i];
    a[i]=pivotkey;
    a[high]=temp;
    //分别对左边、右边排序
    quickSort2(a,low,i-1); 
    quickSort2(a,i+1,high); 
}
</code></pre>

<p>快速排序算法：</p>

<p>快速排序法</p>

<pre><code> static void Main(string[] args)
        {

            //5次比较
            for (int i = 1; i &lt;= 5; i++)
            {
                List&lt;int&gt; list = new List&lt;int&gt;();
                //插入200个随机数到数组中 
                for (int j = 0; j &lt; 200; j++)
                {
                    Thread.Sleep(1);
                    list.Add(new Random((int)DateTime.Now.Ticks).Next(0, 10000));
                }
                Console.WriteLine("\n第" + i + "次比较：");
                Stopwatch watch = new Stopwatch();
                watch.Start();
                var result = list.OrderBy(single =&gt; single).ToList();
                watch.Stop();
                Console.WriteLine("\n系统定义的快速排序耗费时间：" + watch.ElapsedMilliseconds);
                Console.WriteLine("输出前是十个数:" + string.Join(",", result.Take(10).ToList()));
                watch.Start();
                new QuickSortClass().QuickSort(list, 0, list.Count - 1);
                watch.Stop();
                Console.WriteLine("\n俺自己写的快速排序耗费时间：" + watch.ElapsedMilliseconds);
                Console.WriteLine("输出前是十个数:" + string.Join(",", list.Take(10).ToList()));
                Console.ReadKey();
            }
        }

 public class QuickSortClass
    {

        ///&lt;summary&gt; 
        ////// 分割函数 
        ///&lt;/summary&gt; 
        //////&lt;param name="list"&gt;待排序的数组&lt;/param&gt; 
        ///&lt;param name="left"&gt;数组的左下标&lt;/param&gt; 
        //////&lt;param name="right"&gt;&lt;/param&gt; 
        ///&lt;returns&gt;&lt;/returns&gt;
         public int Division(List&lt;int&gt; list, int left, int right) 
         { 
             //首先挑选一个基准元素 
             int baseNum = list[left]; 
             while (left &lt; right) 
             { 
                 //从数组的右端开始向前找，一直找到比base小的数字为止(包括base同等数) 
                 while (left &lt; right &amp;&amp; list[right] &gt;= baseNum) 
                     right = right - 1; 
                 //最终找到了比baseNum小的元素，要做的事情就是此元素放到base的位置 
                 list[left] = list[right]; 
                 //从数组的左端开始向后找，一直找到比base大的数字为止（包括base同等数）
                 while (left &lt; right &amp;&amp; list[left] &lt;= baseNum) 
                     left = left + 1; 
                 //最终找到了比baseNum大的元素，要做的事情就是将此元素放到最后的位置 
                 list[right] = list[left];
             }
             //最后就是把baseNum放到该left的位置 
             list[left] = baseNum;
             //最终，我们发现left位置的左侧数值部分比left小，left位置右侧数值比left大 
             //至此，我们完成了第一篇排序 
             return left;
         }
        public void QuickSort(List&lt;int&gt; list, int left, int right)
        { 
            //左下标一定小于右下标，否则就超越了 
            if (left &lt; right) 
            { 
                //对数组进行分割，取出下次分割的基准标号 
                int i = Division(list, left, right);
                //对“基准标号“左侧的一组数值进行递归的切割，以至于将这些数值完整的排序 
                QuickSort(list, left, i - 1); 
                //对“基准标号“右侧的一组数值进行递归的切割，以至于将这些数值完整的排序
                QuickSort(list, i + 1, right);
            }
        }
    }
</code></pre>

<h5>3.3 效率分析</h5>

<p> 快速排序时间与划分是否对称有关。快速排序的平均时间复杂度为o（n<em>logn），至于为什么是o（n</em>logn），请参考《算法导论》第7章，书中用递归树的方法阐述了快速排序平均时间。且常数因子很小，所以就平均时间而言，快速排序是很好的内部排序方法。最佳情况下（每次划分都对称）时间复杂度o（n*logn）。最坏情况下（每次划分都不对称，如输入的序列有序或者逆序时）时间复杂度为o(n<sup>2</sup>)，所以在待排序序列有序或逆序时不宜选用快速排序。此外，快速排序是不稳定的。</p>

<p> 最佳情况下，每次划分都是对称的，由于枢纽值不再考虑，所以得到的两个子问题的大小不可能大于n/2，同时一趟快速排序时间为o（n），所以运行时间递归表达式：</p>

<pre><code>T（n）&lt;=2T(n/2)+o(n)。
</code></pre>

<p>这个递归式的解法请参考下一篇博客中归并排序效率分析。其解为T（n）=o（n*logn）。</p>

<p> 最坏情况下，每次划分都很不对称，T(n)=T(n-1)+o(n),可以用递归树来解，第i层的代价为n-i+1.总共有n层。把每一层代价加起来有n-1个n相加。所以这个递归式的解为T（n）=o（n<sup>2</sup>）,此时就是冒泡排序。</p>
]]></content>
  </entry>
  
</feed>
