<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Projects | iOS梦工厂]]></title>
  <link href="http://al1020119.github.io/blog/categories/projects/atom.xml" rel="self"/>
  <link href="http://al1020119.github.io/"/>
  <updated>2015-12-15T11:49:13+08:00</updated>
  <id>http://al1020119.github.io/</id>
  <author>
    <name><![CDATA[iCocos]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Git+SoureTree实战]]></title>
    <link href="http://al1020119.github.io/blog/2015/12/28/git-plus-souretreeshi-zhan/"/>
    <updated>2015-12-28T12:28:06+08:00</updated>
    <id>http://al1020119.github.io/blog/2015/12/28/git-plus-souretreeshi-zhan</id>
    <content type="html"><![CDATA[<p>由于之前一直使用SVN（Cornerstone），最近手痒痒的想弄一下git，听说soureTree不错，就花了一段时间研究了一下，并记录下来！</p>

<p>GitHub相信大家都知道，上面有很多优秀的开源项目供我们学习，比较著名的类似AFNetworking、SDWebImage等等。本篇文章就是教大家如何在Mac系统下提交自己的项目到GitHub上，相信对于新手还是很有帮助的。</p>

<h2>首先我们必须先从git命令开始，没有为什么！</h2>

<h3>需要的工具</h3>

<ul>
<li><p>1.安装Git  <a href="http://git-scm.com/download/mac">http://git-scm.com/download/mac</a> 我下的是2.2.1版本的。</p></li>
<li><p>2.终端 (自带的，请允许我卖个萌。。。)</p></li>
</ul>


<h3>操作流程</h3>

<ul>
<li><p>1.GitHub 上注册账号  <a href="https://github.com/">https://github.com/</a> 去这上面注册下就行（这里就不多说，自己去做吧）。</p></li>
<li><p>2.配置 SSH key</p></li>
</ul>


<!--more-->


<pre><code>-  ①  defaults write com.apple.finder AppleShowAllFiles -bool true     终端 显示隐藏文件（需要重新运行Finder)。

-  ② 点击桌面顶部菜单  前往&gt;个人  看看自己电脑上有没有个 .ssh 的隐藏文件，有的话个人建议删除，新建个。

-  ③  mkdir .ssh    终端新建个 .ssh文件

-  ④  cd .ssh   进入到刚才新建的.ssh文件目录下 

-  ⑤  ssh-Keygen -t rsa -C "your_email@example.com"       后面“ ”里面 随意输入个邮箱就行,回车会提示你输入密码什么的，可以无视一直回车下去。

-  ⑥  ls -la      查看是否存在 id_rsa(私钥)  id_rsa.pub(公钥) 这两个东西，如果存在就成功了。

-  ⑦ pbcopy &lt; ~/.ssh/id_rsa.pub     拷贝 公钥

-  ⑧ 进入GitHub 登入 。 

        添加你刚才生成的SSH Key 到GitHub上，也就是最后一张图的 Add SSH Key 点击 会让你输入秘钥 以及秘钥的名称。 秘钥 pbcopy &lt; ~/.ssh/id_rsa.pub 这个终端命令就已经复制过了  直接command + V 粘贴上去就行，秘钥名称随意。
</code></pre>

<p><img src="/images/git004.png" title="Caption" ></p>

<p><img src="/images/git005.png" title="Caption" ></p>

<p>ssh -T <a href="&#109;&#x61;&#x69;&#108;&#116;&#111;&#x3a;&#103;&#105;&#116;&#64;&#103;&#105;&#116;&#104;&#x75;&#x62;&#46;&#x63;&#x6f;&#109;">&#103;&#x69;&#116;&#64;&#103;&#x69;&#x74;&#104;&#117;&#98;&#46;&#x63;&#111;&#109;</a>   新添加到github上的秘钥左边的点一开始是灰色的，终端执行这个命令后，刷新网页会看到灰色点变成了绿色。</p>

<p><img src="/images/git006.png" title="Caption" ></p>

<ul>
<li>3.在GitHub 上创建公开项目。</li>
</ul>


<p><img src="/images/git001.png" title="Caption" ></p>

<p><img src="/images/git002.png" title="Caption" ></p>

<p><img src="/images/git003.png" title="Caption" ></p>

<ul>
<li><p>4.上传本地项目到GitHub。</p>

<ul>
<li><p> ① 在电脑上新建个项目文件夹 。</p></li>
<li><p> ②  cd + 刚才新建的项目文件夹路径</p></li>
<li><p> ③  git clone + GitHub 上创建的项目地址    （GitHub 上创建的项目地址如下图所示）这样你在GitHub 上创建的项目就克隆下来了</p></li>
<li><p> ④ cd + 克隆下来的项目路径 （如何在终端输入路径，可以直接把你想要知道路径的文件夹拖到终端里 这样自动就要该文件夹的路径了）</p></li>
<li><p> ⑤ git init    (git 仓库的初始化)</p></li>
<li><p> ⑥ git add .    (这里注意：add 空格 再加 .)</p></li>
<li><p> ⑦ git status    (查看add 成功没)</p></li>
<li><p> ⑧ git commit -m &ldquo;描述&rdquo;   （“ ” 引号里面输入你的描述 随意）</p></li>
<li><p> ⑨ git push origin master        (最后push到GitHub上)</p></li>
</ul>
</li>
</ul>


<p><img src="/images/git007.png" title="Caption" ></p>

<p>到这里大概结束了，祝大家能够在GitHub上发起更多好的项目，发扬光大开源精神！</p>

<p><img src="/images/git008.png" title="Caption" ></p>

<hr />

<h2>SourceTree</h2>

<blockquote><p>简介
SourceTree 是 Windows 和Mac OS X 下免费的 Git 和 Hg 客户端，拥有可视化界面，容易上手操作。同时它也是Mercurial和Subversion版本控制系统工具。支持创建、提交、clone、push、pull 和merge等操作。
  </p></blockquote>

<p>关于SourceTree的下载，github的账号注册，仓库的创建这里就不介绍了，亦或者没有什么好说的，因为会用电脑都会做，而且前面已经介绍过了，一部分。我们就从上面做好的所用项目中最后一步开始。看卡下面的图片：
  
<img src="/images/git008.png" title="Caption" ><br/>
  </p>

<h5>SourceTree基本使用</h5>

<blockquote><p>以下以SourceTree For Mac V2.0.5.2中文版为例，托管平台以Github为例</p></blockquote>

<ul>
<li>1.打开我们的SourceTree，点击：“+新仓库”，选择：“从URL克隆”</li>
</ul>


<p><img src="/images/git009.png" title="Caption" ></p>

<ul>
<li>2.粘贴我们的仓库链接至源URL，SourceTree会自动帮我们生成目标路径（本地仓库路径）以及名称，点击克隆</li>
</ul>


<p><img src="/images/git010.png" title="Caption" ></p>

<ul>
<li>3.等待数秒后，SourceTree会为我们自动打开我们刚才克隆的仓库，选择master选项，这里我们可以看到我们仓库里的所有文件</li>
</ul>


<p><img src="/images/git011.png" title="Caption" ></p>

<ul>
<li>4.双击souretree中对应的项目之后。</li>
</ul>


<p><img src="/images/git012.png" title="Caption" ></p>

<p>后面就是需要熟悉souretree界面，并且使用了，也就是平时开发者们最常用的一些操作。</p>

<p><img src="/images/git013.png" title="Caption" ></p>

<p>具体的详细步骤，后面我会找机会根据项目实际开发整理好(不过，如果你使用果Coerstone那这个也并不难)。由于时间的原因，这里就到这里了！</p>

<h5>最后总结一下：SourceTree&amp;Git部分名词解释</h5>

<pre><code>克隆(clone)：从远程仓库URL加载创建一个与远程仓库一样的本地仓库
提交(commit)：将暂存文件上传到本地仓库（我们在Finder中对本地仓库做修改后一般都得先提交一次，再推送）
检出(checkout)：切换不同分支
添加（add）：添加文件到暂存区
移除（remove）：移除文件至暂存区
暂存(git stash)：保存工作现场
重置(reset)：回到最近添加(add)/提交(commit)状态
合并(merge)：将多个同名文件合并为一个文件，该文件包含多个同名文件的所有内容，相同内容抵消
抓取(fetch)：从远程仓库获取信息并同步至本地仓库
拉取(pull)：从远程仓库获取信息并同步至本地仓库，并且自动执行合并（merge）操作，即 pull=fetch+merge
推送(push)：将本地仓库同步至远程仓库，一般推送（push）前先拉取（pull）一次，确保一致
分支(branch)：创建/修改/删除分枝
标签(tag):给项目增添标签
工作流(Git Flow):团队工作时，每个人创建属于自己的分枝（branch），确定无误后提交到master分枝
终端(terminal):可以输入git命令行
</code></pre>

<h6>相关链接推荐</h6>

<p>→<a href="https://help.github.com/desktop/">Github help for mac</a></p>

<p>→<a href="https://help.github.com/desktop/">Github help for win</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[H5应用实战]]></title>
    <link href="http://al1020119.github.io/blog/2015/04/20/h5ying-yong-shi-zhan/"/>
    <updated>2015-04-20T11:03:23+08:00</updated>
    <id>http://al1020119.github.io/blog/2015/04/20/h5ying-yong-shi-zhan</id>
    <content type="html"><![CDATA[<blockquote><p>前言:
ObjectiveC与Js交互是常见的需求，可对于新手或者所谓的高手而言，其实并不是那么简单明了。</p></blockquote>

<p>标准通用标记语言下的一个应用HTML标准自1999年12月发布的HTML4.01后，后继的HTML5和其它标准被束之高阁，为了推动Web标准化运动的发展，一些公司联合起来，成立了一个叫做 Web Hypertext Application Technology Working Group （Web超文本应用技术工作组 -WHATWG） 的组织。WHATWG 致力于 Web 表单和应用程序，而W3C（World Wide Web Consortium，万维网联盟） 专注于XHTML2.0。在 2006 年，双方决定进行合作，来创建一个新版本的 HTML。</p>

<p>这段时间在研究H5相关，由于本人主攻的是ios开发，所以后期主要的任务就是，使用H5+Css+JP编写好的代码在OC中使用，或者相互调用。</p>

<p>这里就给大家介绍一下后面的内容，关于前面的内容后期会陆续更新相关文章与总结。</p>

<!--more-->


<h3>OC——调用——HTML</h3>

<p>这里有两种方式
直接使用网络链接（接口）
使用本地的html</p>

<p>由于没有完成一个完整的html项目，这里就以链接演示。</p>

<p>先来看看官方链接显示情况
<img src="/images/html&amp;oc001.png" title="Caption" ></p>

<p>1.使用WebView，设置代理，加载对应的Html（略过部分细节），并且增加一个指示器</p>

<pre><code>// 加载网页
NSURL *url = [NSURL URLWithString:@"http://www.xianhua.cn/m/"];
NSURLRequest *request = [NSURLRequest requestWithURL:url];
[self.webView loadRequest:request];

self.webView.scrollView.hidden = YES;
self.webView.backgroundColor = [UIColor grayColor];

UIActivityIndicatorView *displayView = [[UIActivityIndicatorView alloc] initWithActivityIndicatorStyle:UIActivityIndicatorViewStyleWhiteLarge];
[displayView startAnimating];
self.displayView = displayView;
displayView.center = self.view.center;
[self.webView addSubview:displayView];
</code></pre>

<p>2.在WebView加载完成的方法中实现我们想要的功能需求</p>

<pre><code>#pragma mark -&lt;UIWebViewDelegate&gt;
- (void)webViewDidFinishLoad:(UIWebView *)webView{

    // 改变标题
    NSString *str = @"document.getElementsByTagName('h1')[0].innerText = 'iCocos鲜花网';";
    [webView stringByEvaluatingJavaScriptFromString:str];

    // 删除广告
    NSString *str2 =@"document.getElementsByClassName('detail_btns2')[0].remove();";
    [webView stringByEvaluatingJavaScriptFromString:str2];

    // 改变尾部
    NSString *str3 = @"document.getElementById('xiazaiapp').getElementsByTagName('a')[0].innerText='iCocos鲜花网App';";
    [webView stringByEvaluatingJavaScriptFromString:str3];

    dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(0.25 * NSEC_PER_SEC)), dispatch_get_main_queue(), ^{
        self.webView.scrollView.hidden = NO;
        [self.displayView stopAnimating];
    });
}
</code></pre>

<p>修改后子在手机就是这样的效果</p>

<p><img src="/images/html&amp;oc002.png" title="Caption" ></p>

<h3>HTML——调用——OC</h3>

<p>这里的例子是通过在html中点击一个按钮去调用OC代码，访问系统系相册</p>

<h6>先来看看OC中需要怎么写：</h6>

<p>1.使用WebView，设置代理，加载对应的Html（略过部分细节）</p>

<pre><code>// 加载网页
NSURL *url = [[NSBundle mainBundle] URLForResource:@"test" withExtension:@"html"];
NSURLRequest *request = [NSURLRequest requestWithURL:url];
[self.webView loadRequest:request];
</code></pre>

<p>2.在Web开始加载请求的代理方法中拼接方法（包装）</p>

<pre><code>#pragma mark - &lt;UIWebViewDelegate&gt;
- (BOOL)webView:(UIWebView *)webView shouldStartLoadWithRequest:(NSURLRequest *)request navigationType:(UIWebViewNavigationType)navigationType{
//    NSLog(@"------%@", request.URL.absoluteString);
    NSString *requestUrl = request.URL.absoluteString;
    NSRange range = [requestUrl rangeOfString:@"ds3q:///"];
    NSUInteger location = range.location;
    if (location != NSNotFound) {
        NSString *str = [requestUrl substringFromIndex:location + range.length];
        NSLog(@"%@", str);
        // 包装SEL
        SEL method = NSSelectorFromString(str);
        [self performSelector:method];
    }

    return YES;
}
</code></pre>

<p>3.实现打开相册的OC方法</p>

<pre><code>// 打开相册
- (void)openCamera{
    UIImagePickerController *vc = [[UIImagePickerController alloc] init];
    vc.sourceType = UIImagePickerControllerSourceTypePhotoLibrary;
    [self presentViewController:vc animated:YES completion:nil];
}
</code></pre>

<p>4.再来看看html中简单的写法</p>

<pre><code>&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head lang="en"&gt;
    &lt;meta charset="UTF-8"&gt;
    &lt;title&gt;&lt;/title&gt;
    &lt;style&gt;
        body{
            margin-top: 50px;
        }
    &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;button onclick="openCamera();"&gt;访问相册&lt;/button&gt;
    &lt;script type="text/javascript"&gt;
        function openCamera(){
            window.location.href = 'ds3q:///openCamera';
        }
    &lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>

<p> 显示效果</p>

<p> <img src="/images/html&amp;oc003.png" title="Caption" ></p>

<hr />

<p>  <img src="/images/html&amp;oc004.png" title="Caption" ></p>
]]></content>
  </entry>
  
</feed>
