<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Summary | iOS梦工厂]]></title>
  <link href="http://al1020119.github.io/blog/categories/summary/atom.xml" rel="self"/>
  <link href="http://al1020119.github.io/"/>
  <updated>2016-03-19T01:45:37+08:00</updated>
  <id>http://al1020119.github.io/</id>
  <author>
    <name><![CDATA[iCocos]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[使用Tweak工程]]></title>
    <link href="http://al1020119.github.io/blog/2016/03/19/shiyongtweakgongcheng/"/>
    <updated>2016-03-19T13:32:08+08:00</updated>
    <id>http://al1020119.github.io/blog/2016/03/19/shiyongtweakgongcheng</id>
    <content type="html"><![CDATA[<p>iOS逆向 - 使用Tweak工程</p>

<p>创建第一个Tweak工程
1、创建工程</p>

<p>在目录下面启动NIC /opt/theos/bin/nic.pl ,可以看到有好多个模板可以选择。 1、4、6、8、9 是Theos自带的模板,其他的是 <a href="https://github.com/DHowett/theos-nic-templates">https://github.com/DHowett/theos-nic-templates</a> 下载的。 这里主要学习tweak的用法，选择9</p>

<pre><code>  NIC 2.0 - New Instance Creator
------------------------------
  [1.] iphone/application
  [2.] iphone/cydget
  [3.] iphone/framework
  [4.] iphone/library
  [5.] iphone/notification_center_widget
  [6.] iphone/preference_bundle
  [7.] iphone/sbsettingstoggle
  [8.] iphone/tool
  [9.] iphone/tweak
  [10.] iphone/xpc_service
Choose a Template (required):
</code></pre>

<!--more-->


<p>输入工程的名字</p>

<pre><code>Project Name (required): reverseDemo
</code></pre>

<p>输入deb包的名字，相当于App的bundle id</p>

<pre><code>Package Name [com.yourcompany.reversedemo]: com.liuchendi.iOSReverse
</code></pre>

<p>输入tweak作者的名字</p>

<pre><code>Author/Maintainer Name [lovelydd]: liuchendi
</code></pre>

<p>输入MobileSubstrate Bundle filter，就是设置tweak作用对象的bundle identifier。就像上一节用Reveal查看别人的App一样，需要知道作用的对象是谁</p>

<pre><code>[iphone/tweak] MobileSubstrate Bundle filter [com.apple.springboard]: com.apple.springboard
</code></pre>

<p>安装完成后需要重启的应用，已进程名表示</p>

<pre><code>[iphone/tweak] List of applications to terminate upon installation (space-separated, '-' for none) [SpringBoard]: SpringBoard
</code></pre>

<p>一个Tweak工程就创建完成了
2、定制工程文件</p>

<p>查看工程里面的文件目录</p>

<pre><code>liuchendi@lovelyddtekiMBP reversedemo$ ls -l
total 40
-rw-r--r--  1 liuchendi  staff   182 12 17 17:30 Makefile
-rw-r--r--  1 liuchendi  staff  1045 12 17 17:30 Tweak.xm
-rw-r--r--  1 liuchendi  staff   222 12 17 17:30 control
-rw-r--r--  1 liuchendi  staff    57 12 17 17:30 reverseDemo.plist
lrwxr-xr-x  1 liuchendi  staff    10 12 17 17:30 theos -&gt; /opt/theos
</code></pre>

<p>Makefile：指定工程用到的文件、框架、库等信息，整个过程自动化。</p>

<p>// 固定写法
    include theos/makefiles/common.mk</p>

<pre><code>// tweak名字,就是工程的名字
TWEAK_NAME = reverseDemo

//tweak包含的源文件(不包括头文件),多个文件以空格分隔
reverseDemo_FILES = Tweak.xm

// 根据Theos工程的不同类型，指定不同的.mk文件。
// 逆向初级阶段一般是Application、 Tweak 、Tool三种类型的程序
// 分别对应的.mk文件是 application.mk 、tweak.mk 、tool.mk
include $(THEOS_MAKE_PATH)/tweak.mk

// 安装完成后,杀掉SpringBoard进程,好让CydiaSubstrate在进程启动时加载对应的dylib
after-install::
  install.exec "killall -9 SpringBoard"
</code></pre>

<p>其他功能：</p>

<pre><code>// 指定处理器架构，arm64架构不兼容armv7/armv7s架构,必须适配arm64的dylib
ARCHS = armv7 arm64

//指定SDK版本
TARGET = iphone:8.1:8.0     // 8.1是指定采用的SDK版本，8.0是可以部署安装的版本
TARGET = iphone:latest:8.0 // Xcode附带的最新版本SDK

//导入framework
reverseDemo_FRAMEWORKS = UIKit CoreTelephony

//导入私有framework
reverseDemo_PRIVATE_FRAMEWORK = AppSupport ChatKit

//链接Mach-O对象(Mach-O object)
// -lx 代表链接libx.a 或者libx.dylib
reverseDemo_LDFLAGS = -lx
</code></pre>

<p>Tweak.xm</p>

<p>默认生成的源文件，x表示支持Logos语法。</p>

<pre><code>/* How to Hook with Logos
Hooks are written with syntax similar to that of an Objective-C @implementation.
You don't need to #include &lt;substrate.h&gt;, it will be done automatically, as will
the generation of a class list and an automatic constructor.

%hook ClassName

// Hooking a class method
+ (id)sharedInstance {
  return %orig;
}

// Hooking an instance method with an argument.
- (void)messageName:(int)argument {
  %log; // Write a message about this call, including its class, name and arguments, to the system log.

  %orig; // Call through to the original function with its original arguments.
  %orig(nil); // Call through to the original function with a custom argument.

  // If you use %orig(), you MUST supply all arguments (except for self and _cmd, the automatically generated ones.)
}

// Hooking an instance method with no arguments.
- (id)noArguments {
  %log;
  id awesome = %orig;
  [awesome doSomethingElse];

  return awesome;
}

// Always make sure you clean up after yourself; Not doing so could have grave consequences!
%end
*/
</code></pre>

<p>主要包括几个命令:</p>

<pre><code>%hook : 指定需要hook的class，必须以%end结尾

%log : 在 %hook 函数内部使用，将函数的类名、参数等信息输出，还能够在结尾输出自定义格式信息

%orig : 执行被hook住的源代码，更改原始函数的参数

%group :将 %hook 分组，以%end结尾。便于代码管理及按条件初始化，不属于自定义的group都会隐式归类到%group_ungrouped中。 必须配合下面的 %init 命令才能生效

%init : 初始化某个group，必须在 hook 或 %ctor 内调用。如果带参数，则初始化指定的group。不带参数则初始化_ungrouped。 只有调用了 %init ，group才能生效

%ctor : 一个构造器，完成初始化工作。如果不显示定义，Theos自动生成一个 %ctor 。并在其中调用%init(_ungrouped), %ctor 不需要%end结尾

%new : 给一个现有的class添加新函数,功能与class_addMethod相同

%c : 等同于 objc_getClass 或者 NSClassFromString , 动态获取一个类的定义,在 %hook 或 %ctor 内使用

control
</code></pre>

<p>control记录了deb包管理系统所需的基本信息, 会被打包进deb里。其内容如下:</p>

<pre><code>Package: com.liuchendi.iOSReverse
Name: reverseDemo
Depends: mobilesubstrate    //依赖条件
Version: 0.0.1
Architecture: iphoneos-arm
Description: An awesome MobileSubstrate tweak!
Maintainer: liuchendi   //deb包的维护人
Author: liuchendi       //tweak作者
Section: Tweaks         //所属程序类别
</code></pre>

<p>更全面的介绍在 这里</p>

<pre><code>reverseDemo.plist
</code></pre>

<p>记录一些配置信息，描述tweak的作用范围。其实就是一个字典， Filter 为外键，里面包含有 :</p>

<pre><code>Bundles : tweak作用对象, 也是app的bundle id
Class : tweak作用的若干类
Executables : 指定若干可执行文件
</code></pre>

<p>注意: 当Filter下有不同的类array时候，需要添加Mode: Any键值对
3、编译 + 打包 + 安装
编译:make</p>

<p>执行make,可能出现的错误</p>

<pre><code>Please run `/Users/liuchendi/Desktop/逆向/Demo/reversedemo/theos/bin/bootstrap.sh substrate` manually, with privileges.
make: *** [before-all] Error 1
</code></pre>

<p>将iOS上的 /Library/Frameworks/CydiaSubstrate.framework/ CydiaSubstrate 拷贝到OSX中，将其重命名为libsubstrate.dylib后放到“/opt/theos/lib/libsubstrate. dylib”中</p>

<pre><code>/bin/sh: ldid: command not found
</code></pre>

<p>重新去 <a href="http://joedj.net/ldid">http://joedj.net/ldid</a> 下载ldid，放在/opt/theos/bin/下面,然后赋予可执行权限 sudo chmod 777</p>

<p>成功后的显示,完成了预处理，编译，签名等一系列工作</p>

<pre><code>Making all for tweak reverseDemo...
Preprocessing Tweak.xm...
Compiling Tweak.xm...
Linking tweak reverseDemo...
Stripping reverseDemo...
Signing reverseDemo...
</code></pre>

<p>发现多了一个obj文件夹</p>

<pre><code>liuchendi@lovelyddtekiMBP reversedemo$ ls -al
total 40
drwxr-xr-x  9 liuchendi  staff   306 12 17 23:20 .
drwxr-xr-x  4 liuchendi  staff   136 12 17 17:31 ..
drwxr-xr-x  4 liuchendi  staff   136 12 17 23:15 .theos
-rw-r--r--  1 liuchendi  staff   182 12 17 17:30 Makefile
-rw-r--r--  1 liuchendi  staff  1045 12 17 17:30 Tweak.xm
-rw-r--r--  1 liuchendi  staff   222 12 17 17:30 control
drwxr-xr-x  5 liuchendi  staff   170 12 17 23:20 obj
-rw-r--r--  1 liuchendi  staff    57 12 17 17:30 reverseDemo.plist
lrwxr-xr-x  1 liuchendi  staff    10 12 17 17:30 theos -&gt; /opt/theos
</code></pre>

<p>打包 make package</p>

<p>出现的错误</p>

<pre><code>make[2]: Nothing to be done for `internal-library-compile'.
Making stage for tweak reverseDemo...
make: *** [internal-package] Error 255
</code></pre>

<p>下载dm.pl文件 <a href="https://raw.githubusercontent.com/DHowett/dm.pl/master/dm.pl">https://raw.githubusercontent.com/DHowett/dm.pl/master/dm.pl</a> ,然后重命名为dpkg-deb.pl,放到/opt/theos/bin/目录下面。 我把pl后缀名字隐藏了</p>

<p>成功执行后的显示,生成一个*.deb的包</p>

<pre><code>liuchendi@lovelyddtekiMBP reversedemo$ make package
Making all for tweak reverseDemo...
Preprocessing Tweak.xm...
Compiling Tweak.xm...
Linking tweak reverseDemo...
Stripping reverseDemo...
Signing reverseDemo...
Making stage for tweak reverseDemo...
dpkg-deb：正在新建软件包“com.liuchendi.iosreverse”，包文件为“./com.liuchendi.iOSReverse_0.0.1-5_iphoneos-arm.deb”。
</code></pre>

<p>多了一个， _ 目录,里面有 DEBIAN 和 Library 文件夹</p>

<pre><code>liuchendi@lovelyddtekiMBP reversedemo$ ls
Makefile
Tweak.xm
_
com.liuchendi.iOSReverse_0.0.1-5_iphoneos-arm.deb
control
obj
reverseDemo.plist
theos
liuchendi@lovelyddtekiMBP reversedemo$ ls _
DEBIAN  Library
</code></pre>

<p><img src="/images/nixiangtweak001.png" title="Caption" ></p>

<p>用 dpkg -c 查看生成的内容</p>

<pre><code>liuchendi@lovelyddtekiMBP reversedemo$ dpkg -c com.liuchendi.iOSReverse_0.0.1-5_iphoneos-arm.deb
drwxr-xr-x liuchendi/staff   0 2015-12-17 23:48 ./
drwxr-xr-x liuchendi/staff   0 2015-12-17 23:48 ./Library/
drwxr-xr-x liuchendi/staff   0 2015-12-17 23:48 ./Library/MobileSubstrate/
drwxr-xr-x liuchendi/staff   0 2015-12-17 23:48 ./Library/MobileSubstrate/DynamicLibraries/
-rwxr-xr-x liuchendi/staff 49952 2015-12-17 23:48 ./Library/MobileSubstrate/DynamicLibraries/reverseDemo.dylib
-rw-r--r-- liuchendi/staff    57 2015-12-17 23:48 ./Library/MobileSubstrate/DynamicLibraries/reverseDemo.plist
</code></pre>

<p>可以看到内容都是一样的
安装</p>

<pre><code>make package install
</code></pre>

<p>首先在Makefile添加下面的内容,主要是指定安装的手机ip</p>

<pre><code>ARCHS = armv7 arm64
TARGET = iphone:latest:7.0
THEOS_DEVICE_IP = 192.168.1.100
</code></pre>

<p>安装成功后的显示,期间要输入两次密码</p>

<pre><code>liuchendi@lovelyddtekiMBP reversedemo$ make package install
Making all for tweak reverseDemo...
make[2]: Nothing to be done for `internal-library-compile'.
Making stage for tweak reverseDemo...
dpkg-deb：正在新建软件包“com.liuchendi.iosreverse”，包文件为“./com.liuchendi.iOSReverse_0.0.1-7_iphoneos-arm.deb”。
install.exec "cat &gt; /tmp/_theos_install.deb; dpkg -i /tmp/_theos_install.deb &amp;&amp; rm /tmp/_theos_install.deb" &lt; "./com.liuchendi.iOSReverse_0.0.1-7_iphoneos-arm.deb"
root@192.168.1.100's password: 
Selecting previously deselected package com.liuchendi.iosreverse.
(Reading database ... 2389 files and directories currently installed.)
Unpacking com.liuchendi.iosreverse (from /tmp/_theos_install.deb) ...
Setting up com.liuchendi.iosreverse (0.0.1-7) ...
install.exec "killall -9 SpringBoard"
root@192.168.1.100's password:
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[修改图标数字]]></title>
    <link href="http://al1020119.github.io/blog/2016/03/18/xiugaitubiaozhishishuzi/"/>
    <updated>2016-03-18T13:32:08+08:00</updated>
    <id>http://al1020119.github.io/blog/2016/03/18/xiugaitubiaozhishishuzi</id>
    <content type="html"><![CDATA[<p>修改程序图标标示数字</p>

<p>1.修改自身应用图标标示数字：
   [UIApplication sharedApplication].applicationIconBadgeNumber = 10;
2. 修改其他应用图标标示数字：
   ios7.0下的sdk
   Use class-dump to dump the headers for /Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS3.0.sdk/System/Library/PrivateFrameworks/iTunesStore.framework/iTunesStore</p>

<p>涉及的头文件</p>

<pre><code>ISOperation-ISAuthentication.h
ISOperation-ISLoadSoftwareMapAdditions.h
ISOperation-ISLoadURLBagAdditions.h
ISOperation.h
ISOperationDelegate-Protocol.h
ISOperationQueue.h
ISSetApplicationBadgeOperation.h

You may have to edit ISOperation.h:
</code></pre>

<!--more-->


<ol>
<li>Change the #import &ldquo;NSOperation.h&rdquo; to #import</li>
<li>Remove the &ldquo;&rdquo; in the first part of the interface.</li>
<li>So you&rsquo;re just left with &ldquo;id _delegate;&rdquo;</li>
</ol>


<p>Then copy these 3 files into a &ldquo;Headers&rdquo; dir inside of the /Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS3.0.sdk/System/Library/PrivateFrameworks/iTunesStore.framework dir.</p>

<p>You can now add the iTunesStore framework to your xcode project. Just point to the dir above.</p>

<p>Now add &ldquo;#import &rdquo; to your code and, for your convenience, here&rsquo;s an example-function ready for use:</p>

<p>CODE：</p>

<pre><code>ISSetApplicationBadgeOperation *sbadge = [[ISSetApplicationBadgeOperation alloc] init];


[sbadge setBundleIdentifier:bundleIdentifier];
[sbadge setBadgeValue:[NSString stringWithFormat:@"%d",number]];
[sbadge run];
[sbadge release];
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[资源文件夹获取]]></title>
    <link href="http://al1020119.github.io/blog/2016/03/12/ziyuanwenjianhuoqu/"/>
    <updated>2016-03-12T13:32:08+08:00</updated>
    <id>http://al1020119.github.io/blog/2016/03/12/ziyuanwenjianhuoqu</id>
    <content type="html"><![CDATA[<p>用pngcrush反编译ios app 资源文件</p>

<p>时间：2012-12-27 11:56:45 类别：ios开发 访问: 3705 次</p>

<p>要提高app制作水平，最好的方法就是学习领先者，用pngcrush反编译ios app 资源文件，步骤很简单</p>

<!--more-->


<ol>
<li><p>在电脑的itunes中下载你选中的app，下载完成之后，然后在finder里面找到对应的ipa包，也可以在91等市场中直接下载ipa文件</p></li>
<li><p>ipa文件其实是zip包，重命名为zip后缀文件之后，双击打开
找到 xxx.app 文件，这其实是个目录，点击右键，在菜单中选中“查看包内容”，就可以进入目录，然后看到大量的资源文件，这些png文件都直接放在app的根目录，你可以在finder中直接浏览</p></li>
<li><p>但是这些png文件都是打包过程中被压缩过的，photoshop无法正确识别 （ 注：打包app的时候，你可以在xcode project选项中选择对png文件不压缩）</p></li>
<li><p>要把这些png文件还原，可以通过一个名叫 pngcrush 的开源软件，你可以到 sourceforge 下载，实际上ios的sdk也提供了这个程序（xcode就是利用它压缩png的）xcrun -sdk iphoneos -find pngcrush 可以获得 pngcrush的安装目录，然后直接使用，或者在你的$PATH目录里面做一个符号链接，这样可以在console窗口直接敲pngcrush</p></li>
</ol>


<p>进入资源文件存放目录，打开对应的命令行窗口，执行下面的命令即可</p>

<pre><code>pngcrush -d xxx reverted -revert-iphone-optimizations -q *.png
pngcrush -e xxx reverted -revert-iphone-optimizations -q *.png
</code></pre>

<p>上面提到的方法都是在mac操作系统下面，如果是windows/linux也可以用，pngcrush也提供了对应的版本</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[反编译和防反编译]]></title>
    <link href="http://al1020119.github.io/blog/2016/03/08/fanbianyihefangfanbianyi/"/>
    <updated>2016-03-08T13:32:08+08:00</updated>
    <id>http://al1020119.github.io/blog/2016/03/08/fanbianyihefangfanbianyi</id>
    <content type="html"><![CDATA[<p>关于反编译和防止反编译</p>

<h3>反编译</h3>

<ul>
<li><p>内购破解</p>

<ul>
<li>iOS应用需防反编译风险之一：插件法（仅越狱）、iTools工具替换文件法（常见为存档破解）、八门神器修改</li>
</ul>
</li>
<li><p>网络安全风险</p>

<ul>
<li>iOS应用需防反编译风险之二：截获网络请求，破解通信协议并模拟客户端登录，伪造用户行为，对用户数据造成危害</li>
</ul>
</li>
</ul>


<!--more-->


<ul>
<li><p>应用程序函数PATCH破解</p>

<ul>
<li>iOS应用需防反编译风险之三：利用FLEX 补丁软件通过派遣返回值来对应用进行patch破解</li>
</ul>
</li>
<li><p>源代码安全风险</p>

<ul>
<li>iOS应用需防反编译风险之四：通过使用ida等反汇编工具对ipa进行逆向汇编代码，导致核心代码逻辑泄漏与被修改，影响应用安全</li>
</ul>
</li>
<li><p>面对这些iOS应用存在的风险，iOS应用如何防止被反编译，下面看下iOS应用加密技术</p></li>
</ul>


<h3>iOS应用加密防反编译技术</h3>

<ul>
<li><p>本地数据加密</p>

<ul>
<li>iOS应用防反编译加密技术之一：对NSUserDefaults，sqlite存储文件数据加密，保护帐号和关键信息</li>
</ul>
</li>
<li><p>URL编码加密</p>

<ul>
<li>iOS应用防反编译加密技术之二：对程序中出现的URL进行编码加密，防止URL被静态分析</li>
</ul>
</li>
<li><p>网络传输数据加密</p>

<ul>
<li>iOS应用防反编译加密技术之三：对客户端传输数据提供加密方案，有效防止通过网络接口的拦截获取数据</li>
</ul>
</li>
<li><p>方法体，方法名高级混淆</p>

<ul>
<li>iOS应用防反编译加密技术之四：对应用程序的方法名和方法体进行混淆，保证源码被逆向后无法解析代码</li>
</ul>
</li>
<li><p>程序结构混排加密</p>

<ul>
<li>iOS应用防反编译加密技术之五：对应用程序逻辑结构进行打乱混排，保证源码可读性降到最低</li>
</ul>
</li>
</ul>


<h3>下面是iOS应用加密防反编译前后对比</h3>

<p>iOS应用防反编译总结</p>

<ul>
<li><p>通过以上研究，iOS应用开发者必须要注意iOS应用反编译技术研究了，不要让iOS应用重蹈Android应用的覆辙，iOS应用防反编译！</p></li>
<li><p>反编译的流程，就是虚拟一个执行环境，看程序执行了那些指令，翻译成相应的语句一般的流程是先把程序调入到数据段， 虚拟运行环境，一般这分配文件头部，从纪录指令程序数据段，载入到虚拟环境中，纪录指令，遇到跳转指令，压入栈，形成树结构（看数据结构），遍历每个节点 的指令。形成完整程序</p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[简单环境介]]></title>
    <link href="http://al1020119.github.io/blog/2016/03/05/jiandanhuanjinjieshao/"/>
    <updated>2016-03-05T13:32:08+08:00</updated>
    <id>http://al1020119.github.io/blog/2016/03/05/jiandanhuanjinjieshao</id>
    <content type="html"><![CDATA[<h3>知识点准备</h3>

<h6>越狱的三点</h6>

<ul>
<li><p>第一点——越狱开放了iOS的文件系统，使得用户一下子获得了root权限，获得了整个iOS系统的掌控大权。越狱之后用iFunBox等工具可以可简单地看到iOS的整个文件系统，因此也可以修改系统UI、铃声，或者当U盘用。同样的，越狱之后安装的一些程序，也同样突破了沙盒的限制，甚至获得root权限，程序的行为可以不受用户和系统的限制。权利和责任的对等的，获得了root权限的用户就必须对这个系统对安全和完整性负责。可惜的是很多人越狱了，但又抱怨iPhone出现的耗电、卡机、白苹果等等现象。目测很多Android和越狱用户，确实没这个能力去负起这个责任。</p></li>
<li><p>第二点——cydia。基本所有人都把它当作越狱的显性标志。cydia表面上看来就是一个AppStore，实际上利用了另外一套软件管理系统——“Debian Package ”，也就是常说的dpkg，使用的安装包是deb，在Ubuntn上很是常见。deb的安装和卸载依靠的是一套完整的脚本，用control作为软件的标识信息，数据用tar压缩。另外，cydia还有软件源这个机制，由于我没搭过源服务器，完全不懂其中原理。</p></li>
<li><p>第三点——MobileSubstrate。这是越狱必装插件，也是tweak开发的前提。那些让iPhone能拦截黑名单电话的，或者让时间能显示年月日的，或者在状态栏添加个天气图标的程序，基本都依赖与此。</p></li>
</ul>


<!--more-->


<p>事实上，MobileSubstrate包含了三大组件。</p>

<pre><code>MobileHooker
</code></pre>

<p>俗称钩子。这把存在于内存里的钩子能钩住任何想钩住的系统方法，并替换成自己的实现方法。举例而言，黑名单的电话能被挂断，是因为在接通的那个系统方法里，并替换掉且不执行原有的方法，所以接通电话的事件也就被中断了。当然，那些奇怪问题诸如白苹果等事件基本都是由这个引起的。</p>

<pre><code>MobileLoader
</code></pre>

<p>钩子能够加载进内存并动态替换内存，靠的就是这个。其中编写.plist文件来限制加载范围必不可少。</p>

<pre><code>Safe mode
</code></pre>

<p>越狱后的机子基本都经历过安全模式，当SpringBoard崩溃时会自动进入安全模式，靠的就时这个的功劳，不然，这世界上不知又要多了多少部白苹果。</p>

<p>若想了解更多MobileSubstrate，可以点这里</p>

<p>何为越狱已经结束，为何越狱也就明朗起来了。</p>

<pre><code>想掌握iOS的整个文件系统，把iPhone当U盘使。
为了获得更好等功能，如电话增强功能、flash等
搞一些修改系统的行为，如更换UI、铃声、图标，等等
工作需要（比如说我）
安装免费软件（我故意放到最后的）
</code></pre>

<p>最后提醒一句，在非越狱机上，AppStore上的那些来电归属地，透视镜，指纹锁，基本都是假的，看完这篇文章，原因读者大概也能略知一二了。而那些省电、清内存之类的，反正我是不用，这些东西交给系统就行了，反正我上没见过iPhone4或4s会卡到游戏玩不了需要硬启动的。用户程序要操心这些东西，说真的，有心无力。有钱的话，买买几个正版的单机游戏，购买一次还提供永久的免费升级，也挺值了。</p>

<h3>环境准备</h3>

<p>曾经在cocoachina看过有人评论，越狱开发，只要找个稍微懂UNIX和Objective-C的开发人员就行了。看见这话真是无比痛心。AppStore开发者即使再痛恨越狱，但也没必要用如此言语贬低越狱开发人员。越狱开发可能想象中很是简单，但绝不是简单到用几个Private API或者在搞个重启关机等等事情（说实话重启手机还真不是一句代码能实现的）。越狱开发混了几个月，发现自己知识面完全不行。从我不成熟的眼光看来，越狱开发需要以下的几个素质：</p>

<pre><code>Objective-C以及iOS开发
</code></pre>

<p>这一点算是囊括了AppStore开发的东西。没有公司会愿意开发一个没有用户界面的东西。相比于AppStore开发，越狱开发的好处是可以使用Private API，但同时需要忍受无文档，以及一堆数据类型为id的变量带来的痛苦。</p>

<pre><code>UNIX
</code></pre>

<p>权限、脚本、进程管理，等等，哪一个不会都可能成为开发中的软肋。对于操作系统没好好学过的我，可怜了我的肋骨哟。</p>

<pre><code>iOS的特性
</code></pre>

<p>这一点抽象到连我自己也说不清。iOS作为一个类UNIX系统，肯定有一套属于自己的特性。掌握它的特性的人，需要是一个拥有理性头脑的果粉（可惜我不是）。对iOS特性的掌握可以快速找到各种奇奇怪怪的需求的解决方案，以及解决各种无log无法调试无稳定重现路径的bug甚至崩溃甚至白苹果。说个最近遇到的，某天发现了我的未接来电无法显示在通知栏了，于是我在某个文件夹里翻到了某张plist打开阅读之后果断删了，重启SpringBoard后一切正常，这能说成是一种敏感么？ 扯远了。</p>

<p>说说越狱的开发环境。其实作为一个不太入流的领域，不能指望哪个大公司某天推出一套越狱开发工具。不过，多亏了国外几位越狱大神，越狱开发才逐渐模板化。刚接触越狱开发时，最有名的莫过于theos了，模板多且编译简单。不过，今年二月发布的iOSOpenDev则集合了theos的所有优势，同时集合到Xcode之中，还能实现简单的deb打包，算是贴心尽意了。 安装iOSOpenDev之前，可先确认：</p>

<pre><code>Xcode4.0及以上
dpkg已安装。利用的是dpkg相关的东西，打包这些东西避免不了。推荐使用macports安装
git已安装。利用的是git相关的东西，很多开源项目都托管在git上
thoes已安装。很多旧的开源项目都是可不是由iOSOpenDev创建的，使用theos可以快速编译他们，同时iOSOpenDev的Logos模板是依托于theos的，而Logos模板，在我看来是tweak开发最优秀的模板，没有之一
</code></pre>

<p>接下来就可以安装iOSOpenDev。一直确定下去，假如不需要打包功能，则不需要填写IP等东西。事实上除了学习之外，基本可以忽略打包功能，脚本打包才是王道。 更详细的东西，可以看这里。 安装完毕，打开Xcode，新建工程，发现有iOSOpenDev一项，还有大量模板可选时，说明环境搭建已成功。Enjoy it！</p>
]]></content>
  </entry>
  
</feed>
