<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 逆向工程篇 | iOS梦工厂]]></title>
  <link href="http://al1020119.github.io/blog/categories/ni-xiang-gong-cheng-pian/atom.xml" rel="self"/>
  <link href="http://al1020119.github.io/"/>
  <updated>2016-03-19T01:45:37+08:00</updated>
  <id>http://al1020119.github.io/</id>
  <author>
    <name><![CDATA[iCocos]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[逆向工程总结]]></title>
    <link href="http://al1020119.github.io/blog/2016/04/25/nixiangzongjie/"/>
    <updated>2016-04-25T13:32:08+08:00</updated>
    <id>http://al1020119.github.io/blog/2016/04/25/nixiangzongjie</id>
    <content type="html"><![CDATA[<p>不忍心作结，虽然才刚刚开始，很多东西都没有细细总结，只可惜很多东西并非自己想的那么顺利。</p>

<p>才干了一年多的活，就见证了两个项目的死亡，这个世界远远超过自己想象中的残酷。第一个项目只历经一两个版本，无啥感情可言；第二个项目就完完全全经历了诞生到死亡的全过程，若说无感情的话，那我就是彻头彻尾的混蛋了。虽然终结是必然的，但是比预料中的更快更突然。悲剧往往就是在这种感情的强烈碰撞下诞生的。</p>

<!--more-->


<p>祸不单行，我丢了我的iPhone。那一刻我真真实实感觉到，失去自己熟悉的亲密的东西的那种无助。若是人，不敢想象。</p>

<p>好在人有着天生的自愈能力。换了新环境已快两月，感觉以前的那些已经过去很久似的，早已渐渐淡忘。新项目的生活紧张而细致，繁密且高精度的工作会让人无暇关注其它。而且，偶尔偶尔的小波澜，比如说某人被离职了，会在你神经绷得更紧更紧。</p>

<p>不过今天，发现那个当时也凝聚了不少心血的app终于上了AppStore，推迟了足足半年有余，惊讶中夹杂着深深的悲凉。当然这不是最让人伤心的。回想起自己后来去搞了越狱版，于是乎就听到了“我的AppStore版”和“你们的越狱版”之类的言语，似乎这个东西当时几个人搞出来，就算被重构至少还有不少头文件还标记着我的名字的东西，已经被彻头彻尾和我无关了。所以，这个东西上了AppStore，似乎我也没资格感到高兴。不，应该是连感到悲哀的权利都没有。</p>

<p>最后，我没有在Appstore下载它，更别说刷一个五星评论了。这个可能还保留着我那些刚学iOS开发而写出来的无比稚嫩的代码的东西，经历了一次次的延期、需求变更，甚至一度被挂起、拆分，最终上了架，可惜连我都觉得，这东西上不上架，已经无啥意义了。</p>

<p>只是偶尔，即使已经不做越狱版了，我还会到BigBoss的统计页面，看看那个只发了四个版本的越狱版，到底被下载了多少次（BigBoss上的统计是对所有人公开的，其它渠道的下载统计等等数据，对我来说基本不可能拿得到）。看到那个数字居然还在缓慢增长，停止更新后居然还能慢慢多了两万多的下载量，嘴角还是轻轻上扬一下。当然，我知道下载量和日活量是两个完全不同的概念，卸载是个很方便的操作，况且那个支持越狱版通过桌面长按卸载deb的功能还是我做的哩。很二逼的需求，我想，这么一个没啥用户基础的软件，居然还提供快捷卸载方法，二到家了。</p>

<p>说说新项目吧。至少这个长期占据AppStore前100名中一席的app，肯定有其牛逼的原因。果不其然，要融入到这个团队之中，我至少需要先脱层皮，不然拉低整个团队的技术水平和智商水准可是不被容忍的。中途有一段时间没活干，还在内疚着没帮上什么忙，最近接连三个版本两两并行，于是就累得跟狗一样了。效率，以及对工作量的估算，对我来说还是个硬伤。</p>

<p>吐槽了半天，没总结半点和越狱开发相关的东西。可能之后会很少接触这些东西了。以此作结，纪念那段偶尔挺二逼但也挺随意的时光。</p>

<p>改bundleid，启动后改掉取bundleid的方法，让它返回的bundle固定为原来那个，然后重签名就可以了</p>

<p>如果不hook那个取bundleid的方法，登录几次就会提示你用的不是正版，然后让你退出登录</p>

<p>不过要我做盗版或多开监测的话，会加上签名验证</p>

<p>不越狱其实也可以做，二进制文件里有个dylb的map，可以差一条记录上去，挂载你自己的动态库。然后把你自己写的用来hook代码的动态库一起签名放到ipa包里安装就行了。不过略麻烦。</p>

<p>使用load command,在mach o的头里,不过也是需求重新签名</p>

<p>bundleid在二进制中也编译的有吧，仅仅改plots</p>

<p>直接改plist就行</p>

<p>bundleid在二进制中也编译的有吧，仅仅改Plist,好像不行</p>

<p>行的，已验证</p>

<p>这么说ipa重签名是可以的，难道苹果只验证plist文件？</p>

<p>不过为了原有代码里面的判断逻辑啥的正常，最好再didfinishlaunch后hook掉NSBundle 的bundleIdentifier，让其返回原来的。</p>

<p>你改为新的bundleid，然后用你自己的证书签名，苹果就当这个app是你写的了</p>

<p>可以用theos写个tweak，然后用runtime想这么玩就随意你了·</p>

<p>主要还是看能不能分析出原有的逻辑。</p>

<p>用theos就得越狱了吧</p>

<p>噗。。。都在问iOS逆向问题，有没有谁了解Android的防逆向的所谓的『加固』处理，原理是什么呢？各加的加固处理效果如何？</p>

<p>逆向的关键只有一句 找到入口</p>

<p>做过别人 app 的分析,主要 reveal 分析 view 解构，猜测对方怎么做的效果。。。</p>

<p>reveal神器，用越狱的手机+插件来拖界面</p>

<p>然后 dump 二进制文件，可以看别人在一些地方用到了什么库</p>

<p>应该只能逆向出oc的头文件，不能逆向出m文件吧？</p>

<p>另外用 cocoapod 的可以从 dump 的头文件看得出来，因为，每个 pod 都有一个 dummy class[偷笑]一下就知道对方用了什么库了</p>

<p>嗯嗯，是的，不过可以反汇编，其实 hopper 给出来的反汇编代码已经有很大帮助了</p>

<p>reveal只能看到界面相关的东西,分析界面用的,要是想把别人的逻辑都搞清楚还是挺费劲的。了解个大体还行。</p>

<p>全部逻辑搞清楚的话，其实很费劲的。。。</p>

<p>不过找关键逻辑，或者想要的东西的话，还可以了</p>

<p>现在好多https请求是单向验证，一个charles就搞定接口了</p>

<p>之前搞雅虎天气找他们地图图片怎么做的</p>

<p>最无语的是搞金融的都不加双向验证</p>

<p>我们在接口上现在HTTPS+参数加密</p>

<p>不过对于普通抓包还是够了，一开始还用zlib压缩了一层，然后发现安卓会有问题，就放弃zlib只用gzip简单压了一下</p>

<p>大家开发的时候后天接口地址是不是都放在头文件里面？地址都放在.m里面了.不过抓包跟踪一下也差不多能抓出来</p>

<p>我们通信用的ice</p>

<p>reveal感觉用得比较舒服就是调试辅助，例如找别人写的view的名字</p>

<p>用过找别人是用啥控件,唯一设备ID没啥好研究的吧,或者取出指针</p>

<p>哈哈哈，找别人用的控件我也干过。。。Reveal抓出来一看，原来也是用的第三方的View，在github上就找到了。。。</p>

<p>例如一个feed流里一个用户的头像不相似了，想看下用户头像的地址是不是有问题，就直接选中对应imageview，然后看地址，进到xcode里暂停，直接打po [0xxxxxxxxx url] 就好了</p>

<p>url还是sd_url了···忘记了···啊哈哈哈哈哈··反正这个原理···</p>

<p>@飞宇。 有啊，我是做广告相关的。大家拿出去钱砸广告新增用户就是按照这个排重的。idfa可以更改，很多刷榜公司就是靠假良骗钱的。</p>

<p>不是，是反设备清洗,防止一台设备伪造出成千上万设备</p>

<p>这不还有IP可查么</p>

<p>你可能花100w做了100w新增用户，其实是用一台设备搞出来的</p>

<p>ip也可以用vpn自动刷新，没听过刷榜公司么！之前积分墙火的时候，淘宝上一搜一大把。</p>

<p>开发相关的安全问题，除了代码安全，资源文件安全，接口安全，还有什么没？</p>

<p>人员安全？比如别把代码上传到Github里</p>

<p>最主要是别把各种 key 传 github 了，以及自建的 git 的访问权限控制好</p>

<p>别人家的app怎么在xcode里暂停调试呢？之家的···调试别人家的bug干啥···别人家的用lldbserver挂上去，也能断点</p>

<p>因为看到你前面说reveal配合调试imageview了</p>

<p>那个是调试自家的APP时用</p>

<p>ssh+debugserver是能调试 但是不太方便 有没有更好用的工具？iPhoneTunnel</p>

<p>还有一个办法，不过我试了下新版，好像经常卡死，不晓得现在还没好，你可以试试
给你截图</p>

<p>竟然截不了图了············直接说把，直接用xcode的attach proce</p>

<p>想问一下，从iOS8.4后，还有什么方法可以访问到非越狱机子的Document目录吗？</p>

<p>刚才那个方法想成功attch上，得给个啥东西来着··竟然一时想不起来了···</p>

<p>是不是要给debugserver重签名</p>

<p>给大家再说个大家可能不知道的tips，iOS5后用rvictl可以把iPhone的网卡虚拟到mac上，然后···你懂的···</p>

<p>估计现在在非越狱机子上非常难做到了。 毕竟iOS8.4后对沙盒的权限限制较大</p>

<p>iExplorer可以部分备份指定app，间接访问到document目录</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[微信机器人]]></title>
    <link href="http://al1020119.github.io/blog/2016/04/20/weixinjiqiren/"/>
    <updated>2016-04-20T13:32:08+08:00</updated>
    <id>http://al1020119.github.io/blog/2016/04/20/weixinjiqiren</id>
    <content type="html"><![CDATA[<p> 基于iOS逆向工程的微信机器人</p>

<p>本文转自猫头鹰团队</p>

<p>推荐序</p>

<blockquote><p>本文的作者沙梓社和吴航共同编写了《 iOS 应用逆向工程》，文章中介绍的是一些基本的 iOS 领域的安全知识，但是由于普及不够，基本上没有被人们重视，希望本文能让大家重视到 iOS 的源代码安全问题。</p></blockquote>

<p>另外预告一下，我认识的一个做移动安全的白帽子即将公开一个在非越狱手机上通过 App 绕过 sandbox 的 iOS 漏洞视频，并且计划发布一系列 iOS 系统安全方面的文章。我争取到了授权，并在我的公众号上同步发表这些文章，敬请期待：）</p>

<p>以下是文章正文，略有调整。</p>

<!--more-->


<p>讲师介绍-沙梓社</p>

<ul>
<li>湖北武汉人，《iOS 应用逆向工程》系列图书的作者，在 Cydia（最大的越狱 iOS 商店）上有 11 款独立作品，接受过 CSDN 的专访，书的英文版在 GitHub 上开源后收获了 2600+ stars，是首位在 WWJC 上发表演讲的中国人，以「提升中国 iOS 开发者在国际上的地位」为己任。</li>
</ul>


<p>在很多朋友的眼里，iOS 逆向工程是一个小众、神秘的方向，为什么我会选择这个小众的方向呢？这要从我最喜欢的一首诗说起。第一次，我是在李开复的自传《世界因你不同》里看到这首诗，当时就感觉身心得到了非常强烈的震撼：</p>

<p><img src="/images/nixiangjiqiren001.jpg" title="Caption" ></p>

<p>因为我感觉到自己就是这类人：如果有两条路给我选，我确实会选更少人走的那一条。我发现自己是一个刻意保持自己跟别人不同的人。</p>

<p>在初次读到这首诗时，我还没有开始学习 iOS。在从事 iOS 方面的研究后，又从乔帮主亲自配音的广告中寻找到了灵感，发现苹果跟我的价值观非常一致，就是要追求不同。因此，我更加认定 iOS 就是我的主攻方向。</p>

<p><img src="/images/nixiangjiqiren002.jpg" title="Caption" ></p>

<p>我的成长之路，就是一条与众不同的未选之路：别人都在学「大众情人」Windows 时，我开始学「小众路人」iOS；别人都在学 iOS 正向开发时，我开始学 iOS 逆向工程。正是因为追求不同，我写的《iOS 应用逆向工程》成为了全球唯一一本 iOS 逆向相关书籍，而且有美国和韩国的出版社想要引进本书，打破了中国 iOS 知识产权零输出的尴尬纪录。我用自己的努力代表中国 iOS 开发者在国际上发声，而且为 iOS 主流社区所认可，作为中国人我感到非常自豪。</p>

<p>简单来说，我所研究的，主要是 iOS 应用层的逆向工程，对内核层的逆向工程只是稍有涉猎，没有入门。应用层的逆向工程，我感觉自己玩得差不多了，应用层的所有逆向工程相关问题，都可以用我那本书上介绍过的知识和技术得到解决，我觉得没有太大挑战性了，主要是劳动量问题。到了这个地步，我的规划主要分为 2 个方向：</p>

<p>继续从事内核研究，这个方向的终点是「越狱」（越狱即通过漏洞利用拿到iOS的root权限，代表了iOS技术研究的最高境界）；</p>

<p>换个脑子，用一些非技术能力武装自己，让自己成为一专多能的人才。这个方向的终点就是创业。</p>

<p>当然，很多朋友会问，IT 人员创业的普遍做法，都是去 BAT 这样的互联网公司干 2 年，观察一下他们的玩法，然后拉一个团队出来干。你问啥不这么干呢？主要是碰到了一个很好的项目。大公司一直都在那里，想什么时候去都可以；而好项目却不常有，机会过去就过去了，不等人，所以我在准备并不算充分的情况下选择了创业这条路。</p>

<p>交代完了我的背景，咱们可以进入正题了😁</p>

<p><img src="/images/nixiangjiqiren003.jpg" title="Caption" ></p>

<p>大意是「通过研究现有功能的实现原理，理解并融会贯通，在此基础上实现（甚至增强）这个功能。」也就是说，不是照猫画虎，而是师夷长技，「借刀杀人」。</p>

<p>在我的理解里，逆向工程是一种工程师式的高级思维方式。给你水、面粉、糖、芝麻，让你做烧饼，这是正向工程；给你一个烧饼，让你分析出它是由多少水、多少面粉、多少糖、多少芝麻组成的，这是逆向工程。也就是说，根据图纸制作实物的这个过程是正向工程，而根据实物倒推图纸的这个过程则是逆向工程。乔布斯曾说「Good artists copy; Great artists steal.」逆向工程有异曲同工之妙。</p>

<p>举几个通过逆向工程师夷长技的例子：</p>

<p><img src="/images/nixiangjiqiren004.jpg" title="Caption" ></p>

<p>通过逆向工程分析instagram滤镜算法。一个人可以“steal”一个滤镜算法团队的工作成果；</p>

<p>研究微信的网络传输协议，就像@58沈剑 在博客里说到的那样。就我目前对微信九牛一毛的研究来说，就已经发现了一处可以进一步节省流量的地方，但是估计是因为历史遗留问题，这块代码不好动；</p>

<p>看看1Password做了哪些防护。1Password是专门用于保存密码的，类似于保险柜，安全系数必须很高，它把我们的密码存在了哪里，通过什么方式加密？这些都是值得我们学习借鉴的地方。</p>

<p>除了去学习别人的长处，逆向工程还可以发现自己和别人的短处：</p>

<p><img src="/images/nixiangjiqiren005.jpg" title="Caption" ></p>

<p>这种低级错误，星巴克可以犯，但1Password不能犯；这取决于你的产品定位。这个错误当然是通过逆向工程发现的。</p>

<p>这是某世界500强企业犯的，通过HTTP协议明文传输用户手机和密码的低级错误：</p>

<p><img src="/images/nixiangjiqiren006.jpg" title="Caption" ></p>

<p>这是某突破3亿用户的移动App：</p>

<p><img src="/images/nixiangjiqiren007.jpg" title="Caption" ></p>

<p>把传输协议的密钥硬编码在代码里，有逆向工程基础的朋友可以轻松还原整套网络传输协议。淘宝上一堆堆的这个刷榜那个刷赞，就是这个原理。</p>

<p>阿凹(猫友会吉祥物，一个微信机器人)，是「借刀杀人」最典型的运用之一：</p>

<p><img src="/images/nixiangjiqiren008.jpg" title="Caption" ></p>

<p>阿凹的实现原理，简单说，就是通过逆向工程的方式找出微信iOS客户端的收发信息等私有接口，然后基于自己的逻辑调用这些接口，实现针对特殊事件的自动化应答功能。</p>

<p>我个人最常用的iOS逆向工程工具主要有这些：</p>

<p><img src="/images/nixiangjiqiren009.jpg" title="Caption" ></p>

<ol>
<li><p>dumpdecrypted：将苹果加过密的App砸壳。通过AppStore处理的App，都是加过密的，不能直接进行二进制分析，需要先解秘，业界称为「砸壳」。它的原理是等App完全加载进内存，得到解密后，再把解密过的内存给dump出来，形成解密后的二进制文件，可以直接分析。</p></li>
<li><p>class-dump：导出MachO文件里的ObjC类及方法定义。因为ObjC是一门强烈依赖于运行时的语言，它的文件类型是MachO（类比于Windows里的PE文件类型），MachO里存放了大量运行时需要用到的信息，从中可以收集整理，还原出一个App源代码里的ObjC头文件。</p></li>
<li><p>CydiaSubstrate：将第三方动态库注入进程。它是越狱插件的存在前提。在iOS开机时，会把特定目录下的所有库，给加载到指定的进程里，俗称「hook」或「钩子」。</p></li>
<li><p>Cycript：用JS语法写ObjC方法。这是Cydia之父Saurik发明的一门语言，我个人主要用它来测试私有函数。</p></li>
<li><p>Theos：越狱插件开发工具。是我的书序作者DHowett开发的。iOS正向开发用Xcode，逆向开发用Theos。</p></li>
<li><p>IDA：全平台反汇编、反编译工具。搞技术的一般都听说过这个软件，就不多介绍了。</p></li>
<li><p>Hopper：OSX反汇编、反编译工具。比IDA便宜了1000倍，但功能跟IDA差不多；主攻苹果系操作系统。</p></li>
<li><p>debugserver + LLDB：动态调试器。是大名鼎鼎的「苹果版」GDB。</p></li>
</ol>


<p>class-dump的效果，图中显示的是新浪微博App的所有头文件：</p>

<p><img src="/images/nixiangjiqiren010.jpg" title="Caption" ></p>

<p>Cycript的效果，可以看到微信星号密码的明文：</p>

<p><img src="/images/nixiangjiqiren011.jpg" title="Caption" ></p>

<p>Theos开发插件的运行效果：</p>

<p><img src="/images/nixiangjiqiren012.jpg" title="Caption" ></p>

<p>所有进程的[NSDictionary dictionaryWithContentsOfFile:]方法均被「hook」，可以随意篡改。</p>

<p>IDA的效果：</p>

<p><img src="/images/nixiangjiqiren013.jpg" title="Caption" ></p>

<p>对于熟悉汇编语言（图里是ARM汇编）的朋友来说，所有未加密的二进制文件，均等同于开源。这是什么概念，做技术的都懂。</p>

<h6>接下来我简单介绍下阿凹的制作流程：</h6>

<p>核心在于找到收发微信消息的函数，然后加以修改利用：</p>

<p><img src="/images/nixiangjiqiren014.jpg" title="Caption" ></p>

<p>用dumpdecrypted给微信砸壳，解密出的文件近50M：</p>

<p><img src="/images/nixiangjiqiren015.jpg" title="Caption" ></p>

<p>class-dump出微信的所有头文件，近7000个：</p>

<p><img src="/images/nixiangjiqiren016.jpg" title="Caption" ></p>

<ul>
<li><p>定位到收消息的View，进而定位到V对应的C，找出逻辑层的收消息函数。</p></li>
<li><p>定位到发消息的按钮（也是一个View），进而定位到对应的C，找出逻辑层的发消息函数（这个过程没法用截图表现出来，所以我只简单描述下）。</p></li>
</ul>


<p>组合收发函数，完成阿凹的逻辑，最后写代码：</p>

<p><img src="/images/nixiangjiqiren017.jpg" title="Caption" ></p>
]]></content>
  </entry>
  
</feed>
