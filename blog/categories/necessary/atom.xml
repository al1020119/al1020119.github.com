<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Necessary | iOS梦工厂]]></title>
  <link href="http://al1020119.github.io/blog/categories/necessary/atom.xml" rel="self"/>
  <link href="http://al1020119.github.io/"/>
  <updated>2015-12-30T15:31:39+08:00</updated>
  <id>http://al1020119.github.io/</id>
  <author>
    <name><![CDATA[iCocos]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[粘包&amp;封包&amp;拆包]]></title>
    <link href="http://al1020119.github.io/blog/2015/12/09/nian-bao-and-feng-bao-and-chai-bao/"/>
    <updated>2015-12-09T18:11:05+08:00</updated>
    <id>http://al1020119.github.io/blog/2015/12/09/nian-bao-and-feng-bao-and-chai-bao</id>
    <content type="html"><![CDATA[<p>今天偶尔看到了一个关于网络底层的技术，粘包，结果花了一段时间摸索了一下，找了一些资料并总结了一翻，希望有用！</p>

<h3>两个简单概念长连接与短连接：</h3>

<h6>1.长连接</h6>

<pre><code>Client方与Server方先建立通讯连接，连接建立后不断开， 然后再进行报文发送和接收。
</code></pre>

<h6>2.短连接</h6>

<pre><code>Client方与Server每进行一次报文收发交易时才进行通讯连接，交易完毕后立即断开连接。此种方式常用于一点对多点
</code></pre>

<p>通讯，比如多个Client连接一个Server.</p>

<h3>什么时候需要考虑粘包问题?</h3>

<!--more-->


<ul>
<li>1:如果利用tcp每次发送数据，就与对方建立连接，然后双方发送完一段数据后，就关闭连接，这样就不会出现粘包问题（因为只有一种包结构,类似于http协议）。关闭连接主要要双方都发送close连接（参考tcp关闭协议）。如：A需要发送一段字符串给B，那么A与B建立连接，然后发送双方都默认好的协议字符如"hello give me sth abour yourself"，然后B收到报文后，就将缓冲区数据接收,然后关闭连接，这样粘包问题不用考虑到，因为大家都知道是发送一段字符。</li>
<li>2：如果发送数据无结构，如文件传输，这样发送方只管发送，接收方只管接收存储就ok，也不用考虑粘包</li>
<li><p>3：如果双方建立连接，需要在连接后一段时间内发送不同结构数据，如连接后，有好几种结构：</p>

<pre><code>   1)"hello give me sth abour yourself"
   2)"Don't give me sth abour yourself"
</code></pre>

<p> 那这样的话，如果发送方连续发送这个两个包出去，接收方一次接收可能会是"hello give me sth abour yourselfDon&rsquo;t give me sth abour yourself" 这样接收方就傻了，到底是要干嘛？不知道，因为协议没有规定这么诡异的字符串，所以要处理把它分包，怎么分也需要双方组织一个比较好的包结构，所以一般可能会在头加一个数据长度之类的包，以确保接收。</p></li>
</ul>


<h3>粘包出现原因：</h3>

<p>在流传输中出现，UDP不会出现粘包，因为它有消息边界(参考Windows 网络编程)</p>

<ul>
<li>1 发送端需要等缓冲区满才发送出去，造成粘包</li>
<li>2 接收方不及时接收缓冲区的包，造成多个包接收</li>
</ul>


<h4>解决办法：</h4>

<p>为了避免粘包现象，可采取以下几种措施。一是对于发送方引起的粘包现象，用户可通过编程设置来避免，TCP提供了强制数据立即传送的操作指令push，TCP软件收到该操作指令后，就立即将本段数据发送出去，而不必等待发送缓冲区满；二是对于接收方引起的粘包，则可通过优化程序设计、精简接收进程工作量、提高接收进程优先级等措施，使其及时接收数据，从而尽量避免出现粘包现象；三是由接收方控制，将一包数据按结构字段，人为控制分多次接收，然后合并，通过这种手段来避免粘包。</p>

<blockquote><p>以上提到的三种措施，都有其不足之处。第一种编程设置方法虽然可以避免发送方引起的粘包，但它关闭了优化算法，降低了网络发送效率，影响应用程序的性能，一般不建议使用。第二种方法只能减少出现粘包的可能性，但并不能完全避免粘包，当发送频率较高时，或由于网络突发可能使某个时间段数据包到达接收方较快，接收方还是有可能来不及接收，从而导致粘包。第三种方法虽然避免了粘包，但应用程序的效率较低，对实时应用的场合不适合。</p></blockquote>

<h4>补充：封包和拆包</h4>

<h6>封包:</h6>

<ul>
<li>封包就是给一段数据加上包头,这样一来数据包就分为包头和包体两部分内容了(以后讲过滤非法包时封包会加入"包尾"内容).包头其实上是个大小固定的结构体,其中有个结构体成员变量表示包体的长度,这是个很重要的变量,其他的结构体成员可根据需要自己定义.根据包头长度固定以及包头中含有包体长度的变量就能正确的拆分出一个完整的数据包.</li>
</ul>


<h6>拆包</h6>

<p>目前我最常用的是以下两种方式.</p>

<ul>
<li><p>1.动态缓冲区暂存方式.之所以说缓冲区是动态的是因为当需要缓冲的数据长度超出缓冲区的长度时会增大缓冲区长度. 大概过程描述如下:</p>

<ul>
<li><p>A,为每一个连接动态分配一个缓冲区,同时把此缓冲区和SOCKET关联,常用的是通过结构体关联.</p></li>
<li><p>B,当接收到数据时首先把此段数据存放在缓冲区中.</p></li>
<li><p>C,判断缓存区中的数据长度是否够一个包头的长度,如不够,则不进行拆包操作.</p></li>
<li><p>D,根据包头数据解析出里面代表包体长度的变量.</p></li>
<li><p>E,判断缓存区中除包头外的数据长度是否够一个包体的长度,如不够,则不进行拆包操作.</p></li>
<li><p>F,取出整个数据包.这里的"取"的意思是不光从缓冲区中拷贝出数据包,而且要把此数据包从缓存区中删除掉.删除的办法就是把此包后面的数据移动到缓冲区的起始地址.</p></li>
</ul>
</li>
</ul>


<p>这种方法有两个缺点.</p>

<pre><code>    1. 为每个连接动态分配一个缓冲区增大了内存的使用.
    2. 有三个地方需要拷贝数据,一个地方是把数据存放在缓冲区,一个地方是把完整的数据包从缓冲区取出来,一个地方是把数据包从缓冲区中删除.
</code></pre>

<p>这种拆包的改进方法会解决和完善部分缺点.</p>

<ul>
<li>2.利用底层的缓冲区来进行拆包</li>
</ul>


<p>由于TCP也维护了一个缓冲区,所以我们完全可以利用TCP的缓冲区来缓存我们的数据,这样一来就不需要为每一个连接分配一个缓冲区了.另一方面我们知道recv或者wsarecv都有一个参数,用来表示我们要接收多长长度的数据.利用这两个条件我们就可以对第一种方法进行优化了.</p>

<blockquote><p>对于阻塞SOCKET来说,我们可以利用一个循环来接收包头长度的数据,然后解析出代表包体长度的那个变量,再用一个循环来接收包体长度的数据.</p></blockquote>

<h3>Socket通讯源码！</h3>

<p>客户端：
导入头文件：</p>

<pre><code>#import &lt;sys/socket.h&gt;
#import &lt;netinet/in.h&gt;
#import &lt;arpa/inet.h&gt;
#import &lt;unistd.h&gt;
</code></pre>

<p> 创建连接</p>

<pre><code>CFSocketContext sockContext = {0, // 结构体的版本，必须为0
self,  // 一个任意指针的数据，可以用在创建时CFSocket对象相关联。这个指针被传递给所有的上下文中定义的回调。
NULL, // 一个定义在上面指针中的retain的回调， 可以为NULL
NULL, NULL};

CFSocketRef _socket = (kCFAllocatorDefault, // 为新对象分配内存，可以为nil
PF_INET, // 协议族，如果为0或者负数，则默认为PF_INET
SOCK_STREAM, // 套接字类型，如果协议族为PF_INET,则它会默认为SOCK_STREAM
IPPROTO_TCP, // 套接字协议，如果协议族是PF_INET且协议是0或者负数，它会默认为IPPROTO_TCP
kCFSocketConnectCallBack, // 触发回调函数的socket消息类型，具体见Callback Types
TCPServerConnectCallBack, // 上面情况下触发的回调函数
&amp;sockContext // 一个持有CFSocket结构信息的对象，可以为nil
);

if (_socket != nil) {
    struct sockaddr_in addr4;   // IPV4
    memset(&amp;addr4, 0, sizeof(addr4));
    addr4.sin_len = sizeof(addr4);
    addr4.sin_family = AF_INET;
    addr4.sin_port = htons(8888);
    addr4.sin_addr.s_addr = inet_addr([strAddress UTF8String]);  // 把字符串的地址转换为机器可识别的网络地址

    // 把sockaddr_in结构体中的地址转换为Data
    CFDataRef address = CFDataCreate(kCFAllocatorDefault, (UInt8 *)&amp;addr4, sizeof(addr4));
    CFSocketConnectToAddress(_socket, // 连接的socket
address, // CFDataRef类型的包含上面socket的远程地址的对象
-1  // 连接超时时间，如果为负，则不尝试连接，而是把连接放在后台进行，如果_socket消息类型为kCFSocketConnectCallBack，将会在连接成功或失败的时候在后台触发回调函数
);

    CFRunLoopRef cRunRef = CFRunLoopGetCurrent();    // 获取当前线程的循环
    // 创建一个循环，但并没有真正加如到循环中，需要调用CFRunLoopAddSource
    CFRunLoopSourceRef sourceRef = CFSocketCreateRunLoopSource(kCFAllocatorDefault, _socket, 0);
    CFRunLoopAddSource(cRunRef, // 运行循环
    sourceRef,  // 增加的运行循环源, 它会被retain一次
    kCFRunLoopCommonModes  // 增加的运行循环源的模式
    );
    CFRelease(courceRef);
}
</code></pre>

<p> 设置回调函数</p>

<pre><code>// socket回调函数的格式：
static void TCPServerConnectCallBack(CFSocketRef socket, CFSocketCallBackType type, CFDataRef address, const void *data, void *info) ｛
    if (data != NULL) {
        // 当socket为kCFSocketConnectCallBack时，失败时回调失败会返回一个错误代码指针，其他情况返回NULL
        NSLog(@"连接失败");
        return;
    }
    TCPClient *client = (TCPClient *)info;
    // 读取接收的数据
    [info performSlectorInBackground:@selector(readStream) withObject:nil];
｝
</code></pre>

<p>接收发送数据</p>

<pre><code>// 读取接收的数据
- (void)readStream {
    char buffer[1024];
    NSAutoreleasePool *pool = [[NSAutoreleasePool alloc] init];
    while (recv(CFSocketGetNative(_socket), //与本机关联的Socket 如果已经失效返回－1:INVALID_SOCKET
           buffer, sizeof(buffer), 0)) {
        NSLog(@"%@", [NSString stringWithUTF8String:buffer]);
    }
}

// 发送数据
- (void)sendMessage {
    NSString *stringTosend = @"你好";
    char *data = [stringTosend UTF8String];
    send(SFSocketGetNative(_socket), data, strlen(data) + 1, 0);
}
</code></pre>

<p>服务器端：</p>

<pre><code>CFSockteRef _socket;
CFWriteStreamRef outputStream = NULL;

int setupSocket() {
    _socket = CFSocketCreate(kCFAllocatorDefault, PF_INET, SOCK_STREAM, IPPROTO_TCP, kCFSocketAcceptCallBack, TCPServerAcceptCallBack, NULL);
    if (NULL == _socket) {
        NSLog(@"Cannot create socket!");
        return 0;
    }

    int optval = 1;
    setsockopt(CFSocketGetNative(_socket), SOL_SOCKET, SO_REUSEADDR, // 允许重用本地地址和端口
(void *)&amp;optval, sizeof(optval));

    struct sockaddr_in addr4;
    memset(&amp;addr4, 0, sizeof(addr4));
    addr4.sin_len = sizeof(addr4);
    addr4.sin_family = AF_INET;
    addr4.sin_port = htons(port);
    addr4.sin_addr.s_addr = htonl(INADDR_ANY);
    CFDataRef address = CFDataCreate(kCFAllocatorDefault, (UInt8 *)&amp;addr4, sizeof(addr4));

    if (kCFSocketSuccess != CFSocketSetAddress(_socket, address)) {
        NSLog(@"Bind to address failed!");
        if (_socket)
             CFRelease(_socket);
        _socket = NULL;
        return 0;
    }

    CFRunLoopRef cfRunLoop = CFRunLoopGetCurrent();
    CFRunLoopSourceRef source = CFSocketCreateRunLoopSource(kCFAllocatorDefault, _socket, 0);
    CFRunLoopAddSource(cfRunLoop, source, kCFRunLoopCommonModes);
    CFRelease(source);

    return 1;
}

// socket回调函数，同客户端
void TCPServerAcceptCallBack(CFSocketRef socket, CFSocketCallBackType type, CFDataRef address, const void *data, void *info) {
    if (kCFSocketAcceptCallBack == type) {
        // 本地套接字句柄
        CFSocketNativeHandle nativeSocketHandle = *(CFSocketNativeHandle *)data;
        uint8_t name[SOCK_MAXADDRLEN];      
        socklen_t nameLen = sizeof(name);
        if (0 != getpeername(nativeSocketHandle, (struct sockaddr *)name, &amp;nameLen)) {
            NSLog(@"error");
            exit(1);
        }
        NSLog(@"%@ connected.", inet_ntoa( ((struct sockaddr_in *)name)-&gt;sin_addr )):

        CFReadStreamRef iStream;
        CFWriteStreamRef oStream;
        // 创建一个可读写的socket连接
        CFStreamCreatePairWithSocket(kCFAllocatorDefault, nativeSocketHandle, &amp;iStream, &amp;oStream);
        if (iStream &amp;&amp; oStream) {
            CFStreamClientContext streamContext = {0, NULL, NULL, NULL};
            if (!CFReadStreamSetClient(iStream, kCFStreamEventHasBytesAvaiable,
                                       readStream, // 回调函数，当有可读的数据时调用
                                       &amp;streamContext)){
                exit(1);
            }

            if (!CFReadStreamSetClient(iStream, kCFStreamEventCanAcceptBytes, writeStream, &amp;streamContext)){
                exit(1);
            }

            CFReadStreamScheduleWithRunLoop(iStream, CFRunLoopGetCurrent(), kCFRunLoopCommomModes);
            CFWriteStreamScheduleWithRunLoop(wStream, CFRunLoopGetCurrent(), kCFRunLoopCommomModes);
            CFReadStreamOpen(iStream);
            CFWriteStreamOpen(wStream);
        } else {
             close(nativeSocketHandle);
        }
    }
}

// 读取数据
void readStream(CFReadStreamRef stream, CFStreamEventType eventType, void *clientCallBackInfo) {
    UInt8 buff[255];
    CFReadStreamRead(stream, buff, 255);
    printf("received: %s", buff);
}

void writeStream (CFWriteStreamRef stream, CFStreamEventType eventType, void *clientCallBackInfo) {
    outputStream = stream;
}

main {
    char *str = "nihao";

    if (outputStream != NULL) {
        CFWriteStreamWrite(outputStream, str, strlen(line) + 1);
    } else {
        NSLog(@"Cannot send data!");
    }
}

// 开辟一个线程线程函数中
void runLoopInThread() {
    int res = setupSocket();
    if (!res) {
        exit(1);
    }
    CFRunLoopRun();    // 运行当前线程的CFRunLoop对象
} 
</code></pre>

<h3>Socket常见问题</h3>

<h6>1.recv不等待是因为你使用的是非阻塞socket，换而你使用阻塞socket一样需要等待。</h6>

<p>recv的recvfrom是可以替换使用的，只是recvfrom多了两个参数，可以用来接收对端的地址信息，这个对于udp这种无连接的，可以很方便地进行回复。
而换过来如果你在udp当中也使用recv，那么就不知道该回复给谁了，如果你不需要回复的话，也是可以使用的。另外就是对于tcp是已经知道对端的，
就没必要每次接收还多收一个地址，没有意义，要取地址信息，在accept当中取得就可以加以记录了。</p>

<h6>2.在服务器端不能获取正确的发送方的IP地址</h6>

<p>Q.服务器端代码：</p>

<pre><code>n=recvfrom(sockfd,msg,MAX_MSG_SIZE,0,(structaddr*)&amp;addr,&amp;addrlen);
</code></pre>

<p>客户端向服务器端发送msg后，服务器端能收到，但是，在服务器端不能获取正确的发送方的IP地址。</p>

<p>A.几经努力，问题终于解决：</p>

<pre><code>n=recvfrom(sockfd,msg,MAX_MSG_SIZE,0,(structaddr*)&amp;addr,&amp;addrlen);
</code></pre>

<p>在调用recvfrom()之前，加上：addrlen = sizeof(struct sockaddr);即可（之前声明 int addrlen; ）。</p>

<h6>3.标志字符串结束</h6>

<p> 使用java开发socket通信时，当使用输出流的情况输出时，例如：</p>

<pre><code>PrintWriter os=new PrintWriter(socket.getOutputStream());
os.println(msg);//一定要用println才能标志字符串结束
os.flush();
</code></pre>

<p>最后一句不可省略，否则不会刷新缓存，客户端则不能接收到任何数据。若是不用println，用print则字符串不会结束，这样，接收端则会一直等待，直到字符串结束或连接断开才会说明本次字符串已传输完毕，因此在使用这种方法输出时，一定要注意传送字符串传送完毕的标志位。</p>

<p>此外，我在使用perl进行socket通信时，也出现了此类问题。用perl进行socket通信的编程时，发送的消息最后一定要加上\n，也就是换行符，这样，才被认为是通信结束。</p>

<h6>4.Socket中 设置连接超时</h6>

<p>设置connect超时很简单，CSDN上也有人提到过使用select，但却没有一个令人满意与完整的答案。偶所讲的也正是select函数，此函数集成在winsock1.1中，简单点讲，"作用使那些想避免在套接字调用过程中被锁定的应用程序，采取一种有序的方式，同时对多个套接字进行管理"(《Windows网络编程技术》原话)。使用方法与解释请见《Windows网络编程技术》。</p>

<blockquote><p>在使用此函数前，需先将socket设置为非阻塞模式，这样，在connect时，才会立马跳过，同时，通常也会产生一个WSAEWOULDBLOCK错误，这个错误没关系。再执行select则是真正的超时。</p></blockquote>

<h6>5.IOS Socket 如何判断接受完成　　</h6>

<p>　　
　　发送起始时传递文件的大小信息给接收方，接收方每读取一个数据块就缓存到nsdata或写入到存储器上，当接收块的size小于等于缓存buffer的大小时，说明接收到了最后一个块，把这个快也缓存到nsdata或写入到存储器上，接收就完成了，然后作check，检查接收到的内容（缓存用的nsdata或反复写入的那个临时磁盘文件）是否和发送方开始给过来的文件大小相等，相等就是对的，不相等就是错的，需要向发送端申请复发。ios里建议用asyncSocket类，异步+代理，收到数据块时自动进入事件委托过程。
　　
　　</p>

<h6>6.AsyncSocket接收到数据出现粘包问题该如何解决？</h6>

<p>　　发送的包里每个包前边加个长度的字段。 你收到的时候先将这个字段解析出来，然后读入接下来的data内容。 如果data内容过长，那可能是几个包粘在一块儿了，只读入当前包 的内容， 如果不足，证明出现断包的情况，缓存下来，等下次收到包的时候，肯定显示上次收到包的内容了，拼在一块儿解出来。
tcp的协议中，包的接收顺序就是包发送时候的顺序，你需要处理的就是当出现一个段包时，自己缓存直到这个包长度够了就完成了。完成这个的基础，一般的做法都是自己发送的每个包头添加一个长度字段</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[爬虫必备-java抓包]]></title>
    <link href="http://al1020119.github.io/blog/2015/10/20/java/"/>
    <updated>2015-10-20T12:03:23+08:00</updated>
    <id>http://al1020119.github.io/blog/2015/10/20/java</id>
    <content type="html"><![CDATA[<blockquote><p>希望在开始之前你先看看：<a href="http://al1020119.github.io/blog/2014/02/21/fu-wu-qi-da-jian/">搭建服务器</a>,除非你已经有相应的服务器。</p></blockquote>

<p>前面我们介绍了怎么使用青花瓷和正则表达式抓包，今天就来介绍一下最后一篇：使用java抓包</p>

<p>java是大家再熟悉不过了，所以不用太担心有多难，因为里面涉及的java技术几乎为0（有点夸张），所以想想看完这篇之后你就会知道怎么使用java快速抓包，还能根据自己的喜好选择对应的方式！</p>

<p>我们开始吧！</p>

<p>前提：熟悉java语法（能看懂就行）</p>

<ul>
<li>准备阶段：从网页中获取html代码</li>
<li>实战阶段：将对应的html代码使用java语言解析出来，最后保存到plist文件</li>
</ul>


<!--more-->


<h2>一:准备阶段－－》获取html代码</h2>

<h6>1:打开你对应想要获取数据的网页，使用firefox打开（因为他有一个自带的神器叫：firebug，关于firebug这里就多说了，反正对于网页开发来说她就是神器），这里我们使用的是dota首页英雄的介绍。</h6>

<p>首先来看看我们需要的数据</p>

<p><img src="/images/ava001.png" title="Caption" ></p>

<h6>2:由于在网页开发中也是分模块开发的，所以一定的区域在html中对应对应的html代码模块，所以我们选取界面中一个小的模块作为练习。</h6>

<p>找到对应的模块，点击右键在firebug中查看元素</p>

<p><img src="/images/ava002.png" title="Caption" ></p>

<p>（确保已安装firebug，没有安装的去火狐工具栏中工具标签里面的一个附加组件搜索并下载安装就可以）</p>

<p>这个时候网页的下面就会显示对应模块的html代码，我们需要找到我们想要获取的数据对应的html模块代码，点击右键拷贝我们需要的html。</p>

<p> <img src="/images/ava003.png" title="Caption" ></p>

<h6>3:在界面简一个html文件将拷贝好的html代码粘贴到文件中，然后就需要哪么一丢丢的html相关知识了，就是补充html中的数据，使他成为完整的html文件</h6>

<p><img src="/images/ava004.png" title="Caption" ></p>

<p>这里注意一下编码方式：开发中常用的都是utf－8的格式</p>

<h2>二:实战阶段－－》抓取html（网页数据）</h2>

<p>然后我们就要正式开工了，后面才是重点，前面那都是傻瓜是的操作（后面的才做中需要有那么一丢丢的java或者android开发的基础，当然不会耶没有关系，笔者会完整的介绍流程）</p>

<h6>1:代开Eclipse</h6>

<p><img src="/images/ava005.png" title="Caption" ></p>

<p>新建一个java项目，并且点击项目中的src新建一个class专门用来实现数据的解析</p>

<p><img src="/images/ava006.png" title="Caption" ></p>

<h6>2:新建好项目之后就要用到我们的一个java的jar包，专门用来抓取网络数据的包：关于包的下载后面笔者会给出下载链接</h6>

<p><img src="/images/ava007.png" title="Caption" ></p>

<p>将下载好的jar包导入到java工程项目中。</p>

<p>然后我们需要将他添加到build路径（这里是一个常识，java中的jar包没有添加到build路径是不能使用的，添加之后对应的咖啡图标会变成奶瓶）</p>

<p><img src="/images/ava008.png" title="Caption" ></p>

<p>成功之后的显示</p>

<p><img src="/images/ava009.png" title="Caption" ></p>

<p>下面开始使用java正式抓取并解析html（网页）数据</p>

<p>根据下面的图片在java工程项目中书写html数据解析的代码：（注意里面的步骤）</p>

<p><img src="/images/ava0010.png" title="Caption" ></p>

<p>java核心代码：</p>

<pre><code>try {

　　　　　　//文件路径

　　　　　　　　String path = " /Users/icocos/Desktop/iCocos.html";



　　　　　　　　//加载网页

　　　　　　　　Document doc = Jsoup.parse(new File(path), "UTF-8");



　　　　　　　　//解析网页

　　　　　　　　Elements lis = doc.select("li");



　　　　　　　 //遍历数组

　　　　　　　　for(int i = 0; i &lt; eles.size(); i++) {

　　　　　　　　//根据i获取对应的元素

　　　　　　　　Element li = lis.get(i);



　　　　　　　　//取图片

　　　　　　　　Element img = li.select("img").get(0);

　　　　　　　　// System.out.println(img.attr("src"));



　　　　　　　　//获取图片名

　　　　　　　　String imgName = img.attr("src");



　　　　　　　 Element p = li.select("p").get(0);

　　　　　　　　String personName = p.text();



　　　　　　　　//打印数据

　　　　　　　　System.out.println(imgName + "," + personName);



　　　　　　}

　　　　　} catch {

　　　　//错误（异常）处理

　　　　e.printStackTrace();

}
</code></pre>

<p>此时点击Run运行之后，Eclipse就会根据你的代码输出对应的信息</p>

<p><img src="/images/ava011.png" title="Caption" ></p>

<p>但是这个时候我并不能直接使用数据所以需要在java代码中做一些相应的修改，使得输出的数据可以直接拷贝并且读到plist中，其实就是数组或者字典数据</p>

<p>我们知道在ios开发中从plist文件中读取数据时最常见的，当然你也可以使用其他方式，但是没有比这更简单了。</p>

<p>下面我给java代码做一些调整</p>

<p>1:在for循环之前输入这一行代码，实现数据拼接并且数据</p>

<pre><code>System.out.println("NSArray *apps = @[");
</code></pre>

<p>2:接着就需要在for循环结束之后输入预知对应的拼接数组结尾标志</p>

<pre><code>System.out.println("]");
</code></pre>

<p>3:在for循环内部的最后面我们需要在每次循环的时候都要使用上面的代码进行拼接并且使用逗号做相应的分割</p>

<pre><code>System.out.println("@{@\"name\":@\"" + personName + "\", @\"icon\":@\""+ imgName + "\"},");
</code></pre>

<p>最后完整的java获取并且解析html数据如下；</p>

<pre><code>public class iCocos {

public static void main (String[] args) {

　　　 try {

　　　　　　//文件路径

　　　　　　String path = " /Users/icocos/Desktop/iCocos.html";

　　　　　　//加载网页
　　　　　　Document doc = Jsoup.parse(new File(path), "UTF-8");

　　　　　　//解析网页
　　　　　　Elements lis = doc.select("li");

　　　　　　System.out.println("NSArray *apps = @[");


　　　　　　//遍历数组

　　　　　　for(int i = 0; i &lt; eles.size(); i++) {

　　　　　　//根据i获取对应的元素

　　　　　　Element li = lis.get(i);


　　　　　　//取图片

　　　　　　Element img = li.select("img").get(0);

　　　　　　// System.out.println(img.attr("src"));

　　　　　　//获取图片名

　　　　　　String imgName = img.attr("src");

　　　　　　Element p = li.select("p").get(0);

　　　　　　String personName = p.text();

　　　　　　//打印数据
　　　　　　// System.out.println(imgName + "," + personName);

　　　　　　System.out.println("@{@\"name\":@\"" + personName + "\", @\"icon\":@\""+ imgName + "\"},");
　　　　　　}
　　　　　　System.out.println("]");

　　　　} catch {

　　　　　　//错误（异常）处理
　　　　　　e.printStackTrace();

　　　　}

　　}

}
</code></pre>

<p>这个时候回打印输出下面的代码，</p>

<p><img src="/images/ava012.png" title="Caption" ></p>

<p>下面我们就需要在xcode中做事情了，做什么事呢，就是将输出的以NSArray开头的所有数据在Xcode中转换为plist的数据，当然你也可以不转换，做少部分的修改之后直接使用JSON解析技术去解析，但是那样不是最好的办法。</p>

<p>在Xcode中新建一个项目工程，在ViewDidLoad中粘贴拷贝过来的代码，这个时候是不是看起来非常熟悉，对了，她就是我吗开发中常用到的数组数据。</p>

<p>下面我就使用循环遍历去讲NSArray数组数据写到plist文件中。</p>

<pre><code>- (void)viewDidLoad

{

    [super viewDidLoad];



    NSArray *apps = @[

  @{@"name":@"敌法师", @"icon":@"http://dotadb.uuu9.com/UploadFiles/Dota/Hero/dfss.jpg"},

  @{@"name":@"火枪", @"icon":@"http://dotadb.uuu9.com/UploadFiles/Dota/Hero/arjj.jpg"},

  @{@"name":@"德鲁伊", @"icon":@"http://dotadb.uuu9.com/UploadFiles/Dota/Hero/dlyy.jpg"},

  @{@"name":@"月骑", @"icon":@"http://dotadb.uuu9.com/UploadFiles/Dota/Hero/yzqs.jpg"},

  @{@"name":@"变体精灵", @"icon":@"http://dotadb.uuu9.com/UploadFiles/Dota/Hero/btjl.jpg"},

  @{@"name":@"娜迦海妖", @"icon":@"http://dotadb.uuu9.com/UploadFiles/Dota/Hero/njhy.gif"},

  @{@"name":@"猴子", @"icon":@"http://dotadb.uuu9.com/UploadFiles/Dota/Hero/hycm.jpg"},

  @{@"name":@"白虎", @"icon":@"http://dotadb.uuu9.com/UploadFiles/Dota/Hero/yzjs.jpg"},

  @{@"name":@"隐形刺客", @"icon":@"http://dotadb.uuu9.com/UploadFiles/Dota/Hero/yxck.jpg"},

  @{@"name":@"巨魔", @"icon":@"http://dotadb.uuu9.com/UploadFiles/Dota/Hero/jmzj.jpg"},

  @{@"name":@"直升机", @"icon":@"http://dotadb.uuu9.com/UploadFiles/Dota/Hero/arzs.jpg"},

  @{@"name":@"赏金猎人", @"icon":@"http://dotadb.uuu9.com/UploadFiles/Dota/Hero/Naka.gif"},

  @{@"name":@"骷髅射手", @"icon":@"http://dotadb.uuu9.com/UploadFiles/Dota/Hero/KLSS.gif"},

  @{@"name":@"育母蜘蛛", @"icon":@"http://dotadb.uuu9.com/UploadFiles/Dota/Hero/YMZZ.gif"},

  @{@"name":@"血魔", @"icon":@"http://dotadb.uuu9.com/UploadFiles/Dota/Hero/XM.gif"},

  @{@"name":@"黑暗游侠", @"icon":@"http://dotadb.uuu9.com/UploadFiles/Dota/Hero/Nbrn.gif"},

  @{@"name":@"虚空假面", @"icon":@"http://dotadb.uuu9.com/UploadFiles/Dota/Hero/EC45.gif"},

  @{@"name":@"蛇发女妖", @"icon":@"http://dotadb.uuu9.com/UploadFiles/Dota/Hero/H00V.gif"},

  @{@"name":@"地卜师", @"icon":@"http://dotadb.uuu9.com/UploadFiles/Dota/Hero/H00I.gif"},

  @{@"name":@"地穴刺客", @"icon":@"http://dotadb.uuu9.com/UploadFiles/Dota/Hero/DXCK.gif"},

  @{@"name":@"蚂蚁", @"icon":@"http://dotadb.uuu9.com/UploadFiles/Dota/Hero/DXBZ.gif"},

  @{@"name":@"幻影刺客", @"icon":@"http://dotadb.uuu9.com/UploadFiles/Dota/Hero/HYCK.gif"},

  @{@"name":@"闪电幽魂", @"icon":@"http://dotadb.uuu9.com/UploadFiles/Dota/Hero/E002.gif"},

  @{@"name":@"影魔", @"icon":@"http://dotadb.uuu9.com/UploadFiles/Dota/Hero/YM01.gif"},

  @{@"name":@"小鱼人", @"icon":@"http://dotadb.uuu9.com/UploadFiles/Dota/Hero/yryx.gif"},

  @{@"name":@"幽鬼", @"icon":@"http://dotadb.uuu9.com/UploadFiles/Dota/Hero/YG1.gif"},

  @{@"name":@"圣堂刺客", @"icon":@"http://dotadb.uuu9.com/UploadFiles/Dota/Hero/E01Y.gif"},

  @{@"name":@"灵魂守卫", @"icon":@"http://dotadb.uuu9.com/UploadFiles/Dota/Hero/LHSW.gif"},

  @{@"name":@"熊战士", @"icon":@"http://dotadb.uuu9.com/UploadFiles/Dota/Hero/Huth.gif"},

  @{@"name":@"剧毒术士", @"icon":@"http://dotadb.uuu9.com/UploadFiles/Dota/Hero/JDSS.gif"},

  @{@"name":@"冥界亚龙", @"icon":@"http://dotadb.uuu9.com/UploadFiles/Dota/Hero/MJYL.gif"},

  @{@"name":@"复仇之魂", @"icon":@"http://dotadb.uuu9.com/UploadFiles/Dota/Hero/Hvwd.jpg"},

  @{@"name":@"剑圣", @"icon":@"http://dotadb.uuu9.com/UploadFiles/Dota/Hero/jsjs.jpg"}

  ];



    [newApps writeToFile:@"/Users/icocos/Desktop/apps.plist" atomically:YES];
</code></pre>

<p>这个时候我吗的左面就有了这个plist文件，打开之后你会看到</p>

<p><img src="/images/ava013.png" title="Caption" ></p>

<p>最后的步骤就是图片的下载，</p>

<pre><code>//简单写入

//    for (NSDictionary *dict in apps) {

//        NSString *icon = dict[@"icon"];

//        

//        // 新建网络图片的URL路径

//        NSURL *url = [NSURL URLWithString:icon];

//        

//        // 下载图片的二进制数据

//        NSData *data = [NSData dataWithContentsOfURL:url];

//        

//        // 截取文件名

//        NSString *filename = [icon lastPathComponent];

//        

//        // 文件路径

//        NSString *iconPath = [NSString stringWithFormat:@"/Users/icocos/Desktop/Icons/%@", filename];

//        

//        [data writeToFile:iconPath atomically:YES];

//    }
</code></pre>

<p>由于plist中图片名使用的都是对应链接的最后一个名字，所以我们不能使用上面的方法，还需要做一些处理，才能真正使用</p>

<pre><code>NSMutableArray *newApps = [NSMutableArray array];

    for (NSDictionary *dict in apps) {

        NSMutableDictionary *newDict = [NSMutableDictionary dictionary];

        newDict[@"name"] = dict[@"name"];

        newDict[@"icon"] = [dict[@"icon"] lastPathComponent];

        [newApps addObject:newDict];

    }



    [newApps writeToFile:@"/Users/icocos/Desktop/apps.plist" atomically:YES];



}
</code></pre>

<p><img src="/images/ava014.png" title="Caption" ></p>

<p>图片下载完成之后你会回看到对应的文件夹中快速的出现了好多的图片</p>

<p><img src="/images/ava015.png" title="Caption" ></p>

<p>此时我们就得到了一份和网页想相对应比较完整的plist数据，后面我们要做的就是将我们的plist数据显示到界面，后面我就不介绍了，详细请看：plist文件读取</p>

<blockquote><p>最后总结一下，如果以后遇到了关于需要抓取网络数据实现网络爬虫的功能的时候，我们基本上想到的第一种方法就是使用java语言，当然公司一般不会有这样的要求，公司一般都是使用自己服务器的api来实现，特殊情况除外。</p></blockquote>

<p>当然你也可以使用正则表达式或者Python，关于正则表达式相对来说还是比较难的，主要是细节比较多。而Python本人还没有研究过，有机会尝试一下，如果您还有什么好的方法欢迎笔者联系，相互学习与讨论。</p>

<p>我们基本上可以按照上面的思路去实现，只需要做少部分的修改，这里大致说一下</p>

<ul>
<li>1:准备阶段根据你需要的数据会有不同的html产生</li>
<li>2:产生不同的html之后你html内部的结构就会做响应的变化，这个时候你就要去把java那段核心代码搞懂来就没问题了，最重要的还是这里。</li>
<li>3:根据对应的NSArray数据写入到plist文件中，这里是iOS开发中常用的技术我就不多说。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[爬虫必备-Python抓包]]></title>
    <link href="http://al1020119.github.io/blog/2015/10/15/pa-chong-bi-bei-phthonzhua-bao/"/>
    <updated>2015-10-15T11:03:23+08:00</updated>
    <id>http://al1020119.github.io/blog/2015/10/15/pa-chong-bi-bei-phthonzhua-bao</id>
    <content type="html"><![CDATA[<p>由于最近都在研究网络爬虫技术，自己也总结了一些。借助一个朋友（boyXiong）的博文，了解到了python抓包技术，所以就整理到这里，希望你能喜欢！</p>

<h4>准备搭建环境</h4>

<p>因为是MAC电脑，所以自动安装了Python 2.7的版本</p>

<p>添加一个 库 Beautiful Soup ,方法这里说两种</p>

<ul>
<li>1.在终端输入 pip install BeautifulSoup</li>
<li>2.手动下载包后，终端切换到 解压的文件夹，输入 sudo python setup.py install 下载地址BeautifulSoup</li>
</ul>


<!--more-->


<h4>开始写代码吧</h4>

<p>先找一个想要抓取东西的网站，这里我就随便找一个吧 地址是：<a href="http://movie.douban.com/chart">http://movie.douban.com/chart</a>
好了在终端输入 vim 我知道这个东西，对于新手来说，就是一个挑战，这里我也建议使用轻量的Sublime
代码如下 (注意python是严格的缩进,以下代码要顶格写)</p>

<pre><code>#-*- coding:utf-8 -*-
import urllib2
import urllib
html=urllib2.urlopen("http://movie.douban.com/chart").read()
print html
</code></pre>

<p>输出的结果就是一个HTML的网页，这里我就看到自己想要抓取的图片和图片名的文字片段</p>

<pre><code>&lt;a class="nbg" href="http://movie.douban.com/subject/24879839/"  title="道士下山"&gt;
           &lt;img src="http://img3.douban.com/view/movie_poster_cover/ipst/public/p2251450614.jpg" alt="道士下山" class=""/&gt;
&lt;/a&gt;
</code></pre>

<p>分析我们想要的，一个是图片的名称，一个是图片的链接地址，直接上Python代码
    #-<em>- coding:utf-8 -</em>-
    import urllib2
    from bs4 import BeautifulSoup</p>

<pre><code>import sys  
reload(sys)  
sys.setdefaultencoding('utf8')

# 函数
def  printPlistCode():
    #1.得到这个网页的 html 代码 #
    html = urllib2.urlopen("http://movie.douban.com/chart").read()

    #2.转换 一种格式，方便查找
    soup = BeautifulSoup(html)
    #3.  得到 找到的所有 包含 a 属性是class = nbg 的代码块,数组
    liResutl = soup.findAll('a', attrs = {"class" : "nbg"})
    #4.用于拼接每个字典的字符串
    tmpDictM = ''

    #5. 遍历这个代码块  数组
    for li in liResutl:

        #5.1 找到 img 标签的代码块 数组
        imageEntityArray = li.findAll('img')

        #5.2 得到每个image 标签
        for image in imageEntityArray:
            #5.3 得到src 这个属性的 value  后面也一样 类似 key value
            link = image.get('src')
            imageName = image.get('alt')
            #拼接 由于 py中 {} 是一种数据处理格式，类似占位符
            tmpDict = '''@{0}@\"name\" : @\"{1}\", @\"imageUrl\" : @\"{2}\"{3},'''

            tmpDict =  tmpDict.format('{',imageName,link,'}')

            tmpDictM = tmpDictM + tmpDict

    #6.去掉最后一个 , 
    tmpDictM = tmpDictM[0:len(tmpDictM) - 1].decode('utf8')

    #7 拼接全部
    restultStr = '@[{0}];'.format(tmpDictM)

    print restultStr


if __name__ == '__main__':
    printPlistCode()
</code></pre>

<p>输出结果就是Objective-C的 数组</p>

<pre><code>@[@{@"name" : @"进击的巨人真人版：前篇", @"imageUrl" : @"http://img3.douban.com/view/movie_poster_cover/ipst/public/p2251690571.jpg"},@{@"name" : @"花与爱丽丝杀人事件", @"imageUrl" : @"http://img3.douban.com/view/movie_poster_cover/ipst/public/p2222398443.jpg"},@{@"name" : @"小黄人大眼萌", @"imageUrl" : @"http://img4.douban.com/view/movie_poster_cover/ipst/public/p2258235689.jpg"},@{@"name" : @"小森林 冬春篇", @"imageUrl" : @"http://img4.douban.com/view/movie_poster_cover/ipst/public/p2215147728.jpg"},@{@"name" : @"道士下山", @"imageUrl" : @"http://img3.douban.com/view/movie_poster_cover/ipst/public/p2251450614.jpg"},@{@"name" : @"深夜食堂 电影版", @"imageUrl" : @"http://img3.douban.com/view/movie_poster_cover/ipst/public/p2205014862.jpg"},@{@"name" : @"小男孩", @"imageUrl" : @"http://img4.douban.com/view/movie_poster_cover/ipst/public/p2230105606.jpg"},@{@"name" : @"头脑特工队", @"imageUrl" : @"http://img4.douban.com/view/movie_poster_cover/ipst/public/p2231021196.jpg"},@{@"name" : @"百元之恋", @"imageUrl" : @"http://img4.douban.com/view/movie_poster_cover/ipst/public/p2205471169.jpg"},@{@"name" : @"杀破狼2", @"imageUrl" : @"http://img4.douban.com/view/movie_poster_cover/ipst/public/p2246885606.jpg"}];
</code></pre>

<p>使用Xcode 写到Plist中去</p>

<pre><code>#import &lt;Foundation/Foundation.h&gt;

int main(int argc, const char * argv[]) {


NSArray *plistArray = @[@{@"name" : @"进击的巨人真人版：前篇", @"imageUrl" : @"http://img3.douban.com/view/movie_poster_cover/ipst/public/p2251690571.jpg"},@{@"name" : @"花与爱丽丝杀人事件", @"imageUrl" : @"http://img3.douban.com/view/movie_poster_cover/ipst/public/p2222398443.jpg"},@{@"name" : @"小黄人大眼萌", @"imageUrl" : @"http://img4.douban.com/view/movie_poster_cover/ipst/public/p2258235689.jpg"},@{@"name" : @"小森林 冬春篇", @"imageUrl" : @"http://img4.douban.com/view/movie_poster_cover/ipst/public/p2215147728.jpg"},@{@"name" : @"道士下山", @"imageUrl" : @"http://img3.douban.com/view/movie_poster_cover/ipst/public/p2251450614.jpg"},@{@"name" : @"深夜食堂 电影版", @"imageUrl" : @"http://img3.douban.com/view/movie_poster_cover/ipst/public/p2205014862.jpg"},@{@"name" : @"小男孩", @"imageUrl" : @"http://img4.douban.com/view/movie_poster_cover/ipst/public/p2230105606.jpg"},@{@"name" : @"头脑特工队", @"imageUrl" : @"http://img4.douban.com/view/movie_poster_cover/ipst/public/p2231021196.jpg"},@{@"name" : @"百元之恋", @"imageUrl" : @"http://img4.douban.com/view/movie_poster_cover/ipst/public/p2205471169.jpg"},@{@"name" : @"杀破狼2", @"imageUrl" : @"http://img4.douban.com/view/movie_poster_cover/ipst/public/p2246885606.jpg"}];
//路径可以自己选择
[plistArray writeToFile:@"/Users/xxx/Desktop/test/movie.plist" atomically:YES];

return 0;
</code></pre>

<p>到这里，就可以看到plist 文件可以用于测试了</p>

<p><img src="/images/python001.png" title="Caption" ></p>

<p>这里写图片描述
如果想要复制粘贴这里面的代码，那就选择Sublime编辑器</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[爬虫必备-正则表达式抓包]]></title>
    <link href="http://al1020119.github.io/blog/2015/10/13/zhengze/"/>
    <updated>2015-10-13T10:03:23+08:00</updated>
    <id>http://al1020119.github.io/blog/2015/10/13/zhengze</id>
    <content type="html"><![CDATA[<p>第一篇我们有介绍到使用青花瓷抓包，也提到了后面会介绍java和python实现，本篇就介绍一下怎么使用正则表达式抓取网络数据。</p>

<p>先来看看网络爬虫的基本原理：</p>

<p>一个通用的网络爬虫的框架如图所示：</p>

<p><img src="/images/zhengze001.png" title="Caption" ></p>

<!--more-->


<h5>网络爬虫的基本工作流程如下：</h5>

<ol>
<li><p>首先选取一部分精心挑选的种子URL；</p></li>
<li><p>将这些URL放入待抓取URL队列；</p></li>
<li><p>从待抓取URL队列中取出待抓取在URL，解析DNS，并且得到主机的ip，并将URL对应的网页下载下来，存储进已下载网页库中。此外，将这些URL放进已抓取URL队列。</p></li>
<li><p>分析已抓取URL队列中的URL，分析其中的其他URL，并且将URL放入待抓取URL队列，从而进入下一个循环。</p></li>
</ol>


<p>以下内容均为本人个人理解。</p>

<p>网络数据抓取</p>

<ol>
<li>概念：网络数据抓取，也叫网络爬虫。是在我们iOS程序中，获取要抓取到的网页上的数据。</li>
<li>用处：如果要用到某网站的一些数据，这个时候我们就要用到抓取数据技术。</li>
<li>建议：建议抓取过程中，多利用分类，多写一些分类方法，有助于提高程序可读性，也可提高效率。</li>
</ol>


<p>今天先来介绍一下第一种：正则表达式</p>

<blockquote><p>注意点：其实网络抓取数据很简单，但是有用到正则表达式，这个有人说难，有人说很难，有人说非常难，其实我们抓取数据只会用到“.&ldquo; 、&rdquo;*&ldquo;、&rdquo;?&ldquo;这三个符号！</p></blockquote>

<p>正则表达式中：“.”是包括任何字符不包括换行符，“*”是任意多个的字符，“？”是指到最近的一个URL，如果没有就是到最远的一个！</p>

<pre><code> NSString *pantten = [NSString stringWithFormat:@"&lt;ul class=\"cs_list\"&gt;(.*?)&lt;/ul&gt;"];

 NSRegularExpression *regx = [NSRegularExpression regularExpressionWithPattern:pantten options:NSRegularExpressionCaseInsensitive |NSRegularExpressionDotMatchesLineSeparators error:NULL];
</code></pre>

<p>其中有两个参数需要大家了解一下，很重要</p>

<ul>
<li>NSRegularExpressionCaseinsensitive 不区分大小写</li>
<li>NSRegularExpressionDotMatcheLineSeparators 让“点”字符可以匹配换行符</li>
</ul>


<p>抓数据，其实主要会写匹配字符串就行</p>

<pre><code>(.*?)表示要抓到的内容
.*?表示要忽略的内容，爱是啥是啥
字符串转义双引号用\转义括号用\\
</code></pre>

<p>在开发项目的过程，很多情况下我们需要利用互联网上的一些数据，在这种情况下，我们可能要写一个爬虫来爬我们所需要的数据。一般情况下都是利用正则表达式来匹配Html,获取我们所需要的数据。一般情况下分以下三步。</p>

<ul>
<li>1、获取网页的html</li>
<li>2、利用正则表达式，获取我们所需要的数据</li>
<li>3、分析，使用获取到的数据，（例如，保存到数据库）</li>
</ul>


<p>接下来我们分析代码：</p>

<h3>1、获取网页的html</h3>

<p>　　对于一些网页，不需要提交Post提交数据时，我们可以简单的利用NSURL类来获取我们所需要的html，交将其转换中kCFStringEncodingGB_18030_2000格式，解决中文乱码问题。</p>

<p>　　</p>

<pre><code>+(NSString*) urlstring:(NSString*)strurl{
　　　　NSURL *url = [NSURL URLWithString:strurl];
　　　　NSData *data = [NSData dataWithContentsOfURL:url];

　　　　NSStringEncoding enc = CFStringConvertEncodingToNSStringEncoding(kCFStringEncodingGB_18030_2000); 
　　　　NSString *retStr = [[NSString alloc] initWithData:data encoding:enc];

　　　　//NSLog(@" html = %@",retStr);

　　　　return retStr;
　　}
</code></pre>

<p> 对于需要Post提交数据的网页，我们可以利用强大的ASIFormDataRequest类来实现，例如：</p>

<pre><code>+(void)getPostResult:(NSString*)startqi{
　　　　ASIFormDataRequest *request = [[ASIFormDataRequest alloc] initWithURL:[NSURL URLWithString:URLPost]];

　　　　[request setPostValue:startqi forKey:@"startqi"];
　　　　[request setPostValue:@"20990101001" forKey:@"endqi"];
　　　　[request setPostValue:@"qihao" forKey:@"searchType"];//网页的中的搜索方式
　　　　[request startSynchronous];

　　　　NSData* data = [request responseData];

　　if (data==nil) {
　　　　FCLOG(@"has not data");
　　}
　　else{
　　　　NSStringEncoding enc = CFStringConvertEncodingToNSStringEncoding(kCFStringEncodingGB_18030_2000); 
　　　　NSString *retStr = [[NSString alloc] initWithData:data encoding:enc];
　　　　FCLOG(@"html = %@",retStr); 
　　}
}
</code></pre>

<p>这样的话，我们就通过了两种方式获取了我们所需要的html</p>

<h3>2、分析html</h3>

<p>　　关于利用正则表达式匹配问题，我又对NSString类扩展了一个方法-(NSMutableArray <em>)substringByRegular:(NSString </em>)regular。根据传入的正则表达式，返回所有匹配的数组。</p>

<p>　　</p>

<pre><code>@implementation NSString(StringRegular)


-(NSMutableArray *)substringByRegular:(NSString *)regular{

  　　　　　NSString * reg=regular;

　　　　　　NSRange r= [self rangeOfString:reg options:NSRegularExpressionSearch];

　　　　　　NSMutableArray *arr=[NSMutableArray array];

　　　　　　if (r.length != NSNotFound &amp;&amp;r.length != 0) {

　　　　　　int i=0;

　　　　　　while (r.length != NSNotFound &amp;&amp;r.length != 0) {

　　　　　　FCLOG(@"index = %i regIndex = %d loc = %d",(++i),r.length,r.location);

　　　　　　NSString* substr = [self substringWithRange:r];

　　　　　　FCLOG(@"substr = %@",substr);

　　　　　　[arr addObject:substr];

　　　　　　NSRange startr=NSMakeRange(r.location+r.length, [self length]-r.location-r.length);

　　　　　　r=[self rangeOfString:reg options:NSRegularExpressionSearch range:startr];
　　　　}
　　}
　　return arr;
}
@end
</code></pre>

<p>在这种情况下，我们首先我得到我们要获取数据的正则表达式，关于正则表达式这种火星文我就不多说了，我也很纠结，我就不多说了，但是有一点就是，所写的正则表达式一定是我们所需要的数据，并且能够屏蔽无效信息的，有可能在一次匹配中无法获取，可以多次利用正则表达式来分段获取。下面是我的语句，在我的例子中，就是两次利用正则表达式。</p>

<pre><code>NSString *regstr = @"&lt;td class=\'z_bg_05\'&gt;\\w{11}&lt;/td&gt;&lt;td class=\'z_bg_13\'&gt;(\\w{2}\\s{0,1})*&lt;/td&gt;";
NSMutableArray *arr=[strhtml substringByRegular:regstr];
</code></pre>

<h3>3、分析或利用数据，在这里，我只是利用上一篇博客上所述方法简单的把这些数据保存到了数据库（sqlite3）中。</h3>

<p>其实在这个arr数组中一条就是对应我数据库表中的一条记录，但是像td class等这些信息我是不需要的，所以再次利用正则表达式来分析NSString</p>

<pre><code>if (arr!=nil&amp;&amp;[arr count]&gt;0) {

　　　　　　NSString *prereg=@"\\w{11}";
　　　　　　NSString *backreg=@"(\\w{2}\\s{0,1}){8}";

　　　　　　TicketResultService *service=[[TicketResultService alloc] init];
　　　　　　[[Sqlite3Helper Instance] openDB];
　　　　for (NSString *sub in arr) {

　　　　　　TicketResult* r=[[[TicketResult alloc] init] autorelease];

　　　　　　NSMutableArray* prearr=[sub substringByRegular:prereg];

　　　　　　if (prearr!=nil&amp;&amp;[prearr count]&gt;0) {
　　　　　　　　r.sectionID=(NSString*)[prearr objectAtIndex:0];
　　　　　　}
　　　　　　else{
　　　　　　　　continue;
　　　　　　}

　　　　　　NSMutableArray *backarr=[sub substringByRegular:backreg];
　　　　　　if (backarr!=nil&amp;&amp;[backarr count]&gt;0) {
　　　　　　r.result=[backarr objectAtIndex:0];
　　　　　　}
　　　　　　else{
　　　　　　　　continue;
　　　　　　}

　　　　　　if([service isExist:r.sectionID]){
　　　　　　　　continue;
　　　　　　}

　　　　r.type=[NSNumber numberWithInt:1];

　　　　[service addModel:r];

　　}
　　[[Sqlite3Helper Instance] closeDB];

　　[service release];
}
</code></pre>

<blockquote><p>以上爬虫才算正式完成，其实，在此之前还有一个第0步，即判断设备目前的网络状态，如果没有联网的就没有必要去爬虫了，因为你也爬不到任何的数据。判断网络状态我是利用Apple官方的一个例子Reachability，网上也有很多关于这个的例子，我就不再细说了，非常感谢网上的各位大牛们提供的很好的办法，让我能更快的写出这些。</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[爬虫必备-青花瓷抓包]]></title>
    <link href="http://al1020119.github.io/blog/2015/10/11/qinghuaci/"/>
    <updated>2015-10-11T09:03:23+08:00</updated>
    <id>http://al1020119.github.io/blog/2015/10/11/qinghuaci</id>
    <content type="html"><![CDATA[<p>在之前个人学习ios开发的时候听过抓包相关的技术，但是自己没有实现，所以也只是当听听。</p>

<p>这段时间，由于公司新项目的原因，但是后台和UI都还没有，而又需要我先开始封装对应的工具或者一下大概的逻辑，我当时就蒙了，最后还是乖乖的来做。</p>

<p>网上找了一些接口，也找了不少类似的网站，但是发现再美我用不了有什么用呢？最后我想到了之前听别人说的网络爬虫，找了不少资料研究了一番。发现效果还不错，就在这里记录下来，希望对你有用！</p>

<p>关于网络数据抓取不仅仅在iOS开发中有，其他开发中也有，也叫网络爬虫，大致分为三种方式实现</p>

<ul>
<li>1: 青花瓷</li>
<li>2: 正则表达</li>
<li>3: 利用其他语言的工具包：java／Python</li>
</ul>


<!--more-->


<p>charles又名青花瓷，在iOS开发中的抓包中具有重要作用。最大的三点用处，一就是拦截别人软件的发送的请求和后端接口，练习开发。二是自己后端返回的response拦截修改后再接收以达到测试临界数据的作用。三写脚本重复拦截抓取别人的数据。(因为不太道德，本文不提第三点)</p>

<p>如果你不是在董铂然博客园看到本文，请点击查看原文。</p>

<h3>1.开始之前的准备工作</h3>

<p>首先安装一下这个软件</p>

<p>这个相信很多人电脑里应该都安装了，没安装的搜charles破解版也能很容易搜到。如果没安装java环境，首次进入charles会提示让你安装java包得，直接给你链接是苹果官网的，去下一个一键安装就行了。</p>

<p> <img src="/images/qinghuaci001.jpg" title="Caption" ></p>

<p>安装完成后先打开，在进行下面操作。</p>

<p>然后去自己电脑的系统偏好设置-》网络-》选中现在连着的网(大部分人应该都是WiFi吧)可以查到自己这个电脑在现在这个wifi里的IP地址，比如我现在这个就是192.168.0.105(建议最好用私人网络，用公司网络的话可能会有限制会出现没反应的问题)</p>

<p><img src="/images/qinghuaci002.jpg" title="Caption" ></p>

<p>然后找到自己手机也连着这个同名的wifi，然后选中右边的蓝色i。</p>

<p> <img src="/images/qinghuaci003.jpg" title="Caption" ></p>

<p><img src="/images/qinghuaci004.jpg" title="Caption" ></p>

<p>然后进入到了这个无线局域网的高级设置页面。进去之后拉到最下方，找到HTTP代理字样。然后选中手动代理，并在服务器中填自己电脑查到的ip地址，然后把端口调8888，最后点击左上角返回。返回值后系统会自动设置代理重新连接。</p>

<p>这时候你的手机上网的过程中就要经过你的电脑了。刚用手机打开一个联网的程序，你的电脑上应该会显示一个弹窗问你【allow】还是【deny】肯定不能拒绝啊就点allow吧。这个只有第一次才弹窗，图没截上，你到时候看见肯定能看懂的。点了同意之后你手机发出的每一个请求都会被拦截出痕迹。</p>

<h3>2.拦截某个软件的接口数据</h3>

<p>拿网易新闻举例，以前就练习这写过网易新闻的项目，其中网易的接口全是用charles拦截的。拦截到了网易发请求时发的是什么，然后在练习项目中需要获取数据的地方也把这一串链接直接拿过来用即可。</p>

<p><img src="/images/qinghuaci005.jpg" title="Caption" ></p>

<p>当然这上面拦到的比较多，如果有过开发经验的话应该能很快看出来右边哪个是真正返回json数据的接口。或者一个一个点看内容也行啊。</p>

<p>比如选中一个url然后右键点击copy。</p>

<p><img src="/images/qinghuaci006.jpg" title="Caption" ></p>

<p>放到浏览器地址栏里打一下。能看到</p>

<p><img src="/images/qinghuaci007.jpg" title="Caption" ></p>

<p>这就说明这个接口是对的了。可以获取到数据。然后可以给他转化一下看的更清楚。虽然很多人都是用bash看，但我还是推荐一个网址<a href="http://www.w3cschool.cc/jsontool">http://www.w3cschool.cc/jsontool</a>。转JSON之后看的非常清晰。大部分软件json整理后都是默认把大括号全都打开，而仅有这个网站是默认全给你把大括号关上。想点哪个再点开，而且能知道字典里有多少个键值对，所以看着非常清晰。</p>

<p><img src="/images/qinghuaci008.jpg" title="Caption" ></p>

<p>到此就已经完成了一次完整的，拉取接口，和获得数据。</p>

<p>这里有两点我想说下：</p>

<p>①就是如果这个App发的请求加密了或是RSA什么的，这个就算拦截了你也弄不到数据。网易是没有做任何加密，所以可以抓取到数据。以前试了拦截百度医生的就不行。他设置的是一分钟内能获取到数据，超过了1分钟这个复制过来的接口就取不到数据了。怀疑可能是用的HMAC方法加密，并且在里面加入了时间判断。32分和33分发出的请求经过编码后是不一样的，后台可能做了容错，会把32分和31分都和你判断下，只要有一个对上就让你过，但是超过了整整一分钟后是肯定获取不到数据了。</p>

<p>②就是很多比较大型的网站，一般会开放一个开发者平台，里面注册开发者账号后会向你公开一个接口文档，你不用再去费事的拦截了。像新浪微博和大众点评都有开发者平台。</p>

<h3>3.更改返回数据来测试临界情况</h3>

<p>这个是重点了。因为这种做法可以让一个iOS前端的开发人员独立完成测试而不用拉过来一个后端一起联调。并且各种特殊维度，或是临界的账号也不用再去辛苦找了，仅仅自己在青花瓷上改来改去就可以达到效果了。比如这个地方如果返回了nil程序会不会崩，直接改response就行了。下面是具体操作方案。</p>

<p>打开青花瓷切换成结构页面</p>

<p><img src="/images/qinghuaci009.jpg" title="Caption" ></p>

<p>这里可以看到断点和调试信息</p>

<p><img src="/images/qinghuaci010.jpg" title="Caption" ><br/>
<img src="/images/qinghuaci011.jpg" title="Caption" ></p>

<p>然后找一个我们公司的页面。这个页面本来应该返回是这样的：如上图右边</p>

<p>你先正常的打开这个页面把玩几下，这个青花瓷就会抓取很多接口和域名分类了。在这里找到你这个页面所属的域名分类应该不难。然后打上断点。这里要注意是在域名上打断点而不是在下面的单个请求上打断点。</p>

<p>再次用手机进入这个页面，就会通过你刚才打断点的那个域名来请求数据，就会被断点拦住，如下图所示。</p>

<p><img src="/images/qinghuaci012.jpg" title="Caption" ></p>

<p>右边的信息也很清晰，一开始可以编辑请求。如果点击单步执行，等一下相应回来了也可以编辑响应。</p>

<p><img src="/images/qinghuaci013.jpg" title="Caption" ></p>

<p><img src="/images/qinghuaci014.jpg" title="Caption" ></p>

<p>这里的有好几种查看的方式，但是推荐使用JSON Text看的比较清楚。 现在我们对拦截回来的数据进行修改，我把这些统计数据全改成999如下图</p>

<p> <img src="/images/qinghuaci015.jpg" title="Caption" ></p>

<p>然后再次点击下方的Execute单步执行，更改后的数据就会像正常返回回来的数据那样显示到，APP的页面上展示。</p>

<p><img src="/images/qinghuaci016.jpg" title="Caption" ></p>

<p>能来到这一步就说明已经完整的掌握了用青花瓷篡改返回数据测试App的技术。</p>

<p>如果你不是在董铂然博客园看到本文，请点击查看原文。</p>

<p>这么做的意义：</p>

<p>这里只是简单的更改了一些数字，在页面显示更加直观。实际的操作中，你可以经常用来把某些值改为临界情况以看到App在处理这些临界状况时的反应，这样比找那些临界数据的测试账号成本要低得多。也可以把一些可能不会反回数值的字段找到，直接将里面的值删成nil，看看会不会报异常等等。</p>
]]></content>
  </entry>
  
</feed>
