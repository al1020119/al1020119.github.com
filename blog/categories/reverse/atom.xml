<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Reverse | iOS梦工厂]]></title>
  <link href="http://al1020119.github.io/blog/categories/reverse/atom.xml" rel="self"/>
  <link href="http://al1020119.github.io/"/>
  <updated>2017-01-10T14:21:15+08:00</updated>
  <id>http://al1020119.github.io/</id>
  <author>
    <name><![CDATA[iCocos]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[逆向篇-资源文件夹获取]]></title>
    <link href="http://al1020119.github.io/blog/2016/03/12/ziyuanwenjianhuoqu/"/>
    <updated>2016-03-12T13:32:08+08:00</updated>
    <id>http://al1020119.github.io/blog/2016/03/12/ziyuanwenjianhuoqu</id>
    <content type="html"><![CDATA[<p>用pngcrush反编译ios app 资源文件</p>

<p>时间：2012-12-27 11:56:45 类别：ios开发 访问: 3705 次</p>

<p>要提高app制作水平，最好的方法就是学习领先者，用pngcrush反编译ios app 资源文件，步骤很简单</p>

<!--more-->


<ol>
<li><p>在电脑的itunes中下载你选中的app，下载完成之后，然后在finder里面找到对应的ipa包，也可以在91等市场中直接下载ipa文件</p></li>
<li><p>ipa文件其实是zip包，重命名为zip后缀文件之后，双击打开
找到 xxx.app 文件，这其实是个目录，点击右键，在菜单中选中“查看包内容”，就可以进入目录，然后看到大量的资源文件，这些png文件都直接放在app的根目录，你可以在finder中直接浏览</p></li>
<li><p>但是这些png文件都是打包过程中被压缩过的，photoshop无法正确识别 （ 注：打包app的时候，你可以在xcode project选项中选择对png文件不压缩）</p></li>
<li><p>要把这些png文件还原，可以通过一个名叫 pngcrush 的开源软件，你可以到 sourceforge 下载，实际上ios的sdk也提供了这个程序（xcode就是利用它压缩png的）xcrun -sdk iphoneos -find pngcrush 可以获得 pngcrush的安装目录，然后直接使用，或者在你的$PATH目录里面做一个符号链接，这样可以在console窗口直接敲pngcrush</p></li>
</ol>


<p>进入资源文件存放目录，打开对应的命令行窗口，执行下面的命令即可</p>

<pre><code>pngcrush -d xxx reverted -revert-iphone-optimizations -q *.png
pngcrush -e xxx reverted -revert-iphone-optimizations -q *.png
</code></pre>

<p>上面提到的方法都是在mac操作系统下面，如果是windows/linux也可以用，pngcrush也提供了对应的版本</p>

<hr />

<pre><code>Q Q：2211523682/790806573

微信：18370997821/13148454507

微博WB:http://weibo.com/u/3288975567?is_hot=1

git博文：http://al1020119.github.io/

github：https://github.com/al1020119
</code></pre>

<p><img src="/images/iCocosCoder.jpg" title="Caption" ></p>

<p><img src="/images/iCocosPublic.jpg" title="Caption" ></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[逆向篇-静态分析与使用]]></title>
    <link href="http://al1020119.github.io/blog/2016/03/10/jingtaifenxiyushiyong/"/>
    <updated>2016-03-10T13:32:08+08:00</updated>
    <id>http://al1020119.github.io/blog/2016/03/10/jingtaifenxiyushiyong</id>
    <content type="html"><![CDATA[<p>逆向工程－静态分析及使用</p>

<p>看到一篇装逼技术，有机会好好研究一下。。。。。</p>

<p>最近在学习IOS逆向工程，查看网络上的资料也不是太多，边学边总结一下。</p>

<p>首先学习资料：</p>

<p>念茜（大神）的博客： <a href="http://nianxi.net">http://nianxi.net</a></p>

<p>《ios应用逆向工程 分析与实战》</p>

<!--more-->


<p>&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;-凌乱的分割线&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;</p>

<p>其次讲讲要用到的工具（ios安装工具使用Cydia中搜索安装，有些需要数据源可以自行查找）：</p>

<ul>
<li><p>已经越狱的IOS设备：这是必须的</p></li>
<li><p>OpenSSH（数据源：<a href="http://apt.saurik.com%EF%BC%89%EF%BC%9A%E7%94%A8%E4%BA%8E%E8%BF%9C%E7%A8%8B%E7%99%BB%E5%BD%95ssh%E5%92%8C%E6%96%87%E4%BB%B6%E4%BC%A0%E8%BE%93scp">http://apt.saurik.com%EF%BC%89%EF%BC%9A%E7%94%A8%E4%BA%8E%E8%BF%9C%E7%A8%8B%E7%99%BB%E5%BD%95ssh%E5%92%8C%E6%96%87%E4%BB%B6%E4%BC%A0%E8%BE%93scp</a></p></li>
<li><p>class-dump-z: 用于简单分析出工程中的类名和函数名</p></li>
<li><p>IDA：强大的反编译工具</p></li>
<li><p>Hopper Disassembler：类似IDA 我比较喜欢，能简单转换成OC的功能</p></li>
<li><p>Reveal:UI层解析工具</p></li>
<li><p>iFunBox 、 iTools ：两个都是强大的ios设备管理工具，越狱后能轻松读取应用文件等功能</p></li>
</ul>


<p>&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;-凌乱的分割线&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;</p>

<p>恩，差不多就这么多了！上面的工具大部分都是收费的，不过都是有试用版的，接下来我们一个个分析：</p>

<p>ios设备越狱，这个我就不讲了吧，不过我要赞@盘古团队一个，目前所有ios系统都可以越狱（包括ios8.x）</p>

<p>在ios设备上下载OpenSSH （数据源：<a href="http://apt.saurik.com%EF%BC%89%EF%BC%8C%E7%84%B6%E5%90%8E%E7%94%A8%E7%94%B5%E8%84%91%E8%BF%9C%E7%A8%8B%E7%99%BB%E5%BD%95ios%EF%BC%9A">http://apt.saurik.com%EF%BC%89%EF%BC%8C%E7%84%B6%E5%90%8E%E7%94%A8%E7%94%B5%E8%84%91%E8%BF%9C%E7%A8%8B%E7%99%BB%E5%BD%95ios%EF%BC%9A</a></p>

<p>然后输入密码，@后面是手机的IP号，越狱后默认密码好像是123456.</p>

<p>传输文件的命令是</p>

<pre><code>scp gdbinit root@172.168.1.100:/var/root
scp root@172.168.1.100:/var/root/123.txt ~/
</code></pre>

<ol>
<li>class-dump-z 是一个强大的函数提取工具，非常好用，也是基础工具</li>
</ol>


<p>下载地址：<a href="http://stevenygard.com/projects/class-dump">http://stevenygard.com/projects/class-dump</a></p>

<pre><code>              https://code.google.com/p/networkpx/wiki/class_dump_z
</code></pre>

<p>可以发到手机里调用，也可以在电脑上调用，要解析的文件是在应用目录下x.app（里面还有用到的所有文件资源）下面的x（x是你要分析的应用名）以唱吧为例，用ifunbox找到应用进入应用目录就可以看到ktv.app了打开包文件就能找到ktv。</p>

<pre><code>$ class-dump-z ktv &gt; ktv.txt       //导出所有内容到文件
$ class-dump-z -H ktv -o ktvdir/   //导出所有内容目录到文件夹（首先要创建ktvdir文件夹）
</code></pre>

<p>*这里会有一个问题，就是从app store下载的应用解析出来会是乱码，因为应用被加密了。解决办法</p>

<p><img src="/images/nixiang001.png" title="Caption" ></p>

<p>去渠道上下应用如同步推、91</p>

<p>解密工具 如AppCrackr(源<a href="http://cydia.xsellize.com">http://cydia.xsellize.com</a>)、Crackulous、Clutch</p>

<pre><code>  class-dump 只能解析出类名和函数名，不能看到具体的实现逻辑。但是很直观
</code></pre>

<p> 4.IDA和Hopper Disassembler差不多，能看到每个函数的具体逻辑（但是-都是汇编）IDA很强大，能在后面标记的oc的函数名，但是我更喜欢Hopper Disassembler，因为他能简单的模拟出oc源码，但是也是非常简单的。两者按空格键都能显示出分支逻辑来。</p>

<pre><code>汇编非常难看懂，我们需要的是耐心+耐心。后面可以加上动态工具联合分析能更有效
</code></pre>

<p><img src="/images/nixiang002.png" title="Caption" ></p>

<p> 5.Reveal的功能就更强大了，能表明出UI的具体结构来，告诉你每个View的类型是什么，这通常也是我们常用的分析一个app的切入点。</p>

<p>下载地址：<a href="http://revealapp.com">http://revealapp.com</a></p>

<p>下载完后打开reveal在菜单目录中help-show reveal library in finder打开库文件，将两个文件发到手机里</p>

<p><img src="/images/nixiang003.png" title="Caption" ></p>

<p>接下来编辑libReveal.plist文件</p>

<p>在/Library/MobileSubstrate/DynamicLibraries/下创建文件libReveal.plist，指定app的Bundle，可以指定多个</p>

<p>同学们会问了，app 的bundleID怎么查看呢，我们还是用ifunbox工具找到应用目录，在x.app文件夹中会有info.plist文件，打开就能找到。</p>

<p>最后重启设备-打开想分析的应用-电脑打开reveal接口，就可以点击分析了</p>

<p><img src="/images/nixiang004.png" title="Caption" ></p>

<p>总结一下吧，分析一个应用的逻辑是这样的：</p>

<ul>
<li><p>拿个越狱机-下好工具</p></li>
<li><p>去越狱平台下个想分析的应用（或者去app store下，用解密工具解密一下）</p></li>
<li><p>导入reveal分析页面，得到想要的知道的具体视图类或者大致范围</p></li>
<li><p>分析class-dump中，找到想要的类和函数</p></li>
<li><p>在IDA中找到具体函数，查看逻辑</p></li>
</ul>


<blockquote><p>单纯的静态分析只能知道个大概，想知道框架和具体内容还需要动态分析（下面分析）的帮助。不过想知道一个应用用到了什么库，界面是什么结构，有什么图片资源，上面的绝对够用了。总之逆向工程是比较枯燥无味的东西，资料又少，需要的是。。。。。加油</p></blockquote>

<hr />

<pre><code>Q Q：2211523682/790806573

微信：18370997821/13148454507

微博WB:http://weibo.com/u/3288975567?is_hot=1

git博文：http://al1020119.github.io/

github：https://github.com/al1020119
</code></pre>

<p><img src="/images/iCocosCoder.jpg" title="Caption" ></p>

<p><img src="/images/iCocosPublic.jpg" title="Caption" ></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[逆向篇-反编译和防反编译]]></title>
    <link href="http://al1020119.github.io/blog/2016/03/08/fanbianyihefangfanbianyi/"/>
    <updated>2016-03-08T13:32:08+08:00</updated>
    <id>http://al1020119.github.io/blog/2016/03/08/fanbianyihefangfanbianyi</id>
    <content type="html"><![CDATA[<p>关于反编译和防止反编译</p>

<h3>反编译</h3>

<ul>
<li><p>内购破解</p>

<ul>
<li>iOS应用需防反编译风险之一：插件法（仅越狱）、iTools工具替换文件法（常见为存档破解）、八门神器修改</li>
</ul>
</li>
<li><p>网络安全风险</p>

<ul>
<li>iOS应用需防反编译风险之二：截获网络请求，破解通信协议并模拟客户端登录，伪造用户行为，对用户数据造成危害</li>
</ul>
</li>
</ul>


<!--more-->


<ul>
<li><p>应用程序函数PATCH破解</p>

<ul>
<li>iOS应用需防反编译风险之三：利用FLEX 补丁软件通过派遣返回值来对应用进行patch破解</li>
</ul>
</li>
<li><p>源代码安全风险</p>

<ul>
<li>iOS应用需防反编译风险之四：通过使用ida等反汇编工具对ipa进行逆向汇编代码，导致核心代码逻辑泄漏与被修改，影响应用安全</li>
</ul>
</li>
<li><p>面对这些iOS应用存在的风险，iOS应用如何防止被反编译，下面看下iOS应用加密技术</p></li>
</ul>


<h3>iOS应用加密防反编译技术</h3>

<ul>
<li><p>本地数据加密</p>

<ul>
<li>iOS应用防反编译加密技术之一：对NSUserDefaults，sqlite存储文件数据加密，保护帐号和关键信息</li>
</ul>
</li>
<li><p>URL编码加密</p>

<ul>
<li>iOS应用防反编译加密技术之二：对程序中出现的URL进行编码加密，防止URL被静态分析</li>
</ul>
</li>
<li><p>网络传输数据加密</p>

<ul>
<li>iOS应用防反编译加密技术之三：对客户端传输数据提供加密方案，有效防止通过网络接口的拦截获取数据</li>
</ul>
</li>
<li><p>方法体，方法名高级混淆</p>

<ul>
<li>iOS应用防反编译加密技术之四：对应用程序的方法名和方法体进行混淆，保证源码被逆向后无法解析代码</li>
</ul>
</li>
<li><p>程序结构混排加密</p>

<ul>
<li>iOS应用防反编译加密技术之五：对应用程序逻辑结构进行打乱混排，保证源码可读性降到最低</li>
</ul>
</li>
</ul>


<h3>下面是iOS应用加密防反编译前后对比</h3>

<p>iOS应用防反编译总结</p>

<ul>
<li><p>通过以上研究，iOS应用开发者必须要注意iOS应用反编译技术研究了，不要让iOS应用重蹈Android应用的覆辙，iOS应用防反编译！</p></li>
<li><p>反编译的流程，就是虚拟一个执行环境，看程序执行了那些指令，翻译成相应的语句一般的流程是先把程序调入到数据段， 虚拟运行环境，一般这分配文件头部，从纪录指令程序数据段，载入到虚拟环境中，纪录指令，遇到跳转指令，压入栈，形成树结构（看数据结构），遍历每个节点 的指令。形成完整程序</p></li>
</ul>


<hr />

<pre><code>Q Q：2211523682/790806573

微信：18370997821/13148454507

微博WB:http://weibo.com/u/3288975567?is_hot=1

git博文：http://al1020119.github.io/

github：https://github.com/al1020119
</code></pre>

<p><img src="/images/iCocosCoder.jpg" title="Caption" ></p>

<p><img src="/images/iCocosPublic.jpg" title="Caption" ></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[逆向篇-检测是否越狱]]></title>
    <link href="http://al1020119.github.io/blog/2016/03/05/jianceshifouyueyu/"/>
    <updated>2016-03-05T13:32:08+08:00</updated>
    <id>http://al1020119.github.io/blog/2016/03/05/jianceshifouyueyu</id>
    <content type="html"><![CDATA[<p>底层开发之越狱开发第二篇</p>

<p>今天项目中要用到检查iPhone是否越狱的方法。</p>

<p>Umeng统计的Mobclick.h里面已经包含了越狱检测的代码，可以直接使用</p>

<!--more-->


<p>复制代码</p>

<pre><code>/*方法名:
 *        isJailbroken
 *介绍:
 *        类方法，判断设备是否越狱，判断方法根据 apt和Cydia.app的path来判断
 *参数说明:
 *        无
 *        
 *
 */

#pragma mark utils api
// 类方法，判断当前设备是否已经越狱
+ (BOOL)isJailbroken;
// 类方法，判断你的App是否被破解
+ (BOOL)isPirated;
</code></pre>

<p>复制代码</p>

<p>apt和Cydia的方式来进行判断的，没看见源码</p>

<p>然后再介绍两种方法来查看是否已经越狱，知其然知其所以然、、、</p>

<ol>
<li>apt</li>
</ol>


<hr />

<pre><code> - (BOOL) hasAPT
 {
 return [[NSFileManager defaultManager] fileExistsAtPath:@"/private/var/lib/apt/"];
 }
</code></pre>

<ol>
<li>system</li>
</ol>


<hr />

<pre><code>1 - (BOOL) successCallSystem
2 {
3 return (system("ls") == 0) ? YES : NO;
4 }
</code></pre>

<p>3.示例代码</p>

<pre><code> 1 static const char* jailbreak_apps[] =
 2 
 3     {
 4         "/Applications/Cydia.app",
 5         "/Applications/limera1n.app",
 6         "/Applications/greenpois0n.app",
 7         "/Applications/blackra1n.app",
 8         "/Applications/blacksn0w.app",
 9         "/Applications/redsn0w.app",
10         "/Applications/Absinthe.app",
11         NULL,
12     };
13      
14     - (BOOL) isJailBroken
15     {
16         // Now check for known jailbreak apps. If we encounter one, the device is jailbroken.
17         for (int i = 0; jailbreak_apps[i] != NULL; ++i)
18         {
19             if ([[NSFileManager defaultManager] fileExistsAtPath:[NSString stringWithUTF8String:jailbreak_apps[i]]])
20             {
21                 //NSLog(@"isjailbroken: %s", jailbreak_apps[i]);
22                 return YES;
23             }
24         }
25          
26         // TODO: Add more checks? This is an arms-race we're bound to lose.
27          
28         return NO;
29     }
30  
31 
32 @interface UIDevice (Helper)  
33 - (BOOL)isJailbroken;  
34 @end
35 
36 @implementation UIDevice (Helper)  
37 - (BOOL)isJailbroken {  
38   BOOL jailbroken = NO;  
39   NSString *cydiaPath = @"/Applications/Cydia.app";  
40   NSString *aptPath = @"/private/var/lib/apt/";  
41   if ([[NSFileManager defaultManager] fileExistsAtPath:cydiaPath]) {  
42     jailbroken = YES;  
43   }  
44   if ([[NSFileManager defaultManager] fileExistsAtPath:aptPath]) {  
45     jailbroken = YES;  
46   }  
47   return jailbroken;  
48 }  
49 @end
</code></pre>

<hr />

<pre><code>Q Q：2211523682/790806573

微信：18370997821/13148454507

微博WB:http://weibo.com/u/3288975567?is_hot=1

git博文：http://al1020119.github.io/

github：https://github.com/al1020119
</code></pre>

<p><img src="/images/iCocosCoder.jpg" title="Caption" ></p>

<p><img src="/images/iCocosPublic.jpg" title="Caption" ></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[逆向篇-方法与工具介绍]]></title>
    <link href="http://al1020119.github.io/blog/2016/02/25/fangfayugongju/"/>
    <updated>2016-02-25T13:32:08+08:00</updated>
    <id>http://al1020119.github.io/blog/2016/02/25/fangfayugongju</id>
    <content type="html"><![CDATA[<p>之前接触过iOS逆向开发，后来工作中没这方面需求，也就没再看了。最近一段时间由于各种原因又需要逆向某些App来用于学习，所以又重新拾起来。</p>

<p>这里总结一下几种iOS逆向的方法和工具：</p>

<h4>iOS逆向-静态分析</h4>

<p>涉及到的工具有</p>

<ul>
<li> OpenSSH (用于远程登录ssh和文件传输scp)</li>
<li> class-dump(用于简单分析出工程中的类名和函数名)</li>
<li> Hopper Disassembler(反编译工具)</li>
<li> Reveal (对越狱后的设备查看任意app的布局)</li>
</ul>


<!--more-->


<p>iOS逆向-动态分析</p>

<p>涉及到的工具有
    cycript (cycript是一个脚本语言，可以看做Objective-JavaScript，形容 的非常贴切。配合静态调试，可以调用运行中的app内的任意方法)</p>

<p>iOS逆向-内部钩子</p>

<p>主要是编写iOS动态库，加载到越狱手机中，使用iOS的 Method Swizzling(方法调配)来获 得(截断/改变)底层调用的方法。这样我们可以自由的修改或者读取一些想要的东西。</p>

<p>iOS逆向相关:theos和iOSOpenDev搭建越狱开发环境，创建iOS动态链接库(Dylib文件)编写(hook)及测试；</p>

<p>iOS逆向思路进展:使用InspectiveC来查看调用堆栈：</p>

<p>跟踪一个程序，看看这个程序的执行流程是什么样的，以及某个函数的调用参数是什么。</p>

<p>常规的方法是在汇编中寻找objc_msgSend，一层一层跟下去。这是比较笨的办法，而且不能动态查看函数的数。</p>

<p>通过InspectiveC,我们可以动态的查看：</p>

<ul>
<li>某个类的所有方法调用情况</li>
<li>某个类的某个方法的调用情况</li>
<li>某个类的实例对象的所有方法的调用情况</li>
<li>某个类的实例对象的某个方法的调用情况</li>
<li>某个方法签名的调用情况</li>
</ul>


<p>跟踪一个程序，看看这个程序的执行流程是什么样的，以及某个函数的调用参数是什么。</p>

<p>常规的方法是在汇编中寻找objc_msgSend，一层一层跟下去。这是比较笨的办法，而且不能动态查看函数的数。</p>

<p>通过InspectiveC,我们可以动态的查看：
* 某个类的所有方法调用情况
* 某个类的某个方法的调用情况
* 某个类的实例对象的所有方法的调用情况
* 某个类的实例对象的某个方法的调用情况
* 某个方法签名的调用情况</p>

<hr />

<pre><code>Q Q：2211523682/790806573

微信：18370997821/13148454507

微博WB:http://weibo.com/u/3288975567?is_hot=1

git博文：http://al1020119.github.io/

github：https://github.com/al1020119
</code></pre>

<p><img src="/images/iCocosCoder.jpg" title="Caption" ></p>

<p><img src="/images/iCocosPublic.jpg" title="Caption" ></p>
]]></content>
  </entry>
  
</feed>
