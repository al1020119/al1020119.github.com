---
layout: post
title: "简单环境介"
date: 2016-03-05 13:32:08 +0800
comments: true
categories: Reverse
description: iCocos博客
keywords: iCocos, iOS开发, 博客, 技术分析, 文章, 学习, 曹黎, 曹理鹏


---

{% img /images/bgHeader.png Caption %}  


###知识点准备

######越狱的三点

* 第一点——越狱开放了iOS的文件系统，使得用户一下子获得了root权限，获得了整个iOS系统的掌控大权。越狱之后用iFunBox等工具可以可简单地看到iOS的整个文件系统，因此也可以修改系统UI、铃声，或者当U盘用。同样的，越狱之后安装的一些程序，也同样突破了沙盒的限制，甚至获得root权限，程序的行为可以不受用户和系统的限制。权利和责任的对等的，获得了root权限的用户就必须对这个系统对安全和完整性负责。可惜的是很多人越狱了，但又抱怨iPhone出现的耗电、卡机、白苹果等等现象。目测很多Android和越狱用户，确实没这个能力去负起这个责任。

* 第二点——cydia。基本所有人都把它当作越狱的显性标志。cydia表面上看来就是一个AppStore，实际上利用了另外一套软件管理系统——“Debian Package ”，也就是常说的dpkg，使用的安装包是deb，在Ubuntn上很是常见。deb的安装和卸载依靠的是一套完整的脚本，用control作为软件的标识信息，数据用tar压缩。另外，cydia还有软件源这个机制，由于我没搭过源服务器，完全不懂其中原理。

* 第三点——MobileSubstrate。这是越狱必装插件，也是tweak开发的前提。那些让iPhone能拦截黑名单电话的，或者让时间能显示年月日的，或者在状态栏添加个天气图标的程序，基本都依赖与此。





<!--more-->




事实上，MobileSubstrate包含了三大组件。

    MobileHooker

俗称钩子。这把存在于内存里的钩子能钩住任何想钩住的系统方法，并替换成自己的实现方法。举例而言，黑名单的电话能被挂断，是因为在接通的那个系统方法里，并替换掉且不执行原有的方法，所以接通电话的事件也就被中断了。当然，那些奇怪问题诸如白苹果等事件基本都是由这个引起的。

    MobileLoader

钩子能够加载进内存并动态替换内存，靠的就是这个。其中编写.plist文件来限制加载范围必不可少。

    Safe mode

越狱后的机子基本都经历过安全模式，当SpringBoard崩溃时会自动进入安全模式，靠的就时这个的功劳，不然，这世界上不知又要多了多少部白苹果。

若想了解更多MobileSubstrate，可以点这里

何为越狱已经结束，为何越狱也就明朗起来了。

    想掌握iOS的整个文件系统，把iPhone当U盘使。
    为了获得更好等功能，如电话增强功能、flash等
    搞一些修改系统的行为，如更换UI、铃声、图标，等等
    工作需要（比如说我）
    安装免费软件（我故意放到最后的）

最后提醒一句，在非越狱机上，AppStore上的那些来电归属地，透视镜，指纹锁，基本都是假的，看完这篇文章，原因读者大概也能略知一二了。而那些省电、清内存之类的，反正我是不用，这些东西交给系统就行了，反正我上没见过iPhone4或4s会卡到游戏玩不了需要硬启动的。用户程序要操心这些东西，说真的，有心无力。有钱的话，买买几个正版的单机游戏，购买一次还提供永久的免费升级，也挺值了。

###环境准备


曾经在cocoachina看过有人评论，越狱开发，只要找个稍微懂UNIX和Objective-C的开发人员就行了。看见这话真是无比痛心。AppStore开发者即使再痛恨越狱，但也没必要用如此言语贬低越狱开发人员。越狱开发可能想象中很是简单，但绝不是简单到用几个Private API或者在搞个重启关机等等事情（说实话重启手机还真不是一句代码能实现的）。越狱开发混了几个月，发现自己知识面完全不行。从我不成熟的眼光看来，越狱开发需要以下的几个素质：

    Objective-C以及iOS开发

这一点算是囊括了AppStore开发的东西。没有公司会愿意开发一个没有用户界面的东西。相比于AppStore开发，越狱开发的好处是可以使用Private API，但同时需要忍受无文档，以及一堆数据类型为id的变量带来的痛苦。

    UNIX

权限、脚本、进程管理，等等，哪一个不会都可能成为开发中的软肋。对于操作系统没好好学过的我，可怜了我的肋骨哟。

    iOS的特性

这一点抽象到连我自己也说不清。iOS作为一个类UNIX系统，肯定有一套属于自己的特性。掌握它的特性的人，需要是一个拥有理性头脑的果粉（可惜我不是）。对iOS特性的掌握可以快速找到各种奇奇怪怪的需求的解决方案，以及解决各种无log无法调试无稳定重现路径的bug甚至崩溃甚至白苹果。说个最近遇到的，某天发现了我的未接来电无法显示在通知栏了，于是我在某个文件夹里翻到了某张plist打开阅读之后果断删了，重启SpringBoard后一切正常，这能说成是一种敏感么？ 扯远了。


说说越狱的开发环境。其实作为一个不太入流的领域，不能指望哪个大公司某天推出一套越狱开发工具。不过，多亏了国外几位越狱大神，越狱开发才逐渐模板化。刚接触越狱开发时，最有名的莫过于theos了，模板多且编译简单。不过，今年二月发布的iOSOpenDev则集合了theos的所有优势，同时集合到Xcode之中，还能实现简单的deb打包，算是贴心尽意了。 安装iOSOpenDev之前，可先确认：

    Xcode4.0及以上
    dpkg已安装。利用的是dpkg相关的东西，打包这些东西避免不了。推荐使用macports安装
    git已安装。利用的是git相关的东西，很多开源项目都托管在git上
    thoes已安装。很多旧的开源项目都是可不是由iOSOpenDev创建的，使用theos可以快速编译他们，同时iOSOpenDev的Logos模板是依托于theos的，而Logos模板，在我看来是tweak开发最优秀的模板，没有之一

接下来就可以安装iOSOpenDev。一直确定下去，假如不需要打包功能，则不需要填写IP等东西。事实上除了学习之外，基本可以忽略打包功能，脚本打包才是王道。 更详细的东西，可以看这里。 安装完毕，打开Xcode，新建工程，发现有iOSOpenDev一项，还有大量模板可选时，说明环境搭建已成功。Enjoy it！ 


===

    Q Q：2211523682/790806573

    微信：18370997821/13148454507
    
    微博WB:http://weibo.com/u/3288975567?is_hot=1
    
	git博文：http://al1020119.github.io/
	
	github：https://github.com/al1020119


{% img /images/iCocosCoder.jpg Caption %}  

{% img /images/iCocosPublic.jpg Caption %}  